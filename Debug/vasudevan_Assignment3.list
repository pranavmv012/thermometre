
vasudevan_Assignment3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800ac00  0800ac00  0001ac00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b040  0800b040  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b040  0800b040  0001b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b048  0800b048  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b048  0800b048  0001b048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001e0  0800b230  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800b230  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013108  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024c6  00000000  00000000  00033318  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001098  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024309  00000000  00000000  00037a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3b1  00000000  00000000  0005bd41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc548  00000000  00000000  000690f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014563a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de0  00000000  00000000  001456b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abe8 	.word	0x0800abe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800abe8 	.word	0x0800abe8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 fd20 	bl	80039e0 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f002 fd10 	bl	80039e0 <HAL_GPIO_WritePin>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fe0:	f7ff ffd2 	bl	8000f88 <GPIO_SetBits>
 8000fe4:	e003      	b.n	8000fee <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	481e      	ldr	r0, [pc, #120]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fea:	f7ff ffdd 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000ffc:	f7ff ffc4 	bl	8000f88 <GPIO_SetBits>
 8001000:	e003      	b.n	800100a <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001002:	2120      	movs	r1, #32
 8001004:	4817      	ldr	r0, [pc, #92]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001006:	f7ff ffcf 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001018:	f7ff ffb6 	bl	8000f88 <GPIO_SetBits>
 800101c:	e003      	b.n	8001026 <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001022:	f7ff ffc1 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da04      	bge.n	8001038 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001032:	f7ff ffa9 	bl	8000f88 <GPIO_SetBits>
 8001036:	e003      	b.n	8001040 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 800103c:	f7ff ffb4 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001040:	2201      	movs	r2, #1
 8001042:	2102      	movs	r1, #2
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001046:	f002 fccb 	bl	80039e0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800104a:	2002      	movs	r0, #2
 800104c:	f001 f922 	bl	8002294 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001056:	f002 fcc3 	bl	80039e0 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	48000400 	.word	0x48000400

08001068 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800107c:	2110      	movs	r1, #16
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 8001080:	f7ff ff82 	bl	8000f88 <GPIO_SetBits>
 8001084:	e003      	b.n	800108e <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001086:	2110      	movs	r1, #16
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800108a:	f7ff ff8d 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001098:	2120      	movs	r1, #32
 800109a:	481a      	ldr	r0, [pc, #104]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800109c:	f7ff ff74 	bl	8000f88 <GPIO_SetBits>
 80010a0:	e003      	b.n	80010aa <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80010a2:	2120      	movs	r1, #32
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010a6:	f7ff ff7f 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010b8:	f7ff ff66 	bl	8000f88 <GPIO_SetBits>
 80010bc:	e003      	b.n	80010c6 <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010c2:	f7ff ff71 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010d4:	f7ff ff58 	bl	8000f88 <GPIO_SetBits>
 80010d8:	e003      	b.n	80010e2 <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010de:	f7ff ff63 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80010e2:	2201      	movs	r2, #1
 80010e4:	2102      	movs	r1, #2
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010e8:	f002 fc7a 	bl	80039e0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80010ec:	2002      	movs	r0, #2
 80010ee:	f001 f8d1 	bl	8002294 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010f8:	f002 fc72 	bl	80039e0 <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000400 	.word	0x48000400

08001108 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff57 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffa3 	bl	8001068 <hd44780_wr_lo_nibble>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <hd44780_wr_cmd+0x24>)
 800113c:	f002 fc50 	bl	80039e0 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffe0 	bl	8001108 <hd44780_write>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400

08001154 <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 800115e:	2201      	movs	r2, #1
 8001160:	2101      	movs	r1, #1
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <hd44780_wr_data+0x24>)
 8001164:	f002 fc3c 	bl	80039e0 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffcc 	bl	8001108 <hd44780_write>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	48000400 	.word	0x48000400

0800117c <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HD44780_Init+0xbc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <HD44780_Init+0xbc>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HD44780_Init+0xbc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800119a:	23f0      	movs	r3, #240	; 0xf0
 800119c:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4823      	ldr	r0, [pc, #140]	; (800123c <HD44780_Init+0xc0>)
 80011b0:	f002 faac 	bl	800370c <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80011b4:	230b      	movs	r3, #11
 80011b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <HD44780_Init+0xc0>)
 80011ca:	f002 fa9f 	bl	800370c <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <HD44780_Init+0xc0>)
 80011d4:	f002 fc04 	bl	80039e0 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80011d8:	2200      	movs	r2, #0
 80011da:	2101      	movs	r1, #1
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HD44780_Init+0xc0>)
 80011de:	f002 fbff 	bl	80039e0 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <HD44780_Init+0xc0>)
 80011e8:	f002 fbfa 	bl	80039e0 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80011ec:	2010      	movs	r0, #16
 80011ee:	f001 f851 	bl	8002294 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011f2:	2030      	movs	r0, #48	; 0x30
 80011f4:	f7ff fee8 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80011f8:	2005      	movs	r0, #5
 80011fa:	f001 f84b 	bl	8002294 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011fe:	2030      	movs	r0, #48	; 0x30
 8001200:	f7ff fee2 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8001204:	2001      	movs	r0, #1
 8001206:	f001 f845 	bl	8002294 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800120a:	2030      	movs	r0, #48	; 0x30
 800120c:	f7ff fedc 	bl	8000fc8 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8001210:	2020      	movs	r0, #32
 8001212:	f7ff fed9 	bl	8000fc8 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f7ff ff88 	bl	800112c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 800121c:	200c      	movs	r0, #12
 800121e:	f7ff ff85 	bl	800112c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff82 	bl	800112c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8001228:	2006      	movs	r0, #6
 800122a:	f7ff ff7f 	bl	800112c <hd44780_wr_cmd>

}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400

08001240 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff81 	bl	8001154 <hd44780_wr_data>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d901      	bls.n	800127a <HD44780_GotoXY+0x1e>
		x = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d901      	bls.n	8001284 <HD44780_GotoXY+0x28>
		y = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d816      	bhi.n	80012b8 <HD44780_GotoXY+0x5c>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HD44780_GotoXY+0x34>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a7 	.word	0x080012a7
 8001298:	080012ad 	.word	0x080012ad
 800129c:	080012b3 	.word	0x080012b3
	case 0:
		copy_y = 0x80;
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	73fb      	strb	r3, [r7, #15]
		break;
 80012a4:	e008      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	73fb      	strb	r3, [r7, #15]
		break;
 80012aa:	e005      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 80012ac:	2394      	movs	r3, #148	; 0x94
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e002      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 80012b2:	23d4      	movs	r3, #212	; 0xd4
 80012b4:	73fb      	strb	r3, [r7, #15]
		break;
 80012b6:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4413      	add	r3, r2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff33 	bl	800112c <hd44780_wr_cmd>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop

080012d0 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffab 	bl	8001240 <HD44780_PutChar>
		i++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ef      	bne.n	80012dc <HD44780_PutStr+0xc>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ff0f 	bl	800112c <hd44780_wr_cmd>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <turnLed>:

 * RETURNS    : Nothing
 */

void turnLed(uint8_t red, uint8_t green, uint8_t blue)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	460b      	mov	r3, r1
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	4613      	mov	r3, r2
 8001324:	717b      	strb	r3, [r7, #5]
	htim1.Instance->CCR1 = red; //intensity of red light
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <turnLed+0x38>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = green;//intensity of green  light
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <turnLed+0x38>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = blue;//intensity of blue light
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <turnLed+0x38>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	797a      	ldrb	r2, [r7, #5]
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000028c 	.word	0x2000028c

08001350 <measureTemp>:
                values to putty screen
 * PARAMETERS : ADC_HandleTypeDef *hadc1 : the address of type definition for ADC
 * RETURNS    : tempDegree : temperature in degree celsius
 */
float measureTemp(ADC_HandleTypeDef *hadc1)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&*hadc1);//enable adc and conversion of regular group
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f001 fb0b 	bl	8002974 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&*hadc1, 1000);// fuction call for poll conversion
 800135e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f001 fb9c 	bl	8002aa0 <HAL_ADC_PollForConversion>
	HAL_ADC_GetValue(&*hadc1);// fuction for getting the adc value from thermistor
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f001 fc21 	bl	8002bb0 <HAL_ADC_GetValue>
	measureVoltage = HAL_ADC_GetValue(&*hadc1);//assigning the obatained value of adc to variable
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f001 fc1e 	bl	8002bb0 <HAL_ADC_GetValue>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <measureTemp+0x140>)
 800137a:	601a      	str	r2, [r3, #0]
	sensorvoltage = (3.3 / 4095) * measureVoltage;//determining the voltage from thermistor
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <measureTemp+0x140>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_i2d>
 8001386:	a340      	add	r3, pc, #256	; (adr r3, 8001488 <measureTemp+0x138>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff f934 	bl	80005f8 <__aeabi_dmul>
 8001390:	4603      	mov	r3, r0
 8001392:	460c      	mov	r4, r1
 8001394:	4618      	mov	r0, r3
 8001396:	4621      	mov	r1, r4
 8001398:	f7ff fc26 	bl	8000be8 <__aeabi_d2f>
 800139c:	4602      	mov	r2, r0
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <measureTemp+0x144>)
 80013a0:	601a      	str	r2, [r3, #0]
	sensorvoltage = sensorvoltage + cal;// calebrated voltage from the sensor
 80013a2:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <measureTemp+0x144>)
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <measureTemp+0x148>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <measureTemp+0x144>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
	tempDegree = (sensorvoltage - 0.5) * 100;//converting the sensor voltage into degree celsius
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <measureTemp+0x144>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8c3 	bl	8000548 <__aeabi_f2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <measureTemp+0x14c>)
 80013c8:	f7fe ff5e 	bl	8000288 <__aeabi_dsub>
 80013cc:	4603      	mov	r3, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	4618      	mov	r0, r3
 80013d2:	4621      	mov	r1, r4
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <measureTemp+0x150>)
 80013da:	f7ff f90d 	bl	80005f8 <__aeabi_dmul>
 80013de:	4603      	mov	r3, r0
 80013e0:	460c      	mov	r4, r1
 80013e2:	4618      	mov	r0, r3
 80013e4:	4621      	mov	r1, r4
 80013e6:	f7ff fbff 	bl	8000be8 <__aeabi_d2f>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <measureTemp+0x154>)
 80013ee:	601a      	str	r2, [r3, #0]
	tempFahrenheit = (tempDegree * 9.0 / 5.0) + 32.0;//converting the degree celsius into degree fahrenheit
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <measureTemp+0x154>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8a7 	bl	8000548 <__aeabi_f2d>
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <measureTemp+0x158>)
 8001400:	f7ff f8fa 	bl	80005f8 <__aeabi_dmul>
 8001404:	4603      	mov	r3, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4618      	mov	r0, r3
 800140a:	4621      	mov	r1, r4
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <measureTemp+0x15c>)
 8001412:	f7ff fa1b 	bl	800084c <__aeabi_ddiv>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	4618      	mov	r0, r3
 800141c:	4621      	mov	r1, r4
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <measureTemp+0x160>)
 8001424:	f7fe ff32 	bl	800028c <__adddf3>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	4618      	mov	r0, r3
 800142e:	4621      	mov	r1, r4
 8001430:	f7ff fbda 	bl	8000be8 <__aeabi_d2f>
 8001434:	4602      	mov	r2, r0
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <measureTemp+0x164>)
 8001438:	601a      	str	r2, [r3, #0]
	printf("\n\rtemperature in Degree Celsius :%f\r\n", tempDegree);//print celsius value to putty
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <measureTemp+0x154>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	461a      	mov	r2, r3
 800144a:	4623      	mov	r3, r4
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <measureTemp+0x168>)
 800144e:	f005 ffcb 	bl	80073e8 <iprintf>
	printf("\ntemperature in Degree Fahrenheit :%f\r\n", tempFahrenheit);//print fahrenheit value to putty
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <measureTemp+0x164>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f876 	bl	8000548 <__aeabi_f2d>
 800145c:	4603      	mov	r3, r0
 800145e:	460c      	mov	r4, r1
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	4815      	ldr	r0, [pc, #84]	; (80014bc <measureTemp+0x16c>)
 8001466:	f005 ffbf 	bl	80073e8 <iprintf>
	HAL_ADC_Stop(&*hadc1);//stop adc convertion of regular group
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f001 fae5 	bl	8002a3a <HAL_ADC_Stop>
	return tempDegree;// returning celsius value.
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <measureTemp+0x154>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	ee07 3a90 	vmov	s15, r3
}
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}
 8001482:	bf00      	nop
 8001484:	f3af 8000 	nop.w
 8001488:	e734d9b4 	.word	0xe734d9b4
 800148c:	3f4a680c 	.word	0x3f4a680c
 8001490:	2000020c 	.word	0x2000020c
 8001494:	20000210 	.word	0x20000210
 8001498:	20000000 	.word	0x20000000
 800149c:	3fe00000 	.word	0x3fe00000
 80014a0:	40590000 	.word	0x40590000
 80014a4:	20000214 	.word	0x20000214
 80014a8:	40220000 	.word	0x40220000
 80014ac:	40140000 	.word	0x40140000
 80014b0:	40400000 	.word	0x40400000
 80014b4:	20000218 	.word	0x20000218
 80014b8:	0800ac00 	.word	0x0800ac00
 80014bc:	0800ac28 	.word	0x0800ac28

080014c0 <ledSignal>:
 * DESCRIPTION: Light the led into different colors depending up on the temperature
 * PARAMETERS : tempDegree : the temperature in degree celsius
 * RETURNS    : nothing
 */
void ledSignal(float tempDegree)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (-40 <= tempDegree && tempDegree <= 20.5)
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015b8 <ledSignal+0xf8>
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	db0e      	blt.n	80014fa <ledSignal+0x3a>
 80014dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80015bc <ledSignal+0xfc>
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d805      	bhi.n	80014fa <ledSignal+0x3a>
	{
		turnLed(0, 0, 255); //blue
 80014ee:	22ff      	movs	r2, #255	; 0xff
 80014f0:	2100      	movs	r1, #0
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff ff0e 	bl	8001314 <turnLed>
 80014f8:	e053      	b.n	80015a2 <ledSignal+0xe2>
	}
	else if (20.5 < tempDegree && tempDegree <= 37.3)
 80014fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fe:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80015bc <ledSignal+0xfc>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd10      	ble.n	800152e <ledSignal+0x6e>
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	a327      	add	r3, pc, #156	; (adr r3, 80015b0 <ledSignal+0xf0>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff faea 	bl	8000af0 <__aeabi_dcmple>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <ledSignal+0x6e>
	{
		turnLed(0, 255, 0); //green
 8001522:	2200      	movs	r2, #0
 8001524:	21ff      	movs	r1, #255	; 0xff
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fef4 	bl	8001314 <turnLed>
 800152c:	e039      	b.n	80015a2 <ledSignal+0xe2>
	}
	else if (37.3 < tempDegree && tempDegree <= 39.5)
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff f80a 	bl	8000548 <__aeabi_f2d>
 8001534:	a31e      	add	r3, pc, #120	; (adr r3, 80015b0 <ledSignal+0xf0>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff faed 	bl	8000b18 <__aeabi_dcmpgt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <ledSignal+0xa2>
 8001544:	edd7 7a01 	vldr	s15, [r7, #4]
 8001548:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80015c0 <ledSignal+0x100>
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	d805      	bhi.n	8001562 <ledSignal+0xa2>
	{
		turnLed(255, 165, 0); //orange
 8001556:	2200      	movs	r2, #0
 8001558:	21a5      	movs	r1, #165	; 0xa5
 800155a:	20ff      	movs	r0, #255	; 0xff
 800155c:	f7ff feda 	bl	8001314 <turnLed>
 8001560:	e01f      	b.n	80015a2 <ledSignal+0xe2>
	}
	else if (39.5 < tempDegree && tempDegree <= 150.0)
 8001562:	edd7 7a01 	vldr	s15, [r7, #4]
 8001566:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80015c0 <ledSignal+0x100>
 800156a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	dd0e      	ble.n	8001592 <ledSignal+0xd2>
 8001574:	edd7 7a01 	vldr	s15, [r7, #4]
 8001578:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015c4 <ledSignal+0x104>
 800157c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	d805      	bhi.n	8001592 <ledSignal+0xd2>
	{
		turnLed(255, 0, 0); //red
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	20ff      	movs	r0, #255	; 0xff
 800158c:	f7ff fec2 	bl	8001314 <turnLed>
 8001590:	e007      	b.n	80015a2 <ledSignal+0xe2>
	}
	else// when the temperature not in the desired range
	{
		printf("CRITICAL (system fail):temperature is not in the limits\r\n");
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <ledSignal+0x108>)
 8001594:	f005 ff9c 	bl	80074d0 <puts>
        turnLed(255, 255, 255);//white color showed to indicate the system is failed
 8001598:	22ff      	movs	r2, #255	; 0xff
 800159a:	21ff      	movs	r1, #255	; 0xff
 800159c:	20ff      	movs	r0, #255	; 0xff
 800159e:	f7ff feb9 	bl	8001314 <turnLed>
	}
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	66666666 	.word	0x66666666
 80015b4:	4042a666 	.word	0x4042a666
 80015b8:	c2200000 	.word	0xc2200000
 80015bc:	41a40000 	.word	0x41a40000
 80015c0:	421e0000 	.word	0x421e0000
 80015c4:	43160000 	.word	0x43160000
 80015c8:	0800ac50 	.word	0x0800ac50
 80015cc:	00000000 	.word	0x00000000

080015d0 <messageLed>:
 * DESCRIPTION: shows appropriate verdicts depends on the temperature value
 * PARAMETERS : tempDegree : the temperature in degree celsius
 * RETURNS    : nothing
 */
void messageLed(float tempDegree)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
	HD44780_GotoXY(0, 1);// setting the cursor to the second row of the lcd
 80015da:	2101      	movs	r1, #1
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fe3d 	bl	800125c <HD44780_GotoXY>
	if (-40 <= tempDegree && tempDegree <= 20.5)
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80016d8 <messageLed+0x108>
 80015ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	db10      	blt.n	8001616 <messageLed+0x46>
 80015f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80016dc <messageLed+0x10c>
 80015fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	d807      	bhi.n	8001616 <messageLed+0x46>
	{
		HD44780_PutStr("Low temp");
 8001606:	4836      	ldr	r0, [pc, #216]	; (80016e0 <messageLed+0x110>)
 8001608:	f7ff fe62 	bl	80012d0 <HD44780_PutStr>
		HAL_Delay(2000);
 800160c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001610:	f000 fe40 	bl	8002294 <HAL_Delay>
	{
 8001614:	e058      	b.n	80016c8 <messageLed+0xf8>
	}
	else if (20.5 < tempDegree && tempDegree <= 37.3)
 8001616:	edd7 7a01 	vldr	s15, [r7, #4]
 800161a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80016dc <messageLed+0x10c>
 800161e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	dd12      	ble.n	800164e <messageLed+0x7e>
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_f2d>
 800162e:	a328      	add	r3, pc, #160	; (adr r3, 80016d0 <messageLed+0x100>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff fa5c 	bl	8000af0 <__aeabi_dcmple>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <messageLed+0x7e>
	{
		HD44780_PutStr("Medium temp");
 800163e:	4829      	ldr	r0, [pc, #164]	; (80016e4 <messageLed+0x114>)
 8001640:	f7ff fe46 	bl	80012d0 <HD44780_PutStr>
		HAL_Delay(2000);
 8001644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001648:	f000 fe24 	bl	8002294 <HAL_Delay>
	{
 800164c:	e03c      	b.n	80016c8 <messageLed+0xf8>
	} else if
	(37.3 < tempDegree && tempDegree <= 39.5)
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe ff7a 	bl	8000548 <__aeabi_f2d>
 8001654:	a31e      	add	r3, pc, #120	; (adr r3, 80016d0 <messageLed+0x100>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7ff fa5d 	bl	8000b18 <__aeabi_dcmpgt>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d010      	beq.n	8001686 <messageLed+0xb6>
 8001664:	edd7 7a01 	vldr	s15, [r7, #4]
 8001668:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80016e8 <messageLed+0x118>
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	d807      	bhi.n	8001686 <messageLed+0xb6>
	{
		HD44780_PutStr("Precaution");
 8001676:	481d      	ldr	r0, [pc, #116]	; (80016ec <messageLed+0x11c>)
 8001678:	f7ff fe2a 	bl	80012d0 <HD44780_PutStr>
		HAL_Delay(2000);
 800167c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001680:	f000 fe08 	bl	8002294 <HAL_Delay>
	{
 8001684:	e020      	b.n	80016c8 <messageLed+0xf8>
	}
	else if (39.5 < tempDegree && tempDegree <= 150.0) {
 8001686:	edd7 7a01 	vldr	s15, [r7, #4]
 800168a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80016e8 <messageLed+0x118>
 800168e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	dd10      	ble.n	80016ba <messageLed+0xea>
 8001698:	edd7 7a01 	vldr	s15, [r7, #4]
 800169c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016f0 <messageLed+0x120>
 80016a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d807      	bhi.n	80016ba <messageLed+0xea>
		HD44780_PutStr("High temp");
 80016aa:	4812      	ldr	r0, [pc, #72]	; (80016f4 <messageLed+0x124>)
 80016ac:	f7ff fe10 	bl	80012d0 <HD44780_PutStr>
		HAL_Delay(2000);
 80016b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016b4:	f000 fdee 	bl	8002294 <HAL_Delay>
	else if (39.5 < tempDegree && tempDegree <= 150.0) {
 80016b8:	e006      	b.n	80016c8 <messageLed+0xf8>
	}
	else // when the temperature not in the desired range
	{
		HD44780_PutStr("Warning");
 80016ba:	480f      	ldr	r0, [pc, #60]	; (80016f8 <messageLed+0x128>)
 80016bc:	f7ff fe08 	bl	80012d0 <HD44780_PutStr>
		HAL_Delay(2000);
 80016c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016c4:	f000 fde6 	bl	8002294 <HAL_Delay>
	}
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	66666666 	.word	0x66666666
 80016d4:	4042a666 	.word	0x4042a666
 80016d8:	c2200000 	.word	0xc2200000
 80016dc:	41a40000 	.word	0x41a40000
 80016e0:	0800ac8c 	.word	0x0800ac8c
 80016e4:	0800ac98 	.word	0x0800ac98
 80016e8:	421e0000 	.word	0x421e0000
 80016ec:	0800aca4 	.word	0x0800aca4
 80016f0:	43160000 	.word	0x43160000
 80016f4:	0800acb0 	.word	0x0800acb0
 80016f8:	0800acbc 	.word	0x0800acbc

080016fc <lcdDisplay>:
 *              tempFahernheit: temperature in degree Fahernheit
 *
 * RETURNS    : nothing
 */
void lcdDisplay(char stringBuffer[16], float tempDegree, float tempFahrenheit)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	ed87 0a02 	vstr	s0, [r7, #8]
 8001708:	edc7 0a01 	vstr	s1, [r7, #4]

	HD44780_Init();// initializing lcd
 800170c:	f7ff fd36 	bl	800117c <HD44780_Init>
	sprintf(stringBuffer, "Deg =%f", tempDegree);//printing celsius value
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	461a      	mov	r2, r3
 800171c:	4623      	mov	r3, r4
 800171e:	4917      	ldr	r1, [pc, #92]	; (800177c <lcdDisplay+0x80>)
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f005 fee3 	bl	80074ec <siprintf>
	HD44780_PutStr(stringBuffer);// string buffer value
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fdd2 	bl	80012d0 <HD44780_PutStr>
	messageLed(tempDegree);//fuction call to print the verdict
 800172c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001730:	f7ff ff4e 	bl	80015d0 <messageLed>
	HAL_Delay(2000);
 8001734:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001738:	f000 fdac 	bl	8002294 <HAL_Delay>
	HD44780_ClrScr();//clear lcd
 800173c:	f7ff fde2 	bl	8001304 <HD44780_ClrScr>
	HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f000 fda7 	bl	8002294 <HAL_Delay>
	sprintf(stringBuffer, "Far =%f", tempFahrenheit);//printing fahrenheit value
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7fe fefe 	bl	8000548 <__aeabi_f2d>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	461a      	mov	r2, r3
 8001752:	4623      	mov	r3, r4
 8001754:	490a      	ldr	r1, [pc, #40]	; (8001780 <lcdDisplay+0x84>)
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f005 fec8 	bl	80074ec <siprintf>
	HD44780_PutStr(stringBuffer);// string buffer value
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fdb7 	bl	80012d0 <HD44780_PutStr>
	messageLed(tempDegree);//funtion call to print the verdict
 8001762:	ed97 0a02 	vldr	s0, [r7, #8]
 8001766:	f7ff ff33 	bl	80015d0 <messageLed>
	HAL_Delay(2000);
 800176a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800176e:	f000 fd91 	bl	8002294 <HAL_Delay>
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	bf00      	nop
 800177c:	0800acc4 	.word	0x0800acc4
 8001780:	0800accc 	.word	0x0800accc

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001788:	f000 fd13 	bl	80021b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178c:	f000 f838 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001790:	f000 fa70 	bl	8001c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001794:	f000 fa3e 	bl	8001c14 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001798:	f000 f8c6 	bl	8001928 <MX_ADC1_Init>
  MX_TIM1_Init();
 800179c:	f000 f92a 	bl	80019f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017a0:	f000 f9ec 	bl	8001b7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //initializing timer 1 for 3 channels which is generated internally for PWM
  HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);//
 80017a4:	2100      	movs	r1, #0
 80017a6:	4811      	ldr	r0, [pc, #68]	; (80017ec <main+0x68>)
 80017a8:	f003 fb1c 	bl	8004de4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 80017ac:	2104      	movs	r1, #4
 80017ae:	480f      	ldr	r0, [pc, #60]	; (80017ec <main+0x68>)
 80017b0:	f003 fb18 	bl	8004de4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80017b4:	2108      	movs	r1, #8
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <main+0x68>)
 80017b8:	f003 fb14 	bl	8004de4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		measureTemp(&hadc1);// function call for measure the temperature
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <main+0x6c>)
 80017be:	f7ff fdc7 	bl	8001350 <measureTemp>
		ledSignal(tempDegree);// function call for light the led
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <main+0x70>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	f7ff fe78 	bl	80014c0 <ledSignal>
        lcdDisplay(stringBuffer, tempDegree, tempFahrenheit);//function call to display the temp values to the lcd
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <main+0x70>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <main+0x74>)
 80017d8:	ed93 7a00 	vldr	s14, [r3]
 80017dc:	eef0 0a47 	vmov.f32	s1, s14
 80017e0:	eeb0 0a67 	vmov.f32	s0, s15
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <main+0x78>)
 80017e6:	f7ff ff89 	bl	80016fc <lcdDisplay>
		measureTemp(&hadc1);// function call for measure the temperature
 80017ea:	e7e7      	b.n	80017bc <main+0x38>
 80017ec:	2000028c 	.word	0x2000028c
 80017f0:	20000228 	.word	0x20000228
 80017f4:	20000214 	.word	0x20000214
 80017f8:	20000218 	.word	0x20000218
 80017fc:	200001fc 	.word	0x200001fc

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0ac      	sub	sp, #176	; 0xb0
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800180a:	2244      	movs	r2, #68	; 0x44
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f004 ffa4 	bl	800675c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2254      	movs	r2, #84	; 0x54
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f004 ff96 	bl	800675c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001830:	f002 f8ee 	bl	8003a10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <SystemClock_Config+0x124>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	4a3a      	ldr	r2, [pc, #232]	; (8001924 <SystemClock_Config+0x124>)
 800183c:	f023 0318 	bic.w	r3, r3, #24
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001844:	2314      	movs	r3, #20
 8001846:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800184c:	2301      	movs	r3, #1
 800184e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001858:	2360      	movs	r3, #96	; 0x60
 800185a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001864:	2301      	movs	r3, #1
 8001866:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800186a:	2301      	movs	r3, #1
 800186c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001870:	2310      	movs	r3, #16
 8001872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001876:	2307      	movs	r3, #7
 8001878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800188c:	4618      	mov	r0, r3
 800188e:	f002 f933 	bl	8003af8 <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001898:	f000 fa36 	bl	8001d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2303      	movs	r3, #3
 80018a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fd3e 	bl	8004338 <HAL_RCC_ClockConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018c2:	f000 fa21 	bl	8001d08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80018c6:	f244 0302 	movw	r3, #16386	; 0x4002
 80018ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80018d6:	2301      	movs	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80018de:	2308      	movs	r3, #8
 80018e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018e2:	2307      	movs	r3, #7
 80018e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 ff22 	bl	8004740 <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001902:	f000 fa01 	bl	8001d08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001906:	f44f 7000 	mov.w	r0, #512	; 0x200
 800190a:	f002 f89f 	bl	8003a4c <HAL_PWREx_ControlVoltageScaling>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001914:	f000 f9f8 	bl	8001d08 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001918:	f003 f904 	bl	8004b24 <HAL_RCCEx_EnableMSIPLLMode>
}
 800191c:	bf00      	nop
 800191e:	37b0      	adds	r7, #176	; 0xb0
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001940:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <MX_ADC1_Init+0xc4>)
 8001942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <MX_ADC1_Init+0xc0>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_ADC1_Init+0xc0>)
 800195e:	2204      	movs	r2, #4
 8001960:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001964:	2200      	movs	r2, #0
 8001966:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_ADC1_Init+0xc0>)
 800196a:	2200      	movs	r2, #0
 800196c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001970:	2201      	movs	r2, #1
 8001972:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_ADC1_Init+0xc0>)
 800197e:	2201      	movs	r2, #1
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001984:	2200      	movs	r2, #0
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_ADC1_Init+0xc0>)
 800198a:	2200      	movs	r2, #0
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_ADC1_Init+0xc0>)
 8001998:	2200      	movs	r2, #0
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_ADC1_Init+0xc0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <MX_ADC1_Init+0xc0>)
 80019a6:	f000 fe9f 	bl	80026e8 <HAL_ADC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80019b0:	f000 f9aa 	bl	8001d08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_ADC1_Init+0xc8>)
 80019b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b8:	2306      	movs	r3, #6
 80019ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c0:	237f      	movs	r3, #127	; 0x7f
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c4:	2304      	movs	r3, #4
 80019c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_ADC1_Init+0xc0>)
 80019d2:	f001 f8fb 	bl	8002bcc <HAL_ADC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80019dc:	f000 f994 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000228 	.word	0x20000228
 80019ec:	50040000 	.word	0x50040000
 80019f0:	19200040 	.word	0x19200040

080019f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b09a      	sub	sp, #104	; 0x68
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	222c      	movs	r2, #44	; 0x2c
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 fe94 	bl	800675c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a36:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <MX_TIM1_Init+0x184>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 492-1;
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a3c:	f240 12eb 	movw	r2, #491	; 0x1eb
 8001a40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a4a:	22fe      	movs	r2, #254	; 0xfe
 8001a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a60:	4844      	ldr	r0, [pc, #272]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a62:	f003 f95f 	bl	8004d24 <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a6c:	f000 f94c 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a74:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	483d      	ldr	r0, [pc, #244]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a7e:	f003 fb13 	bl	80050a8 <HAL_TIM_ConfigClockSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a88:	f000 f93e 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a8c:	4839      	ldr	r0, [pc, #228]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001a8e:	f003 f974 	bl	8004d7a <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a98:	f000 f936 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4831      	ldr	r0, [pc, #196]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001ab0:	f003 ff56 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001aba:	f000 f925 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	; 0x60
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4824      	ldr	r0, [pc, #144]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001ae4:	f003 f9c8 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001aee:	f000 f90b 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af6:	2204      	movs	r2, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	481e      	ldr	r0, [pc, #120]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001afc:	f003 f9bc 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001b06:	f000 f8ff 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0e:	2208      	movs	r2, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	4818      	ldr	r0, [pc, #96]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001b14:	f003 f9b0 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001b1e:	f000 f8f3 	bl	8001d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001b58:	f003 ff68 	bl	8005a2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001b62:	f000 f8d1 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM1_Init+0x180>)
 8001b68:	f000 f96a 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001b6c:	bf00      	nop
 8001b6e:	3768      	adds	r7, #104	; 0x68
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000028c 	.word	0x2000028c
 8001b78:	40012c00 	.word	0x40012c00

08001b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bc0:	4813      	ldr	r0, [pc, #76]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001bc2:	f003 f8af 	bl	8004d24 <HAL_TIM_Base_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bcc:	f000 f89c 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001bde:	f003 fa63 	bl	80050a8 <HAL_TIM_ConfigClockSource>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001be8:	f000 f88e 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_TIM2_Init+0x94>)
 8001bfa:	f003 feb1 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c04:	f000 f880 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200002cc 	.word	0x200002cc

08001c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_USART2_UART_Init+0x5c>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c58:	f003 ff60 	bl	8005b1c <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c62:	f000 f851 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000030c 	.word	0x2000030c
 8001c70:	40004400 	.word	0x40004400

08001c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_GPIO_Init+0x8c>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	21fb      	movs	r1, #251	; 0xfb
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <MX_GPIO_Init+0x90>)
 8001cd8:	f001 fe82 	bl	80039e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001cdc:	23fb      	movs	r3, #251	; 0xfb
 8001cde:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_GPIO_Init+0x90>)
 8001cf4:	f001 fd0a 	bl	800370c <HAL_GPIO_Init>

}
 8001cf8:	bf00      	nop
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	48000400 	.word	0x48000400

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_MspInit+0x44>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_MspInit+0x44>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_MspInit+0x44>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_MspInit+0x44>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_MspInit+0x44>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_MspInit+0x44>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_ADC_MspInit+0x74>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d124      	bne.n	8001dcc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_ADC_MspInit+0x78>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_ADC_MspInit+0x78>)
 8001d88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_ADC_MspInit+0x78>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_ADC_MspInit+0x78>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_ADC_MspInit+0x78>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_ADC_MspInit+0x78>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001db2:	2302      	movs	r3, #2
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001db6:	230b      	movs	r3, #11
 8001db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc8:	f001 fca0 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	50040000 	.word	0x50040000
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_TIM_Base_MspInit+0x5c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d10c      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_TIM_Base_MspInit+0x60>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_TIM_Base_MspInit+0x60>)
 8001df4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001df8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_TIM_Base_MspInit+0x60>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e06:	e010      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e10:	d10b      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_TIM_Base_MspInit+0x60>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_TIM_Base_MspInit+0x60>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_TIM_Base_MspInit+0x60>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_TIM_MspPostInit+0x68>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d11d      	bne.n	8001e9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_TIM_MspPostInit+0x6c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_TIM_MspPostInit+0x6c>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e7a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f001 fc37 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <HAL_UART_MspInit+0xa0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d13a      	bne.n	8001f48 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_UART_MspInit+0xa4>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f02:	2304      	movs	r3, #4
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f12:	2307      	movs	r3, #7
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f001 fbf4 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001f36:	2303      	movs	r3, #3
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f001 fbe2 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	; 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40004400 	.word	0x40004400
 8001f54:	40021000 	.word	0x40021000

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 f954 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	4807      	ldr	r0, [pc, #28]	; (8001fec <_read+0x38>)
 8001fd0:	f003 fe85 	bl	8005cde <HAL_UART_Receive>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	607b      	str	r3, [r7, #4]

	return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000030c 	.word	0x2000030c

08001ff0 <_write>:

int _write(int file, char *ptr, int len)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <_write+0x40>)
 800200c:	f003 fdd4 	bl	8005bb8 <HAL_UART_Transmit>
 8002010:	4603      	mov	r3, r0
 8002012:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d002      	beq.n	8002020 <_write+0x30>
 800201a:	7dfb      	ldrb	r3, [r7, #23]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d101      	bne.n	8002024 <_write+0x34>
	{
		Error_Handler();
 8002020:	f7ff fe72 	bl	8001d08 <Error_Handler>
	}

	return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000030c 	.word	0x2000030c

08002034 <_close>:



int _close(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205c:	605a      	str	r2, [r3, #4]
	return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_isatty>:

int _isatty(int file)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <_sbrk+0x50>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x16>
		heap_end = &end;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <_sbrk+0x50>)
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <_sbrk+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <_sbrk+0x50>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <_sbrk+0x50>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	466a      	mov	r2, sp
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d907      	bls.n	80020d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020c6:	f004 fb1f 	bl	8006708 <__errno>
 80020ca:	4602      	mov	r2, r0
 80020cc:	230c      	movs	r3, #12
 80020ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e006      	b.n	80020e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <_sbrk+0x50>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a03      	ldr	r2, [pc, #12]	; (80020ec <_sbrk+0x50>)
 80020e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000021c 	.word	0x2000021c
 80020f0:	20000398 	.word	0x20000398

080020f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <SystemInit+0x64>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	4a16      	ldr	r2, [pc, #88]	; (8002158 <SystemInit+0x64>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <SystemInit+0x68>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <SystemInit+0x68>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <SystemInit+0x68>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <SystemInit+0x68>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <SystemInit+0x68>)
 8002120:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002124:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002128:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <SystemInit+0x68>)
 800212c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002130:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <SystemInit+0x68>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <SystemInit+0x68>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <SystemInit+0x68>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SystemInit+0x64>)
 8002146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800214a:	609a      	str	r2, [r3, #8]
#endif
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00
 800215c:	40021000 	.word	0x40021000

08002160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002198 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002164:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002166:	e003      	b.n	8002170 <LoopCopyDataInit>

08002168 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800216a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800216c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800216e:	3104      	adds	r1, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002170:	480b      	ldr	r0, [pc, #44]	; (80021a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002174:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002176:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002178:	d3f6      	bcc.n	8002168 <CopyDataInit>
	ldr	r2, =_sbss
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800217c:	e002      	b.n	8002184 <LoopFillZerobss>

0800217e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800217e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002180:	f842 3b04 	str.w	r3, [r2], #4

08002184 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <LoopForever+0x16>)
	cmp	r2, r3
 8002186:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002188:	d3f9      	bcc.n	800217e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800218a:	f7ff ffb3 	bl	80020f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218e:	f004 fac1 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002192:	f7ff faf7 	bl	8001784 <main>

08002196 <LoopForever>:

LoopForever:
    b LoopForever
 8002196:	e7fe      	b.n	8002196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002198:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800219c:	0800b050 	.word	0x0800b050
	ldr	r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021a4:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80021a8:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80021ac:	20000394 	.word	0x20000394

080021b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_IRQHandler>

080021b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021bc:	2003      	movs	r0, #3
 80021be:	f001 fa71 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 f80e 	bl	80021e4 <HAL_InitTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	e001      	b.n	80021d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d4:	f7ff fda0 	bl	8001d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d8:	79fb      	ldrb	r3, [r7, #7]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_InitTick+0x68>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_InitTick+0x6c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_InitTick+0x68>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002204:	fbb1 f3f3 	udiv	r3, r1, r3
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f001 fa70 	bl	80036f2 <HAL_SYSTICK_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10f      	bne.n	8002238 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	d809      	bhi.n	8002232 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221e:	2200      	movs	r2, #0
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	f04f 30ff 	mov.w	r0, #4294967295
 8002226:	f001 fa48 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_InitTick+0x70>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e007      	b.n	8002242 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e004      	b.n	8002242 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e001      	b.n	8002242 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000000c 	.word	0x2000000c
 8002250:	20000004 	.word	0x20000004
 8002254:	20000008 	.word	0x20000008

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x1c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_IncTick+0x20>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4413      	add	r3, r2
 8002266:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_IncTick+0x1c>)
 8002268:	6013      	str	r3, [r2, #0]
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	2000038c 	.word	0x2000038c
 8002278:	2000000c 	.word	0x2000000c

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	2000038c 	.word	0x2000038c

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff ffee 	bl	800227c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d004      	beq.n	80022b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_Delay+0x40>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b8:	bf00      	nop
 80022ba:	f7ff ffdf 	bl	800227c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d8f7      	bhi.n	80022ba <HAL_Delay+0x26>
  {
  }
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000000c 	.word	0x2000000c

080022d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	609a      	str	r2, [r3, #8]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002340:	b490      	push	{r4, r7}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3360      	adds	r3, #96	; 0x60
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <LL_ADC_SetOffset+0x40>)
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	4313      	orrs	r3, r2
 800236e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002372:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bc90      	pop	{r4, r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	03fff000 	.word	0x03fff000

08002384 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002384:	b490      	push	{r4, r7}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3360      	adds	r3, #96	; 0x60
 8002392:	461a      	mov	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc90      	pop	{r4, r7}
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023ac:	b490      	push	{r4, r7}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3360      	adds	r3, #96	; 0x60
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc90      	pop	{r4, r7}
 80023da:	4770      	bx	lr

080023dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002402:	b490      	push	{r4, r7}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3330      	adds	r3, #48	; 0x30
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	4413      	add	r3, r2
 8002420:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	211f      	movs	r1, #31
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	f003 011f 	and.w	r1, r3, #31
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	4313      	orrs	r3, r2
 8002448:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bc90      	pop	{r4, r7}
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002454:	b490      	push	{r4, r7}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3314      	adds	r3, #20
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	0e5b      	lsrs	r3, r3, #25
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002474:	6822      	ldr	r2, [r4, #0]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0d1b      	lsrs	r3, r3, #20
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2107      	movs	r1, #7
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0d1b      	lsrs	r3, r3, #20
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	4313      	orrs	r3, r2
 8002498:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc90      	pop	{r4, r7}
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	43db      	mvns	r3, r3
 80024be:	401a      	ands	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0318 	and.w	r3, r3, #24
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024c8:	40d9      	lsrs	r1, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	400b      	ands	r3, r1
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	0007ffff 	.word	0x0007ffff

080024ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6093      	str	r3, [r2, #8]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002524:	d101      	bne.n	800252a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800254c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002574:	d101      	bne.n	800257a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c4:	f043 0202 	orr.w	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <LL_ADC_IsEnabled+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <LL_ADC_IsEnabled+0x1a>
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsDisableOngoing+0x18>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsDisableOngoing+0x1a>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800265c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002660:	f043 0210 	orr.w	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d101      	bne.n	800268c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d101      	bne.n	80026da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e12a      	b.n	8002958 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fb25 	bl	8001d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fef1 	bl	8002510 <LL_ADC_IsDeepPowerDownEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fed7 	bl	80024ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff0c 	bl	8002560 <LL_ADC_IsInternalRegulatorEnabled>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d113      	bne.n	8002776 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fef0 	bl	8002538 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002758:	4b81      	ldr	r3, [pc, #516]	; (8002960 <HAL_ADC_Init+0x278>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	4a81      	ldr	r2, [pc, #516]	; (8002964 <HAL_ADC_Init+0x27c>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002768:	e002      	b.n	8002770 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	3b01      	subs	r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f9      	bne.n	800276a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fef0 	bl	8002560 <LL_ADC_IsInternalRegulatorEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff64 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 80027ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 80c5 	bne.w	8002946 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80c1 	bne.w	8002946 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027cc:	f043 0202 	orr.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fefd 	bl	80025d8 <LL_ADC_IsEnabled>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027e4:	4860      	ldr	r0, [pc, #384]	; (8002968 <HAL_ADC_Init+0x280>)
 80027e6:	f7ff fef7 	bl	80025d8 <LL_ADC_IsEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4619      	mov	r1, r3
 80027f6:	485d      	ldr	r0, [pc, #372]	; (800296c <HAL_ADC_Init+0x284>)
 80027f8:	f7ff fd6e 	bl	80022d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e5b      	ldrb	r3, [r3, #25]
 8002800:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002806:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800280c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002812:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d106      	bne.n	8002838 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	3b01      	subs	r3, #1
 8002830:	045b      	lsls	r3, r3, #17
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	4b45      	ldr	r3, [pc, #276]	; (8002970 <HAL_ADC_Init+0x288>)
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	430b      	orrs	r3, r1
 8002866:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff01 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8002872:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff22 	bl	80026c2 <LL_ADC_INJ_IsConversionOngoing>
 800287e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d13d      	bne.n	8002902 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13a      	bne.n	8002902 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002890:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002898:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a8:	f023 0302 	bic.w	r3, r3, #2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	69b9      	ldr	r1, [r7, #24]
 80028b2:	430b      	orrs	r3, r1
 80028b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d118      	bne.n	80028f2 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028d6:	4311      	orrs	r1, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028dc:	4311      	orrs	r1, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028e2:	430a      	orrs	r2, r1
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	611a      	str	r2, [r3, #16]
 80028f0:	e007      	b.n	8002902 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d10c      	bne.n	8002924 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f023 010f 	bic.w	r1, r3, #15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
 8002922:	e007      	b.n	8002934 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 020f 	bic.w	r2, r2, #15
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f023 0303 	bic.w	r3, r3, #3
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
 8002944:	e007      	b.n	8002956 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f043 0210 	orr.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002956:	7ffb      	ldrb	r3, [r7, #31]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000004 	.word	0x20000004
 8002964:	053e2d63 	.word	0x053e2d63
 8002968:	50040000 	.word	0x50040000
 800296c:	50040300 	.word	0x50040300
 8002970:	fff0c007 	.word	0xfff0c007

08002974 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fe77 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d14f      	bne.n	8002a2c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_ADC_Start+0x26>
 8002996:	2302      	movs	r3, #2
 8002998:	e04b      	b.n	8002a32 <HAL_ADC_Start+0xbe>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fd1a 	bl	80033dc <ADC_Enable>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d137      	bne.n	8002a22 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	d106      	bne.n	80029e2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f023 0206 	bic.w	r2, r3, #6
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	659a      	str	r2, [r3, #88]	; 0x58
 80029e0:	e002      	b.n	80029e8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	221c      	movs	r2, #28
 80029ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fe02 	bl	8002624 <LL_ADC_REG_StartConversion>
 8002a20:	e006      	b.n	8002a30 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a2a:	e001      	b.n	8002a30 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_Stop+0x16>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e023      	b.n	8002a98 <HAL_ADC_Stop+0x5e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a58:	2103      	movs	r1, #3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fc0a 	bl	8003274 <ADC_ConversionStop>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d111      	bne.n	8002a8e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fd10 	bl	8003490 <ADC_Disable>
 8002a70:	4603      	mov	r3, r0
 8002a72:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d102      	bne.n	8002ab8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e010      	b.n	8002ada <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e068      	b.n	8002ba8 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ada:	f7ff fbcf 	bl	800227c <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ae0:	e01a      	b.n	8002b18 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d016      	beq.n	8002b18 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002aea:	f7ff fbc7 	bl	800227c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <HAL_ADC_PollForConversion+0x60>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0204 	orr.w	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e047      	b.n	8002ba8 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0dd      	beq.n	8002ae2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fc50 	bl	80023dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01c      	beq.n	8002b7c <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7e5b      	ldrb	r3, [r3, #25]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d111      	bne.n	8002b7c <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d104      	bne.n	8002b94 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2208      	movs	r2, #8
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e008      	b.n	8002ba6 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d103      	bne.n	8002ba6 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b0a6      	sub	sp, #152	; 0x98
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x22>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e338      	b.n	8003260 <HAL_ADC_ConfigChannel+0x694>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fd3a 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 831d 	bne.w	8003242 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	d824      	bhi.n	8002c5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	3b02      	subs	r3, #2
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d81b      	bhi.n	8002c52 <HAL_ADC_ConfigChannel+0x86>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_ADC_ConfigChannel+0x54>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c39 	.word	0x08002c39
 8002c28:	08002c41 	.word	0x08002c41
 8002c2c:	08002c49 	.word	0x08002c49
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	220c      	movs	r2, #12
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e011      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2212      	movs	r2, #18
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e00d      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2218      	movs	r2, #24
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	e009      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	e004      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2206      	movs	r2, #6
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e000      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c5a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f7ff fbca 	bl	8002402 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fcfe 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8002c78:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fd1e 	bl	80026c2 <LL_ADC_INJ_IsConversionOngoing>
 8002c86:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 8148 	bne.w	8002f24 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f040 8143 	bne.w	8002f24 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f7ff fbd2 	bl	8002454 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	08db      	lsrs	r3, r3, #3
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6919      	ldr	r1, [r3, #16]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ce2:	f7ff fb2d 	bl	8002340 <LL_ADC_SetOffset>
 8002ce6:	e11d      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fb48 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x148>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fb3d 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	f003 021f 	and.w	r2, r3, #31
 8002d12:	e012      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x16e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fb32 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d105      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x186>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	e00a      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x19c>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d106      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fb19 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff faff 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x1da>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2101      	movs	r1, #1
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff faf4 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	0e9b      	lsrs	r3, r3, #26
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	e010      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x1fc>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fae9 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x214>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	e00a      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x22a>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d106      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fad2 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fab8 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10a      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x268>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff faad 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	e010      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x28a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff faa2 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x2a2>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	e00a      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x2b8>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d106      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fa8b 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2103      	movs	r1, #3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fa71 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x2f6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2103      	movs	r1, #3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fa66 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	0e9b      	lsrs	r3, r3, #26
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	e010      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x318>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fa5b 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x330>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	e00a      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x346>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d106      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2103      	movs	r1, #3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fa44 	bl	80023ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fb55 	bl	80025d8 <LL_ADC_IsEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 810c 	bne.w	800314e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f7ff faae 	bl	80024a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4aa8      	ldr	r2, [pc, #672]	; (80031f0 <HAL_ADC_ConfigChannel+0x624>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	f040 80fd 	bne.w	800314e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x3b0>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e012      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x3d6>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	bf94      	ite	ls
 8002f9c:	2301      	movls	r3, #1
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d064      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x3f6>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	3301      	adds	r3, #1
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc0:	e00e      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x414>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	069b      	lsls	r3, r3, #26
 8002fdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x434>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	e010      	b.n	8003022 <HAL_ADC_ConfigChannel+0x456>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	ea42 0103 	orr.w	r1, r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x47c>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	3301      	adds	r3, #1
 800303a:	f003 021f 	and.w	r2, r3, #31
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	051b      	lsls	r3, r3, #20
 8003046:	e011      	b.n	800306c <HAL_ADC_ConfigChannel+0x4a0>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800306c:	430b      	orrs	r3, r1
 800306e:	e069      	b.n	8003144 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d107      	bne.n	800308c <HAL_ADC_ConfigChannel+0x4c0>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	069b      	lsls	r3, r3, #26
 8003086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308a:	e00e      	b.n	80030aa <HAL_ADC_ConfigChannel+0x4de>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	61fb      	str	r3, [r7, #28]
  return result;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	069b      	lsls	r3, r3, #26
 80030a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x4fe>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0e9b      	lsrs	r3, r3, #26
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	e010      	b.n	80030ec <HAL_ADC_ConfigChannel+0x520>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	617b      	str	r3, [r7, #20]
  return result;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2101      	movs	r1, #1
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	ea42 0103 	orr.w	r1, r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x54c>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0e9b      	lsrs	r3, r3, #26
 8003102:	3301      	adds	r3, #1
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	3b1e      	subs	r3, #30
 8003110:	051b      	lsls	r3, r3, #20
 8003112:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003116:	e014      	b.n	8003142 <HAL_ADC_ConfigChannel+0x576>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	60fb      	str	r3, [r7, #12]
  return result;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	3b1e      	subs	r3, #30
 800313c:	051b      	lsls	r3, r3, #20
 800313e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003142:	430b      	orrs	r3, r1
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	6892      	ldr	r2, [r2, #8]
 8003148:	4619      	mov	r1, r3
 800314a:	f7ff f983 	bl	8002454 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_ADC_ConfigChannel+0x628>)
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d07c      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800315a:	4827      	ldr	r0, [pc, #156]	; (80031f8 <HAL_ADC_ConfigChannel+0x62c>)
 800315c:	f7ff f8e2 	bl	8002324 <LL_ADC_GetCommonPathInternalCh>
 8003160:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <HAL_ADC_ConfigChannel+0x630>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d126      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x5f0>
 800316e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d120      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a20      	ldr	r2, [pc, #128]	; (8003200 <HAL_ADC_ConfigChannel+0x634>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d167      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003188:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800318c:	4619      	mov	r1, r3
 800318e:	481a      	ldr	r0, [pc, #104]	; (80031f8 <HAL_ADC_ConfigChannel+0x62c>)
 8003190:	f7ff f8b5 	bl	80022fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_ADC_ConfigChannel+0x638>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_ADC_ConfigChannel+0x63c>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	099a      	lsrs	r2, r3, #6
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031ac:	e002      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f9      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ba:	e04b      	b.n	8003254 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a12      	ldr	r2, [pc, #72]	; (800320c <HAL_ADC_ConfigChannel+0x640>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d124      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x644>
 80031c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11e      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_ADC_ConfigChannel+0x634>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d13b      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e4:	4619      	mov	r1, r3
 80031e6:	4804      	ldr	r0, [pc, #16]	; (80031f8 <HAL_ADC_ConfigChannel+0x62c>)
 80031e8:	f7ff f889 	bl	80022fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ec:	e032      	b.n	8003254 <HAL_ADC_ConfigChannel+0x688>
 80031ee:	bf00      	nop
 80031f0:	407f0000 	.word	0x407f0000
 80031f4:	80080000 	.word	0x80080000
 80031f8:	50040300 	.word	0x50040300
 80031fc:	c7520000 	.word	0xc7520000
 8003200:	50040000 	.word	0x50040000
 8003204:	20000004 	.word	0x20000004
 8003208:	053e2d63 	.word	0x053e2d63
 800320c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <HAL_ADC_ConfigChannel+0x69c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d11c      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800321a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d116      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <HAL_ADC_ConfigChannel+0x6a0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003238:	4619      	mov	r1, r3
 800323a:	480d      	ldr	r0, [pc, #52]	; (8003270 <HAL_ADC_ConfigChannel+0x6a4>)
 800323c:	f7ff f85f 	bl	80022fe <LL_ADC_SetCommonPathInternalCh>
 8003240:	e008      	b.n	8003254 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800325c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003260:	4618      	mov	r0, r3
 8003262:	3798      	adds	r7, #152	; 0x98
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	80000001 	.word	0x80000001
 800326c:	50040000 	.word	0x50040000
 8003270:	50040300 	.word	0x50040300

08003274 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff f9f2 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8003290:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fa13 	bl	80026c2 <LL_ADC_INJ_IsConversionOngoing>
 800329c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8090 	beq.w	80033cc <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02a      	beq.n	8003310 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7e5b      	ldrb	r3, [r3, #25]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d126      	bne.n	8003310 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7e1b      	ldrb	r3, [r3, #24]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d122      	bne.n	8003310 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032ce:	e014      	b.n	80032fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4a41      	ldr	r2, [pc, #260]	; (80033d8 <ADC_ConversionStop+0x164>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d90d      	bls.n	80032f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0210 	orr.w	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e06c      	b.n	80033ce <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	3301      	adds	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d1e3      	bne.n	80032d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2240      	movs	r2, #64	; 0x40
 800330e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d014      	beq.n	8003340 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f9aa 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00c      	beq.n	8003340 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff f967 	bl	80025fe <LL_ADC_IsDisableOngoing>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f986 	bl	800264c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d014      	beq.n	8003370 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f9b9 	bl	80026c2 <LL_ADC_INJ_IsConversionOngoing>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f94f 	bl	80025fe <LL_ADC_IsDisableOngoing>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff f995 	bl	800269a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d004      	beq.n	8003380 <ADC_ConversionStop+0x10c>
 8003376:	2b03      	cmp	r3, #3
 8003378:	d105      	bne.n	8003386 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800337a:	230c      	movs	r3, #12
 800337c:	617b      	str	r3, [r7, #20]
        break;
 800337e:	e005      	b.n	800338c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003380:	2308      	movs	r3, #8
 8003382:	617b      	str	r3, [r7, #20]
        break;
 8003384:	e002      	b.n	800338c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003386:	2304      	movs	r3, #4
 8003388:	617b      	str	r3, [r7, #20]
        break;
 800338a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800338c:	f7fe ff76 	bl	800227c <HAL_GetTick>
 8003390:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003392:	e014      	b.n	80033be <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003394:	f7fe ff72 	bl	800227c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d90d      	bls.n	80033be <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e007      	b.n	80033ce <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e3      	bne.n	8003394 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	a33fffff 	.word	0xa33fffff

080033dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f8f5 	bl	80025d8 <LL_ADC_IsEnabled>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d146      	bne.n	8003482 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <ADC_Enable+0xb0>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e032      	b.n	8003484 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f8b0 	bl	8002588 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003428:	f7fe ff28 	bl	800227c <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342e:	e021      	b.n	8003474 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff f8cf 	bl	80025d8 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f89f 	bl	8002588 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800344a:	f7fe ff17 	bl	800227c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d90d      	bls.n	8003474 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0210 	orr.w	r2, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d1d6      	bne.n	8003430 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	8000003f 	.word	0x8000003f

08003490 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f8ae 	bl	80025fe <LL_ADC_IsDisableOngoing>
 80034a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f895 	bl	80025d8 <LL_ADC_IsEnabled>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d040      	beq.n	8003536 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d13d      	bne.n	8003536 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030d 	and.w	r3, r3, #13
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d10c      	bne.n	80034e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f86f 	bl	80025b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2203      	movs	r2, #3
 80034d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034da:	f7fe fecf 	bl	800227c <HAL_GetTick>
 80034de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034e0:	e022      	b.n	8003528 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f043 0210 	orr.w	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e01c      	b.n	8003538 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034fe:	f7fe febd 	bl	800227c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d90d      	bls.n	8003528 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e3      	bne.n	80034fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	; (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	; (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	; 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff47 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff5c 	bl	8003588 <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffb0 	bl	8003660 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371a:	e148      	b.n	80039ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 813a 	beq.w	80039a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d00b      	beq.n	8003754 <HAL_GPIO_Init+0x48>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d007      	beq.n	8003754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003748:	2b11      	cmp	r3, #17
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b12      	cmp	r3, #18
 8003752:	d130      	bne.n	80037b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800378a:	2201      	movs	r2, #1
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 0201 	and.w	r2, r3, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0xea>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b12      	cmp	r3, #18
 80037f4:	d123      	bne.n	800383e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	6939      	ldr	r1, [r7, #16]
 800383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8094 	beq.w	80039a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	4b52      	ldr	r3, [pc, #328]	; (80039cc <HAL_GPIO_Init+0x2c0>)
 8003882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003884:	4a51      	ldr	r2, [pc, #324]	; (80039cc <HAL_GPIO_Init+0x2c0>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6613      	str	r3, [r2, #96]	; 0x60
 800388c:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <HAL_GPIO_Init+0x2c0>)
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003898:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_GPIO_Init+0x2c4>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	220f      	movs	r2, #15
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038c2:	d00d      	beq.n	80038e0 <HAL_GPIO_Init+0x1d4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a43      	ldr	r2, [pc, #268]	; (80039d4 <HAL_GPIO_Init+0x2c8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <HAL_GPIO_Init+0x1d0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a42      	ldr	r2, [pc, #264]	; (80039d8 <HAL_GPIO_Init+0x2cc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_GPIO_Init+0x1cc>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e004      	b.n	80038e2 <HAL_GPIO_Init+0x1d6>
 80038d8:	2307      	movs	r3, #7
 80038da:	e002      	b.n	80038e2 <HAL_GPIO_Init+0x1d6>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_GPIO_Init+0x1d6>
 80038e0:	2300      	movs	r3, #0
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	f002 0203 	and.w	r2, r2, #3
 80038e8:	0092      	lsls	r2, r2, #2
 80038ea:	4093      	lsls	r3, r2
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038f2:	4937      	ldr	r1, [pc, #220]	; (80039d0 <HAL_GPIO_Init+0x2c4>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003924:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800392a:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	43db      	mvns	r3, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800394e:	4a23      	ldr	r2, [pc, #140]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	43db      	mvns	r3, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003978:	4a18      	ldr	r2, [pc, #96]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039a2:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <HAL_GPIO_Init+0x2d0>)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3301      	adds	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f47f aeaf 	bne.w	800371c <HAL_GPIO_Init+0x10>
  }
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40010000 	.word	0x40010000
 80039d4:	48000400 	.word	0x48000400
 80039d8:	48000800 	.word	0x48000800
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
 80039ec:	4613      	mov	r3, r2
 80039ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f0:	787b      	ldrb	r3, [r7, #1]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039fc:	e002      	b.n	8003a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40007000 	.word	0x40007000

08003a30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5a:	d130      	bne.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a5c:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a68:	d038      	beq.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a72:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2232      	movs	r2, #50	; 0x32
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0c9b      	lsrs	r3, r3, #18
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a90:	e002      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa4:	d102      	bne.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f2      	bne.n	8003a92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab8:	d110      	bne.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e00f      	b.n	8003ade <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aca:	d007      	beq.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad4:	4a05      	ldr	r2, [pc, #20]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ada:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40007000 	.word	0x40007000
 8003af0:	20000004 	.word	0x20000004
 8003af4:	431bde83 	.word	0x431bde83

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f000 bc11 	b.w	800432e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0c:	4ba0      	ldr	r3, [pc, #640]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b16:	4b9e      	ldr	r3, [pc, #632]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80e4 	beq.w	8003cf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4c>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	f040 808b 	bne.w	8003c52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	f040 8087 	bne.w	8003c52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b44:	4b92      	ldr	r3, [pc, #584]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x64>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e3e8      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	4b8b      	ldr	r3, [pc, #556]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_RCC_OscConfig+0x7e>
 8003b6c:	4b88      	ldr	r3, [pc, #544]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b74:	e005      	b.n	8003b82 <HAL_RCC_OscConfig+0x8a>
 8003b76:	4b86      	ldr	r3, [pc, #536]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d223      	bcs.n	8003bce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fd78 	bl	8004680 <RCC_SetFlashLatencyFromMSIRange>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e3c9      	b.n	800432e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9a:	4b7d      	ldr	r3, [pc, #500]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7c      	ldr	r2, [pc, #496]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b7a      	ldr	r3, [pc, #488]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	4977      	ldr	r1, [pc, #476]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	4972      	ldr	r1, [pc, #456]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
 8003bcc:	e025      	b.n	8003c1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bce:	4b70      	ldr	r3, [pc, #448]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6f      	ldr	r2, [pc, #444]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b6d      	ldr	r3, [pc, #436]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	496a      	ldr	r1, [pc, #424]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bec:	4b68      	ldr	r3, [pc, #416]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	4965      	ldr	r1, [pc, #404]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fd38 	bl	8004680 <RCC_SetFlashLatencyFromMSIRange>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e389      	b.n	800432e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c1a:	f000 fc6f 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4b5b      	ldr	r3, [pc, #364]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a5a      	ldr	r2, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x29c>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	fa21 f303 	lsr.w	r3, r1, r3
 8003c36:	4a58      	ldr	r2, [pc, #352]	; (8003d98 <HAL_RCC_OscConfig+0x2a0>)
 8003c38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c3a:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <HAL_RCC_OscConfig+0x2a4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fad0 	bl	80021e4 <HAL_InitTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d052      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	e36d      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d032      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c5a:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a4c      	ldr	r2, [pc, #304]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c66:	f7fe fb09 	bl	800227c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c6e:	f7fe fb05 	bl	800227c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e356      	b.n	800432e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c80:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8c:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3f      	ldr	r2, [pc, #252]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c92:	f043 0308 	orr.w	r3, r3, #8
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	493a      	ldr	r1, [pc, #232]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	4935      	ldr	r1, [pc, #212]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	e01a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cc0:	4b33      	ldr	r3, [pc, #204]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a32      	ldr	r2, [pc, #200]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fad6 	bl	800227c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd4:	f7fe fad2 	bl	800227c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e323      	b.n	800432e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x1dc>
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d073      	beq.n	8003dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_OscConfig+0x21c>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d10e      	bne.n	8003d2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d063      	beq.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d15f      	bne.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e300      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d106      	bne.n	8003d44 <HAL_RCC_OscConfig+0x24c>
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e01d      	b.n	8003d80 <HAL_RCC_OscConfig+0x288>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x270>
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a0f      	ldr	r2, [pc, #60]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e00b      	b.n	8003d80 <HAL_RCC_OscConfig+0x288>
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_RCC_OscConfig+0x298>)
 8003d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fa78 	bl	800227c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8e:	e010      	b.n	8003db2 <HAL_RCC_OscConfig+0x2ba>
 8003d90:	40021000 	.word	0x40021000
 8003d94:	0800acd4 	.word	0x0800acd4
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fe fa6c 	bl	800227c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e2bd      	b.n	800432e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db2:	4baf      	ldr	r3, [pc, #700]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x2a8>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fa5c 	bl	800227c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fe fa58 	bl	800227c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e2a9      	b.n	800432e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dda:	4ba5      	ldr	r3, [pc, #660]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2d0>
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d060      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_OscConfig+0x310>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d116      	bne.n	8003e36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e08:	4b99      	ldr	r3, [pc, #612]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_OscConfig+0x328>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e286      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b93      	ldr	r3, [pc, #588]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	4990      	ldr	r1, [pc, #576]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e34:	e040      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d023      	beq.n	8003e86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e3e:	4b8c      	ldr	r3, [pc, #560]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8b      	ldr	r2, [pc, #556]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fa17 	bl	800227c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fe fa13 	bl	800227c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e264      	b.n	800432e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e64:	4b82      	ldr	r3, [pc, #520]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b7f      	ldr	r3, [pc, #508]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	497c      	ldr	r1, [pc, #496]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
 8003e84:	e018      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b7a      	ldr	r3, [pc, #488]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a79      	ldr	r2, [pc, #484]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe f9f3 	bl	800227c <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fe f9ef 	bl	800227c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e240      	b.n	800432e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eac:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d03c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ecc:	4b68      	ldr	r3, [pc, #416]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	4a67      	ldr	r2, [pc, #412]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe f9ce 	bl	800227c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fe f9ca 	bl	800227c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e21b      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef6:	4b5e      	ldr	r3, [pc, #376]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x3ec>
 8003f04:	e01b      	b.n	8003f3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f06:	4b5a      	ldr	r3, [pc, #360]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	4a58      	ldr	r2, [pc, #352]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fe f9b1 	bl	800227c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fe f9ad 	bl	800227c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1fe      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f30:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ef      	bne.n	8003f1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a6 	beq.w	8004098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f50:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10d      	bne.n	8003f78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a43      	ldr	r2, [pc, #268]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
 8003f68:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f74:	2301      	movs	r3, #1
 8003f76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f78:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <HAL_RCC_OscConfig+0x57c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d118      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <HAL_RCC_OscConfig+0x57c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3a      	ldr	r2, [pc, #232]	; (8004074 <HAL_RCC_OscConfig+0x57c>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f90:	f7fe f974 	bl	800227c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f98:	f7fe f970 	bl	800227c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e1c1      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003faa:	4b32      	ldr	r3, [pc, #200]	; (8004074 <HAL_RCC_OscConfig+0x57c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4d8>
 8003fbe:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fce:	e024      	b.n	800401a <HAL_RCC_OscConfig+0x522>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d110      	bne.n	8003ffa <HAL_RCC_OscConfig+0x502>
 8003fd8:	4b25      	ldr	r3, [pc, #148]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a24      	ldr	r2, [pc, #144]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe8:	4b21      	ldr	r3, [pc, #132]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	4a20      	ldr	r2, [pc, #128]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff8:	e00f      	b.n	800401a <HAL_RCC_OscConfig+0x522>
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8004012:	f023 0304 	bic.w	r3, r3, #4
 8004016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fe f92b 	bl	800227c <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004028:	e00a      	b.n	8004040 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402a:	f7fe f927 	bl	800227c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f241 3288 	movw	r2, #5000	; 0x1388
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e176      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x578>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ed      	beq.n	800402a <HAL_RCC_OscConfig+0x532>
 800404e:	e01a      	b.n	8004086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fe f914 	bl	800227c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004056:	e00f      	b.n	8004078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fe f910 	bl	800227c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d906      	bls.n	8004078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e15f      	b.n	800432e <HAL_RCC_OscConfig+0x836>
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
 8004074:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004078:	4baa      	ldr	r3, [pc, #680]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e8      	bne.n	8004058 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4ba5      	ldr	r3, [pc, #660]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4aa4      	ldr	r2, [pc, #656]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03c      	beq.n	800411e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040ac:	4b9d      	ldr	r3, [pc, #628]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80040ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b2:	4a9c      	ldr	r2, [pc, #624]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fe f8de 	bl	800227c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c4:	f7fe f8da 	bl	800227c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e12b      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d6:	4b93      	ldr	r3, [pc, #588]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <HAL_RCC_OscConfig+0x5cc>
 80040e4:	e01b      	b.n	800411e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e6:	4b8f      	ldr	r3, [pc, #572]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80040e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ec:	4a8d      	ldr	r2, [pc, #564]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fe f8c1 	bl	800227c <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fe:	f7fe f8bd 	bl	800227c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e10e      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004110:	4b84      	ldr	r3, [pc, #528]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ef      	bne.n	80040fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8102 	beq.w	800432c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	2b02      	cmp	r3, #2
 800412e:	f040 80c5 	bne.w	80042bc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004132:	4b7c      	ldr	r3, [pc, #496]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 0203 	and.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	429a      	cmp	r2, r3
 8004144:	d12c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	3b01      	subs	r3, #1
 8004152:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d123      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d11b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d113      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d109      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d067      	beq.n	8004270 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	d062      	beq.n	800426c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041a6:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e0bb      	b.n	800432e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041b6:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a5a      	ldr	r2, [pc, #360]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041c2:	f7fe f85b 	bl	800227c <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fe f857 	bl	800227c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0a8      	b.n	800432e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041dc:	4b51      	ldr	r3, [pc, #324]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e8:	4b4e      	ldr	r3, [pc, #312]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <HAL_RCC_OscConfig+0x830>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004202:	0212      	lsls	r2, r2, #8
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800420a:	0852      	lsrs	r2, r2, #1
 800420c:	3a01      	subs	r2, #1
 800420e:	0552      	lsls	r2, r2, #21
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004216:	0852      	lsrs	r2, r2, #1
 8004218:	3a01      	subs	r2, #1
 800421a:	0652      	lsls	r2, r2, #25
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004222:	06d2      	lsls	r2, r2, #27
 8004224:	430a      	orrs	r2, r1
 8004226:	493f      	ldr	r1, [pc, #252]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800422c:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a3c      	ldr	r2, [pc, #240]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004238:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a39      	ldr	r2, [pc, #228]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800423e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004242:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004244:	f7fe f81a 	bl	800227c <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe f816 	bl	800227c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e067      	b.n	800432e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800426a:	e05f      	b.n	800432c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e05e      	b.n	800432e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d157      	bne.n	800432c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a28      	ldr	r2, [pc, #160]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004286:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004288:	4b26      	ldr	r3, [pc, #152]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 800428e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004292:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004294:	f7fd fff2 	bl	800227c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fd ffee 	bl	800227c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e03f      	b.n	800432e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x7a4>
 80042ba:	e037      	b.n	800432c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d02d      	beq.n	800431e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a17      	ldr	r2, [pc, #92]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042cc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	4a11      	ldr	r2, [pc, #68]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042e0:	f023 0303 	bic.w	r3, r3, #3
 80042e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 80042ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd ffc1 	bl	800227c <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fe:	f7fd ffbd 	bl	800227c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e00e      	b.n	800432e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <HAL_RCC_OscConfig+0x82c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x806>
 800431c:	e006      	b.n	800432c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e005      	b.n	800432e <HAL_RCC_OscConfig+0x836>
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop

08004338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0c8      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b66      	ldr	r3, [pc, #408]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d910      	bls.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b63      	ldr	r3, [pc, #396]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0207 	bic.w	r2, r3, #7
 8004362:	4961      	ldr	r1, [pc, #388]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b5f      	ldr	r3, [pc, #380]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b0      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d04c      	beq.n	8004422 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004390:	4b56      	ldr	r3, [pc, #344]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d121      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e09e      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d107      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a8:	4b50      	ldr	r3, [pc, #320]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d115      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e092      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c0:	4b4a      	ldr	r3, [pc, #296]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e086      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d0:	4b46      	ldr	r3, [pc, #280]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e07e      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f023 0203 	bic.w	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	493f      	ldr	r1, [pc, #252]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f2:	f7fd ff43 	bl	800227c <HAL_GetTick>
 80043f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fa:	f7fd ff3f 	bl	800227c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e066      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004410:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 020c 	and.w	r2, r3, #12
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	429a      	cmp	r2, r3
 8004420:	d1eb      	bne.n	80043fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442e:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	492c      	ldr	r1, [pc, #176]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d210      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 0207 	bic.w	r2, r3, #7
 8004456:	4924      	ldr	r1, [pc, #144]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e036      	b.n	80044de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4918      	ldr	r1, [pc, #96]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4910      	ldr	r1, [pc, #64]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ae:	f000 f825 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80044b2:	4601      	mov	r1, r0
 80044b4:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCC_ClockConfig+0x1b4>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	fa21 f303 	lsr.w	r3, r1, r3
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fe86 	bl	80021e4 <HAL_InitTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	72fb      	strb	r3, [r7, #11]

  return status;
 80044dc:	7afb      	ldrb	r3, [r7, #11]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40022000 	.word	0x40022000
 80044ec:	40021000 	.word	0x40021000
 80044f0:	0800acd4 	.word	0x0800acd4
 80044f4:	20000004 	.word	0x20000004
 80044f8:	20000008 	.word	0x20000008

080044fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	2300      	movs	r3, #0
 8004508:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450a:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0x34>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d121      	bne.n	800456e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d11e      	bne.n	800456e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800453c:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e005      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004558:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004560:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d102      	bne.n	800457a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e004      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d101      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004580:	4b22      	ldr	r3, [pc, #136]	; (800460c <HAL_RCC_GetSysClockFreq+0x110>)
 8004582:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d133      	bne.n	80045f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d002      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800459a:	2b03      	cmp	r3, #3
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800459e:	e005      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045a2:	617b      	str	r3, [r7, #20]
      break;
 80045a4:	e005      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_RCC_GetSysClockFreq+0x110>)
 80045a8:	617b      	str	r3, [r7, #20]
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	617b      	str	r3, [r7, #20]
      break;
 80045b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	3301      	adds	r3, #1
 80045be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	fb02 f203 	mul.w	r2, r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_GetSysClockFreq+0x104>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	0e5b      	lsrs	r3, r3, #25
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045f2:	69bb      	ldr	r3, [r7, #24]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3724      	adds	r7, #36	; 0x24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40021000 	.word	0x40021000
 8004604:	0800acec 	.word	0x0800acec
 8004608:	00f42400 	.word	0x00f42400
 800460c:	007a1200 	.word	0x007a1200

08004610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HAL_RCC_GetHCLKFreq+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000004 	.word	0x20000004

08004628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800462c:	f7ff fff0 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004630:	4601      	mov	r1, r0
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4a04      	ldr	r2, [pc, #16]	; (8004650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021000 	.word	0x40021000
 8004650:	0800ace4 	.word	0x0800ace4

08004654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004658:	f7ff ffda 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 800465c:	4601      	mov	r1, r0
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	0adb      	lsrs	r3, r3, #11
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <HAL_RCC_GetPCLK2Freq+0x28>)
 800466a:	5cd3      	ldrb	r3, [r2, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	0800ace4 	.word	0x0800ace4

08004680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004698:	f7ff f9ca 	bl	8003a30 <HAL_PWREx_GetVoltageRange>
 800469c:	6178      	str	r0, [r7, #20]
 800469e:	e014      	b.n	80046ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b25      	ldr	r3, [pc, #148]	; (8004738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	4a24      	ldr	r2, [pc, #144]	; (8004738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6593      	str	r3, [r2, #88]	; 0x58
 80046ac:	4b22      	ldr	r3, [pc, #136]	; (8004738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046b8:	f7ff f9ba 	bl	8003a30 <HAL_PWREx_GetVoltageRange>
 80046bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046be:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d0:	d10b      	bne.n	80046ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b80      	cmp	r3, #128	; 0x80
 80046d6:	d919      	bls.n	800470c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2ba0      	cmp	r3, #160	; 0xa0
 80046dc:	d902      	bls.n	80046e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046de:	2302      	movs	r3, #2
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	e013      	b.n	800470c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046e4:	2301      	movs	r3, #1
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	e010      	b.n	800470c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d902      	bls.n	80046f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046f0:	2303      	movs	r3, #3
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e00a      	b.n	800470c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d102      	bne.n	8004702 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046fc:	2302      	movs	r3, #2
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e004      	b.n	800470c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b70      	cmp	r3, #112	; 0x70
 8004706:	d101      	bne.n	800470c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004708:	2301      	movs	r3, #1
 800470a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 0207 	bic.w	r2, r3, #7
 8004714:	4909      	ldr	r1, [pc, #36]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	429a      	cmp	r2, r3
 8004728:	d001      	beq.n	800472e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	40022000 	.word	0x40022000

08004740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004748:	2300      	movs	r3, #0
 800474a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800474c:	2300      	movs	r3, #0
 800474e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02f      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004764:	d005      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004766:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800476a:	d015      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004770:	e00f      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004772:	4bac      	ldr	r3, [pc, #688]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4aab      	ldr	r2, [pc, #684]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800477e:	e00c      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f9dc 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004790:	e003      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	74fb      	strb	r3, [r7, #19]
      break;
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047a0:	4ba0      	ldr	r3, [pc, #640]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	499d      	ldr	r1, [pc, #628]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047b6:	e001      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8099 	beq.w	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047ce:	4b95      	ldr	r3, [pc, #596]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00d      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e4:	4b8f      	ldr	r3, [pc, #572]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	4a8e      	ldr	r2, [pc, #568]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ee:	6593      	str	r3, [r2, #88]	; 0x58
 80047f0:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047fc:	2301      	movs	r3, #1
 80047fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004800:	4b89      	ldr	r3, [pc, #548]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a88      	ldr	r2, [pc, #544]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800480c:	f7fd fd36 	bl	800227c <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004812:	e009      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fd fd32 	bl	800227c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d902      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	74fb      	strb	r3, [r7, #19]
        break;
 8004826:	e005      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004828:	4b7f      	ldr	r3, [pc, #508]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ef      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d155      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800483a:	4b7a      	ldr	r3, [pc, #488]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01e      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	429a      	cmp	r2, r3
 8004854:	d019      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004856:	4b73      	ldr	r3, [pc, #460]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004860:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004862:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800486a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004872:	4b6c      	ldr	r3, [pc, #432]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	4a6a      	ldr	r2, [pc, #424]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004882:	4a68      	ldr	r2, [pc, #416]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd fcf2 	bl	800227c <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489a:	e00b      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489c:	f7fd fcee 	bl	800227c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d902      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	74fb      	strb	r3, [r7, #19]
            break;
 80048b2:	e006      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b4:	4b5b      	ldr	r3, [pc, #364]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0ec      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c8:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	4953      	ldr	r1, [pc, #332]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048de:	e004      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
 80048e4:	e001      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ea:	7c7b      	ldrb	r3, [r7, #17]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f0:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	4a4b      	ldr	r2, [pc, #300]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004908:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4943      	ldr	r1, [pc, #268]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800492a:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f023 020c 	bic.w	r2, r3, #12
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	493a      	ldr	r1, [pc, #232]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800494c:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	4932      	ldr	r1, [pc, #200]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	4929      	ldr	r1, [pc, #164]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004990:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	4921      	ldr	r1, [pc, #132]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4918      	ldr	r1, [pc, #96]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4910      	ldr	r1, [pc, #64]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d02c      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4907      	ldr	r1, [pc, #28]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a14:	d10a      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a16:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4a02      	ldr	r2, [pc, #8]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a20:	60d3      	str	r3, [r2, #12]
 8004a22:	e015      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f881 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d028      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a5c:	4b30      	ldr	r3, [pc, #192]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	492d      	ldr	r1, [pc, #180]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7c:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a86:	60d3      	str	r3, [r2, #12]
 8004a88:	e011      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a92:	d10c      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f852 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01c      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aba:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac8:	4915      	ldr	r1, [pc, #84]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2102      	movs	r1, #2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f82f 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	4904      	ldr	r1, [pc, #16]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b16:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000

08004b24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6013      	str	r3, [r2, #0]
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000

08004b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b52:	4b73      	ldr	r3, [pc, #460]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d018      	beq.n	8004b90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b5e:	4b70      	ldr	r3, [pc, #448]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0203 	and.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10d      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
       ||
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b76:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
       ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d044      	beq.n	8004c14 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
 8004b8e:	e041      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d00c      	beq.n	8004bb2 <RCCEx_PLLSAI1_Config+0x6e>
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d013      	beq.n	8004bc4 <RCCEx_PLLSAI1_Config+0x80>
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d120      	bne.n	8004be2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ba0:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11d      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb0:	e01a      	b.n	8004be8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bb2:	4b5b      	ldr	r3, [pc, #364]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d116      	bne.n	8004bec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc2:	e013      	b.n	8004bec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bc4:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bd0:	4b53      	ldr	r3, [pc, #332]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004be0:	e006      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
      break;
 8004be6:	e004      	b.n	8004bf2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004be8:	bf00      	nop
 8004bea:	e002      	b.n	8004bf2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bf0:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10d      	bne.n	8004c14 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bf8:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	4944      	ldr	r1, [pc, #272]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d17c      	bne.n	8004d14 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a40      	ldr	r2, [pc, #256]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fd fb29 	bl	800227c <HAL_GetTick>
 8004c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c2c:	e009      	b.n	8004c42 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c2e:	f7fd fb25 	bl	800227c <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d902      	bls.n	8004c42 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	73fb      	strb	r3, [r7, #15]
        break;
 8004c40:	e005      	b.n	8004c4e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ef      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d15f      	bne.n	8004d14 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d110      	bne.n	8004c7c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004c62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6892      	ldr	r2, [r2, #8]
 8004c6a:	0211      	lsls	r1, r2, #8
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68d2      	ldr	r2, [r2, #12]
 8004c70:	06d2      	lsls	r2, r2, #27
 8004c72:	430a      	orrs	r2, r1
 8004c74:	492a      	ldr	r1, [pc, #168]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	610b      	str	r3, [r1, #16]
 8004c7a:	e027      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d112      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c82:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6892      	ldr	r2, [r2, #8]
 8004c92:	0211      	lsls	r1, r2, #8
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6912      	ldr	r2, [r2, #16]
 8004c98:	0852      	lsrs	r2, r2, #1
 8004c9a:	3a01      	subs	r2, #1
 8004c9c:	0552      	lsls	r2, r2, #21
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	491f      	ldr	r1, [pc, #124]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	610b      	str	r3, [r1, #16]
 8004ca6:	e011      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6892      	ldr	r2, [r2, #8]
 8004cb8:	0211      	lsls	r1, r2, #8
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6952      	ldr	r2, [r2, #20]
 8004cbe:	0852      	lsrs	r2, r2, #1
 8004cc0:	3a01      	subs	r2, #1
 8004cc2:	0652      	lsls	r2, r2, #25
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	4916      	ldr	r1, [pc, #88]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fad0 	bl	800227c <HAL_GetTick>
 8004cdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cde:	e009      	b.n	8004cf4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ce0:	f7fd facc 	bl	800227c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d902      	bls.n	8004cf4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	73fb      	strb	r3, [r7, #15]
          break;
 8004cf2:	e005      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ef      	beq.n	8004ce0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	4904      	ldr	r1, [pc, #16]	; (8004d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000

08004d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e01d      	b.n	8004d72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd f846 	bl	8001ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 fa5a 	bl	800521c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e01d      	b.n	8004dc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f815 	bl	8004dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fa2f 	bl	800521c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fd8c 	bl	8005914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <HAL_TIM_PWM_Start+0x84>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x36>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <HAL_TIM_PWM_Start+0x88>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x36>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_TIM_PWM_Start+0x8c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_PWM_Start+0x3a>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <HAL_TIM_PWM_Start+0x3c>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <HAL_TIM_PWM_Start+0x90>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d00b      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x7a>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	00010007 	.word	0x00010007

08004e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e105      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b14      	cmp	r3, #20
 8004ea6:	f200 80f0 	bhi.w	800508a <HAL_TIM_PWM_ConfigChannel+0x212>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004f05 	.word	0x08004f05
 8004eb4:	0800508b 	.word	0x0800508b
 8004eb8:	0800508b 	.word	0x0800508b
 8004ebc:	0800508b 	.word	0x0800508b
 8004ec0:	08004f45 	.word	0x08004f45
 8004ec4:	0800508b 	.word	0x0800508b
 8004ec8:	0800508b 	.word	0x0800508b
 8004ecc:	0800508b 	.word	0x0800508b
 8004ed0:	08004f87 	.word	0x08004f87
 8004ed4:	0800508b 	.word	0x0800508b
 8004ed8:	0800508b 	.word	0x0800508b
 8004edc:	0800508b 	.word	0x0800508b
 8004ee0:	08004fc7 	.word	0x08004fc7
 8004ee4:	0800508b 	.word	0x0800508b
 8004ee8:	0800508b 	.word	0x0800508b
 8004eec:	0800508b 	.word	0x0800508b
 8004ef0:	08005009 	.word	0x08005009
 8004ef4:	0800508b 	.word	0x0800508b
 8004ef8:	0800508b 	.word	0x0800508b
 8004efc:	0800508b 	.word	0x0800508b
 8004f00:	08005049 	.word	0x08005049
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f9ea 	bl	80052e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	619a      	str	r2, [r3, #24]
      break;
 8004f42:	e0a3      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa46 	bl	80053dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	619a      	str	r2, [r3, #24]
      break;
 8004f84:	e082      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fa9f 	bl	80054d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0208 	orr.w	r2, r2, #8
 8004fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0204 	bic.w	r2, r2, #4
 8004fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69d9      	ldr	r1, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	61da      	str	r2, [r3, #28]
      break;
 8004fc4:	e062      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 faf7 	bl	80055c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	021a      	lsls	r2, r3, #8
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	61da      	str	r2, [r3, #28]
      break;
 8005006:	e041      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fb34 	bl	800567c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0208 	orr.w	r2, r2, #8
 8005022:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0204 	bic.w	r2, r2, #4
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005046:	e021      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb6c 	bl	800572c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005062:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005088:	e000      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800508a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop

080050a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_TIM_ConfigClockSource+0x18>
 80050bc:	2302      	movs	r3, #2
 80050be:	e0a8      	b.n	8005212 <HAL_TIM_ConfigClockSource+0x16a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d067      	beq.n	80051cc <HAL_TIM_ConfigClockSource+0x124>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d80b      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x70>
 8005100:	2b10      	cmp	r3, #16
 8005102:	d073      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x144>
 8005104:	2b10      	cmp	r3, #16
 8005106:	d802      	bhi.n	800510e <HAL_TIM_ConfigClockSource+0x66>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d06f      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800510c:	e078      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800510e:	2b20      	cmp	r3, #32
 8005110:	d06c      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x144>
 8005112:	2b30      	cmp	r3, #48	; 0x30
 8005114:	d06a      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005116:	e073      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005118:	2b70      	cmp	r3, #112	; 0x70
 800511a:	d00d      	beq.n	8005138 <HAL_TIM_ConfigClockSource+0x90>
 800511c:	2b70      	cmp	r3, #112	; 0x70
 800511e:	d804      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x82>
 8005120:	2b50      	cmp	r3, #80	; 0x50
 8005122:	d033      	beq.n	800518c <HAL_TIM_ConfigClockSource+0xe4>
 8005124:	2b60      	cmp	r3, #96	; 0x60
 8005126:	d041      	beq.n	80051ac <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005128:	e06a      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d066      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x156>
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005134:	d017      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005136:	e063      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6899      	ldr	r1, [r3, #8]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f000 fbc4 	bl	80058d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800515a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
      break;
 8005164:	e04c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f000 fbad 	bl	80058d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005188:	609a      	str	r2, [r3, #8]
      break;
 800518a:	e039      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	6859      	ldr	r1, [r3, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	461a      	mov	r2, r3
 800519a:	f000 fb21 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2150      	movs	r1, #80	; 0x50
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fb7a 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80051aa:	e029      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f000 fb40 	bl	800583e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2160      	movs	r1, #96	; 0x60
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fb6a 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80051ca:	e019      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	461a      	mov	r2, r3
 80051da:	f000 fb01 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2140      	movs	r1, #64	; 0x40
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fb5a 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80051ea:	e009      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 fb51 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80051fc:	e000      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80051fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <TIM_Base_SetConfig+0xbc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x20>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <TIM_Base_SetConfig+0xbc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0x52>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0x52>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <TIM_Base_SetConfig+0xc0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0x52>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <TIM_Base_SetConfig+0xc4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <TIM_Base_SetConfig+0xbc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0xa0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0b      	ldr	r2, [pc, #44]	; (80052dc <TIM_Base_SetConfig+0xc0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0xa0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <TIM_Base_SetConfig+0xc4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d103      	bne.n	80052c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	615a      	str	r2, [r3, #20]
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400

080052e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f023 0302 	bic.w	r3, r3, #2
 8005330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <TIM_OC1_SetConfig+0xec>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_OC1_SetConfig+0x70>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <TIM_OC1_SetConfig+0xf0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC1_SetConfig+0x70>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <TIM_OC1_SetConfig+0xf4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10c      	bne.n	800536e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0308 	bic.w	r3, r3, #8
 800535a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <TIM_OC1_SetConfig+0xec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_OC1_SetConfig+0xa2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a16      	ldr	r2, [pc, #88]	; (80053d4 <TIM_OC1_SetConfig+0xf0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC1_SetConfig+0xa2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <TIM_OC1_SetConfig+0xf4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d111      	bne.n	80053aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400

080053dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0210 	bic.w	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f023 0320 	bic.w	r3, r3, #32
 800542a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <TIM_OC2_SetConfig+0xe8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10d      	bne.n	800545c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <TIM_OC2_SetConfig+0xe8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_OC2_SetConfig+0x98>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <TIM_OC2_SetConfig+0xec>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC2_SetConfig+0x98>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <TIM_OC2_SetConfig+0xf0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d113      	bne.n	800549c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40014400 	.word	0x40014400

080054d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_OC3_SetConfig+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d10d      	bne.n	800554e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <TIM_OC3_SetConfig+0xe4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d007      	beq.n	8005566 <TIM_OC3_SetConfig+0x96>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <TIM_OC3_SetConfig+0xe8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_OC3_SetConfig+0x96>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a16      	ldr	r2, [pc, #88]	; (80055bc <TIM_OC3_SetConfig+0xec>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d113      	bne.n	800558e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800556c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400

080055c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	031b      	lsls	r3, r3, #12
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a14      	ldr	r2, [pc, #80]	; (8005670 <TIM_OC4_SetConfig+0xb0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_OC4_SetConfig+0x74>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <TIM_OC4_SetConfig+0xb4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC4_SetConfig+0x74>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a12      	ldr	r2, [pc, #72]	; (8005678 <TIM_OC4_SetConfig+0xb8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d109      	bne.n	8005648 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400

0800567c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a13      	ldr	r2, [pc, #76]	; (8005720 <TIM_OC5_SetConfig+0xa4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_OC5_SetConfig+0x6a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a12      	ldr	r2, [pc, #72]	; (8005724 <TIM_OC5_SetConfig+0xa8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC5_SetConfig+0x6a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a11      	ldr	r2, [pc, #68]	; (8005728 <TIM_OC5_SetConfig+0xac>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d109      	bne.n	80056fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	621a      	str	r2, [r3, #32]
}
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	40012c00 	.word	0x40012c00
 8005724:	40014000 	.word	0x40014000
 8005728:	40014400 	.word	0x40014400

0800572c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	051b      	lsls	r3, r3, #20
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <TIM_OC6_SetConfig+0xa8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_OC6_SetConfig+0x6c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <TIM_OC6_SetConfig+0xac>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC6_SetConfig+0x6c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a12      	ldr	r2, [pc, #72]	; (80057dc <TIM_OC6_SetConfig+0xb0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d109      	bne.n	80057ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	029b      	lsls	r3, r3, #10
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400

080057e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800580a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 030a 	bic.w	r3, r3, #10
 800581c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583e:	b480      	push	{r7}
 8005840:	b087      	sub	sp, #28
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f023 0210 	bic.w	r2, r3, #16
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800587a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f043 0307 	orr.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2201      	movs	r2, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	43db      	mvns	r3, r3
 8005936:	401a      	ands	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	431a      	orrs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e04f      	b.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d108      	bne.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e0:	d004      	beq.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a10      	ldr	r2, [pc, #64]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d10c      	bne.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40014000 	.word	0x40014000

08005a2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e060      	b.n	8005b0a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d115      	bne.n	8005af8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	051b      	lsls	r3, r3, #20
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40012c00 	.word	0x40012c00

08005b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e040      	b.n	8005bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc f9b6 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0201 	bic.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f98c 	bl	8005e78 <UART_SetConfig>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e022      	b.n	8005bb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fc66 	bl	8006444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fced 	bl	8006588 <UART_CheckIdleState>
 8005bae:	4603      	mov	r3, r0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	f040 8081 	bne.w	8005cd4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_UART_Transmit+0x26>
 8005bd8:	88fb      	ldrh	r3, [r7, #6]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e079      	b.n	8005cd6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_UART_Transmit+0x38>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e072      	b.n	8005cd6 <HAL_UART_Transmit+0x11e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2221      	movs	r2, #33	; 0x21
 8005c02:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c04:	f7fc fb3a 	bl	800227c <HAL_GetTick>
 8005c08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	88fa      	ldrh	r2, [r7, #6]
 8005c0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	d108      	bne.n	8005c36 <HAL_UART_Transmit+0x7e>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e003      	b.n	8005c3e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005c46:	e02d      	b.n	8005ca4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2180      	movs	r1, #128	; 0x80
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fcdd 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e039      	b.n	8005cd6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c74:	b292      	uxth	r2, r2
 8005c76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	e008      	b.n	8005c92 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	781a      	ldrb	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	b292      	uxth	r2, r2
 8005c8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1cb      	bne.n	8005c48 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2140      	movs	r1, #64	; 0x40
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fca9 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e005      	b.n	8005cd6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b08a      	sub	sp, #40	; 0x28
 8005ce2:	af02      	add	r7, sp, #8
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	f040 80bb 	bne.w	8005e6e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UART_Receive+0x26>
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0b3      	b.n	8005e70 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Receive+0x38>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e0ac      	b.n	8005e70 <HAL_UART_Receive+0x192>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2222      	movs	r2, #34	; 0x22
 8005d28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d2a:	f7fc faa7 	bl	800227c <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d48:	d10e      	bne.n	8005d68 <HAL_UART_Receive+0x8a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <HAL_UART_Receive+0x80>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d5c:	e02d      	b.n	8005dba <HAL_UART_Receive+0xdc>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d66:	e028      	b.n	8005dba <HAL_UART_Receive+0xdc>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <HAL_UART_Receive+0xae>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <HAL_UART_Receive+0xa4>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	22ff      	movs	r2, #255	; 0xff
 8005d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d80:	e01b      	b.n	8005dba <HAL_UART_Receive+0xdc>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	227f      	movs	r2, #127	; 0x7f
 8005d86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d8a:	e016      	b.n	8005dba <HAL_UART_Receive+0xdc>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d94:	d10d      	bne.n	8005db2 <HAL_UART_Receive+0xd4>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d104      	bne.n	8005da8 <HAL_UART_Receive+0xca>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	227f      	movs	r2, #127	; 0x7f
 8005da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005da6:	e008      	b.n	8005dba <HAL_UART_Receive+0xdc>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	223f      	movs	r2, #63	; 0x3f
 8005dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005db0:	e003      	b.n	8005dba <HAL_UART_Receive+0xdc>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dc0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dca:	d108      	bne.n	8005dde <HAL_UART_Receive+0x100>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	e003      	b.n	8005de6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005dee:	e033      	b.n	8005e58 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2200      	movs	r2, #0
 8005df8:	2120      	movs	r1, #32
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fc09 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e032      	b.n	8005e70 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10c      	bne.n	8005e2a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	8a7b      	ldrh	r3, [r7, #18]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	3302      	adds	r3, #2
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	e00d      	b.n	8005e46 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	8a7b      	ldrh	r3, [r7, #18]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	4013      	ands	r3, r2
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1c5      	bne.n	8005df0 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005e7c:	b08a      	sub	sp, #40	; 0x28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4bb3      	ldr	r3, [pc, #716]	; (800617c <UART_SetConfig+0x304>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4aa9      	ldr	r2, [pc, #676]	; (8006180 <UART_SetConfig+0x308>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efa:	430a      	orrs	r2, r1
 8005efc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4aa0      	ldr	r2, [pc, #640]	; (8006184 <UART_SetConfig+0x30c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d126      	bne.n	8005f56 <UART_SetConfig+0xde>
 8005f08:	4b9f      	ldr	r3, [pc, #636]	; (8006188 <UART_SetConfig+0x310>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d81a      	bhi.n	8005f4c <UART_SetConfig+0xd4>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <UART_SetConfig+0xa4>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f3d 	.word	0x08005f3d
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f45 	.word	0x08005f45
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f32:	e080      	b.n	8006036 <UART_SetConfig+0x1be>
 8005f34:	2302      	movs	r3, #2
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3a:	e07c      	b.n	8006036 <UART_SetConfig+0x1be>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f42:	e078      	b.n	8006036 <UART_SetConfig+0x1be>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e074      	b.n	8006036 <UART_SetConfig+0x1be>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	bf00      	nop
 8005f54:	e06f      	b.n	8006036 <UART_SetConfig+0x1be>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a8c      	ldr	r2, [pc, #560]	; (800618c <UART_SetConfig+0x314>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d138      	bne.n	8005fd2 <UART_SetConfig+0x15a>
 8005f60:	4b89      	ldr	r3, [pc, #548]	; (8006188 <UART_SetConfig+0x310>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d82c      	bhi.n	8005fc8 <UART_SetConfig+0x150>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <UART_SetConfig+0xfc>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005fa9 	.word	0x08005fa9
 8005f78:	08005fc9 	.word	0x08005fc9
 8005f7c:	08005fc9 	.word	0x08005fc9
 8005f80:	08005fc9 	.word	0x08005fc9
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08005fc9 	.word	0x08005fc9
 8005f8c:	08005fc9 	.word	0x08005fc9
 8005f90:	08005fc9 	.word	0x08005fc9
 8005f94:	08005fb1 	.word	0x08005fb1
 8005f98:	08005fc9 	.word	0x08005fc9
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	08005fc9 	.word	0x08005fc9
 8005fa4:	08005fc1 	.word	0x08005fc1
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fae:	e042      	b.n	8006036 <UART_SetConfig+0x1be>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb6:	e03e      	b.n	8006036 <UART_SetConfig+0x1be>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fbe:	e03a      	b.n	8006036 <UART_SetConfig+0x1be>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc6:	e036      	b.n	8006036 <UART_SetConfig+0x1be>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fce:	bf00      	nop
 8005fd0:	e031      	b.n	8006036 <UART_SetConfig+0x1be>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a6a      	ldr	r2, [pc, #424]	; (8006180 <UART_SetConfig+0x308>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d129      	bne.n	8006030 <UART_SetConfig+0x1b8>
 8005fdc:	4b6a      	ldr	r3, [pc, #424]	; (8006188 <UART_SetConfig+0x310>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fea:	d014      	beq.n	8006016 <UART_SetConfig+0x19e>
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff0:	d802      	bhi.n	8005ff8 <UART_SetConfig+0x180>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <UART_SetConfig+0x18e>
 8005ff6:	e016      	b.n	8006026 <UART_SetConfig+0x1ae>
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffc:	d007      	beq.n	800600e <UART_SetConfig+0x196>
 8005ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006002:	d00c      	beq.n	800601e <UART_SetConfig+0x1a6>
 8006004:	e00f      	b.n	8006026 <UART_SetConfig+0x1ae>
 8006006:	2300      	movs	r3, #0
 8006008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600c:	e013      	b.n	8006036 <UART_SetConfig+0x1be>
 800600e:	2302      	movs	r3, #2
 8006010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006014:	e00f      	b.n	8006036 <UART_SetConfig+0x1be>
 8006016:	2304      	movs	r3, #4
 8006018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601c:	e00b      	b.n	8006036 <UART_SetConfig+0x1be>
 800601e:	2308      	movs	r3, #8
 8006020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006024:	e007      	b.n	8006036 <UART_SetConfig+0x1be>
 8006026:	2310      	movs	r3, #16
 8006028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <UART_SetConfig+0x1be>
 8006030:	2310      	movs	r3, #16
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a51      	ldr	r2, [pc, #324]	; (8006180 <UART_SetConfig+0x308>)
 800603c:	4293      	cmp	r3, r2
 800603e:	f040 80fa 	bne.w	8006236 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006046:	2b08      	cmp	r3, #8
 8006048:	d823      	bhi.n	8006092 <UART_SetConfig+0x21a>
 800604a:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <UART_SetConfig+0x1d8>)
 800604c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006050:	08006075 	.word	0x08006075
 8006054:	08006093 	.word	0x08006093
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006093 	.word	0x08006093
 8006060:	08006083 	.word	0x08006083
 8006064:	08006093 	.word	0x08006093
 8006068:	08006093 	.word	0x08006093
 800606c:	08006093 	.word	0x08006093
 8006070:	0800608b 	.word	0x0800608b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006074:	f7fe fad8 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 8006078:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800607a:	e00d      	b.n	8006098 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800607c:	4b44      	ldr	r3, [pc, #272]	; (8006190 <UART_SetConfig+0x318>)
 800607e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006080:	e00a      	b.n	8006098 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006082:	f7fe fa3b 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8006086:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006088:	e006      	b.n	8006098 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800608a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006090:	e002      	b.n	8006098 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	76fb      	strb	r3, [r7, #27]
        break;
 8006096:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 81c6 	beq.w	800642c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d305      	bcc.n	80060bc <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d902      	bls.n	80060c2 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	76fb      	strb	r3, [r7, #27]
 80060c0:	e1b4      	b.n	800642c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80060c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	f200 80a2 	bhi.w	8006210 <UART_SetConfig+0x398>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <UART_SetConfig+0x25c>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	08006211 	.word	0x08006211
 80060dc:	08006147 	.word	0x08006147
 80060e0:	08006211 	.word	0x08006211
 80060e4:	08006199 	.word	0x08006199
 80060e8:	08006211 	.word	0x08006211
 80060ec:	08006211 	.word	0x08006211
 80060f0:	08006211 	.word	0x08006211
 80060f4:	080061e7 	.word	0x080061e7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80060f8:	f7fe fa96 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 80060fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4619      	mov	r1, r3
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	f04f 0400 	mov.w	r4, #0
 800610e:	0214      	lsls	r4, r2, #8
 8006110:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006114:	020b      	lsls	r3, r1, #8
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6852      	ldr	r2, [r2, #4]
 800611a:	0852      	lsrs	r2, r2, #1
 800611c:	4611      	mov	r1, r2
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	eb13 0b01 	adds.w	fp, r3, r1
 8006126:	eb44 0c02 	adc.w	ip, r4, r2
 800612a:	4658      	mov	r0, fp
 800612c:	4661      	mov	r1, ip
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f04f 0400 	mov.w	r4, #0
 8006136:	461a      	mov	r2, r3
 8006138:	4623      	mov	r3, r4
 800613a:	f7fa fda5 	bl	8000c88 <__aeabi_uldivmod>
 800613e:	4603      	mov	r3, r0
 8006140:	460c      	mov	r4, r1
 8006142:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006144:	e067      	b.n	8006216 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	f04f 0400 	mov.w	r4, #0
 8006150:	4910      	ldr	r1, [pc, #64]	; (8006194 <UART_SetConfig+0x31c>)
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	eb13 0b01 	adds.w	fp, r3, r1
 800615a:	eb44 0c02 	adc.w	ip, r4, r2
 800615e:	4658      	mov	r0, fp
 8006160:	4661      	mov	r1, ip
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f04f 0400 	mov.w	r4, #0
 800616a:	461a      	mov	r2, r3
 800616c:	4623      	mov	r3, r4
 800616e:	f7fa fd8b 	bl	8000c88 <__aeabi_uldivmod>
 8006172:	4603      	mov	r3, r0
 8006174:	460c      	mov	r4, r1
 8006176:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006178:	e04d      	b.n	8006216 <UART_SetConfig+0x39e>
 800617a:	bf00      	nop
 800617c:	efff69f3 	.word	0xefff69f3
 8006180:	40008000 	.word	0x40008000
 8006184:	40013800 	.word	0x40013800
 8006188:	40021000 	.word	0x40021000
 800618c:	40004400 	.word	0x40004400
 8006190:	00f42400 	.word	0x00f42400
 8006194:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006198:	f7fe f9b0 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 800619c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4619      	mov	r1, r3
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f04f 0400 	mov.w	r4, #0
 80061ae:	0214      	lsls	r4, r2, #8
 80061b0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80061b4:	020b      	lsls	r3, r1, #8
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6852      	ldr	r2, [r2, #4]
 80061ba:	0852      	lsrs	r2, r2, #1
 80061bc:	4611      	mov	r1, r2
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	eb13 0b01 	adds.w	fp, r3, r1
 80061c6:	eb44 0c02 	adc.w	ip, r4, r2
 80061ca:	4658      	mov	r0, fp
 80061cc:	4661      	mov	r1, ip
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f04f 0400 	mov.w	r4, #0
 80061d6:	461a      	mov	r2, r3
 80061d8:	4623      	mov	r3, r4
 80061da:	f7fa fd55 	bl	8000c88 <__aeabi_uldivmod>
 80061de:	4603      	mov	r3, r0
 80061e0:	460c      	mov	r4, r1
 80061e2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80061e4:	e017      	b.n	8006216 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	f04f 0400 	mov.w	r4, #0
 80061f0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80061f4:	f144 0100 	adc.w	r1, r4, #0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f04f 0400 	mov.w	r4, #0
 8006200:	461a      	mov	r2, r3
 8006202:	4623      	mov	r3, r4
 8006204:	f7fa fd40 	bl	8000c88 <__aeabi_uldivmod>
 8006208:	4603      	mov	r3, r0
 800620a:	460c      	mov	r4, r1
 800620c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800620e:	e002      	b.n	8006216 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	76fb      	strb	r3, [r7, #27]
            break;
 8006214:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800621c:	d308      	bcc.n	8006230 <UART_SetConfig+0x3b8>
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006224:	d204      	bcs.n	8006230 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	60da      	str	r2, [r3, #12]
 800622e:	e0fd      	b.n	800642c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	76fb      	strb	r3, [r7, #27]
 8006234:	e0fa      	b.n	800642c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623e:	f040 8083 	bne.w	8006348 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8006242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006246:	2b08      	cmp	r3, #8
 8006248:	d85e      	bhi.n	8006308 <UART_SetConfig+0x490>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <UART_SetConfig+0x3d8>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006275 	.word	0x08006275
 8006254:	08006295 	.word	0x08006295
 8006258:	080062b5 	.word	0x080062b5
 800625c:	08006309 	.word	0x08006309
 8006260:	080062d1 	.word	0x080062d1
 8006264:	08006309 	.word	0x08006309
 8006268:	08006309 	.word	0x08006309
 800626c:	08006309 	.word	0x08006309
 8006270:	080062f1 	.word	0x080062f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006274:	f7fe f9d8 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 8006278:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	005a      	lsls	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	085b      	lsrs	r3, r3, #1
 8006284:	441a      	add	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	fbb2 f3f3 	udiv	r3, r2, r3
 800628e:	b29b      	uxth	r3, r3
 8006290:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006292:	e03c      	b.n	800630e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006294:	f7fe f9de 	bl	8004654 <HAL_RCC_GetPCLK2Freq>
 8006298:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	005a      	lsls	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	441a      	add	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80062b2:	e02c      	b.n	800630e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80062be:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6852      	ldr	r2, [r2, #4]
 80062c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80062ce:	e01e      	b.n	800630e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d0:	f7fe f914 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80062d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	005a      	lsls	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80062ee:	e00e      	b.n	800630e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	b29b      	uxth	r3, r3
 8006304:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006306:	e002      	b.n	800630e <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	76fb      	strb	r3, [r7, #27]
        break;
 800630c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d916      	bls.n	8006342 <UART_SetConfig+0x4ca>
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631a:	d212      	bcs.n	8006342 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f023 030f 	bic.w	r3, r3, #15
 8006324:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	b29a      	uxth	r2, r3
 8006332:	89fb      	ldrh	r3, [r7, #14]
 8006334:	4313      	orrs	r3, r2
 8006336:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	89fa      	ldrh	r2, [r7, #14]
 800633e:	60da      	str	r2, [r3, #12]
 8006340:	e074      	b.n	800642c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	76fb      	strb	r3, [r7, #27]
 8006346:	e071      	b.n	800642c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8006348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800634c:	2b08      	cmp	r3, #8
 800634e:	d85c      	bhi.n	800640a <UART_SetConfig+0x592>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x4e0>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800637d 	.word	0x0800637d
 800635c:	0800639b 	.word	0x0800639b
 8006360:	080063b9 	.word	0x080063b9
 8006364:	0800640b 	.word	0x0800640b
 8006368:	080063d5 	.word	0x080063d5
 800636c:	0800640b 	.word	0x0800640b
 8006370:	0800640b 	.word	0x0800640b
 8006374:	0800640b 	.word	0x0800640b
 8006378:	080063f3 	.word	0x080063f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7fe f954 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 8006380:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	085a      	lsrs	r2, r3, #1
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	441a      	add	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	b29b      	uxth	r3, r3
 8006396:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006398:	e03a      	b.n	8006410 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639a:	f7fe f95b 	bl	8004654 <HAL_RCC_GetPCLK2Freq>
 800639e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	085a      	lsrs	r2, r3, #1
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	441a      	add	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80063b6:	e02b      	b.n	8006410 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80063c2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6852      	ldr	r2, [r2, #4]
 80063ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80063d2:	e01d      	b.n	8006410 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d4:	f7fe f892 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80063d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	085a      	lsrs	r2, r3, #1
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80063f0:	e00e      	b.n	8006410 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	b29b      	uxth	r3, r3
 8006406:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006408:	e002      	b.n	8006410 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	76fb      	strb	r3, [r7, #27]
        break;
 800640e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2b0f      	cmp	r3, #15
 8006414:	d908      	bls.n	8006428 <UART_SetConfig+0x5b0>
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d204      	bcs.n	8006428 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e001      	b.n	800642c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006438:	7efb      	ldrb	r3, [r7, #27]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3728      	adds	r7, #40	; 0x28
 800643e:	46bd      	mov	sp, r7
 8006440:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01a      	beq.n	800655a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006542:	d10a      	bne.n	800655a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  }
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af02      	add	r7, sp, #8
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006596:	f7fb fe71 	bl	800227c <HAL_GetTick>
 800659a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d10e      	bne.n	80065c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f82a 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e020      	b.n	800660a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d10e      	bne.n	80065f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f814 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e00a      	b.n	800660a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006622:	e05d      	b.n	80066e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d059      	beq.n	80066e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662c:	f7fb fe26 	bl	800227c <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <UART_WaitOnFlagUntilTimeout+0x30>
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11b      	bne.n	800667a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006650:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e042      	b.n	8006700 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02b      	beq.n	80066e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006696:	d123      	bne.n	80066e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066b0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e00f      	b.n	8006700 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4013      	ands	r3, r2
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	bf0c      	ite	eq
 80066f0:	2301      	moveq	r3, #1
 80066f2:	2300      	movne	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d092      	beq.n	8006624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <__errno>:
 8006708:	4b01      	ldr	r3, [pc, #4]	; (8006710 <__errno+0x8>)
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000010 	.word	0x20000010

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4e0d      	ldr	r6, [pc, #52]	; (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	; (8006750 <__libc_init_array+0x3c>)
 800671a:	1ba4      	subs	r4, r4, r6
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2500      	movs	r5, #0
 8006720:	42a5      	cmp	r5, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4e0b      	ldr	r6, [pc, #44]	; (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	; (8006758 <__libc_init_array+0x44>)
 8006728:	f004 fa5e 	bl	800abe8 <_init>
 800672c:	1ba4      	subs	r4, r4, r6
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2500      	movs	r5, #0
 8006732:	42a5      	cmp	r5, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800673c:	4798      	blx	r3
 800673e:	3501      	adds	r5, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006746:	4798      	blx	r3
 8006748:	3501      	adds	r5, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	0800b048 	.word	0x0800b048
 8006750:	0800b048 	.word	0x0800b048
 8006754:	0800b048 	.word	0x0800b048
 8006758:	0800b04c 	.word	0x0800b04c

0800675c <memset>:
 800675c:	4402      	add	r2, r0
 800675e:	4603      	mov	r3, r0
 8006760:	4293      	cmp	r3, r2
 8006762:	d100      	bne.n	8006766 <memset+0xa>
 8006764:	4770      	bx	lr
 8006766:	f803 1b01 	strb.w	r1, [r3], #1
 800676a:	e7f9      	b.n	8006760 <memset+0x4>

0800676c <__cvt>:
 800676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	ec55 4b10 	vmov	r4, r5, d0
 8006774:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006776:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800677a:	2d00      	cmp	r5, #0
 800677c:	460e      	mov	r6, r1
 800677e:	4691      	mov	r9, r2
 8006780:	4619      	mov	r1, r3
 8006782:	bfb8      	it	lt
 8006784:	4622      	movlt	r2, r4
 8006786:	462b      	mov	r3, r5
 8006788:	f027 0720 	bic.w	r7, r7, #32
 800678c:	bfbb      	ittet	lt
 800678e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006792:	461d      	movlt	r5, r3
 8006794:	2300      	movge	r3, #0
 8006796:	232d      	movlt	r3, #45	; 0x2d
 8006798:	bfb8      	it	lt
 800679a:	4614      	movlt	r4, r2
 800679c:	2f46      	cmp	r7, #70	; 0x46
 800679e:	700b      	strb	r3, [r1, #0]
 80067a0:	d004      	beq.n	80067ac <__cvt+0x40>
 80067a2:	2f45      	cmp	r7, #69	; 0x45
 80067a4:	d100      	bne.n	80067a8 <__cvt+0x3c>
 80067a6:	3601      	adds	r6, #1
 80067a8:	2102      	movs	r1, #2
 80067aa:	e000      	b.n	80067ae <__cvt+0x42>
 80067ac:	2103      	movs	r1, #3
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	ab02      	add	r3, sp, #8
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	4632      	mov	r2, r6
 80067b8:	4653      	mov	r3, sl
 80067ba:	ec45 4b10 	vmov	d0, r4, r5
 80067be:	f001 feb3 	bl	8008528 <_dtoa_r>
 80067c2:	2f47      	cmp	r7, #71	; 0x47
 80067c4:	4680      	mov	r8, r0
 80067c6:	d102      	bne.n	80067ce <__cvt+0x62>
 80067c8:	f019 0f01 	tst.w	r9, #1
 80067cc:	d026      	beq.n	800681c <__cvt+0xb0>
 80067ce:	2f46      	cmp	r7, #70	; 0x46
 80067d0:	eb08 0906 	add.w	r9, r8, r6
 80067d4:	d111      	bne.n	80067fa <__cvt+0x8e>
 80067d6:	f898 3000 	ldrb.w	r3, [r8]
 80067da:	2b30      	cmp	r3, #48	; 0x30
 80067dc:	d10a      	bne.n	80067f4 <__cvt+0x88>
 80067de:	2200      	movs	r2, #0
 80067e0:	2300      	movs	r3, #0
 80067e2:	4620      	mov	r0, r4
 80067e4:	4629      	mov	r1, r5
 80067e6:	f7fa f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ea:	b918      	cbnz	r0, 80067f4 <__cvt+0x88>
 80067ec:	f1c6 0601 	rsb	r6, r6, #1
 80067f0:	f8ca 6000 	str.w	r6, [sl]
 80067f4:	f8da 3000 	ldr.w	r3, [sl]
 80067f8:	4499      	add	r9, r3
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f961 	bl	8000ac8 <__aeabi_dcmpeq>
 8006806:	b938      	cbnz	r0, 8006818 <__cvt+0xac>
 8006808:	2230      	movs	r2, #48	; 0x30
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	454b      	cmp	r3, r9
 800680e:	d205      	bcs.n	800681c <__cvt+0xb0>
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	9103      	str	r1, [sp, #12]
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e7f8      	b.n	800680a <__cvt+0x9e>
 8006818:	f8cd 900c 	str.w	r9, [sp, #12]
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006820:	eba3 0308 	sub.w	r3, r3, r8
 8006824:	4640      	mov	r0, r8
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	b004      	add	sp, #16
 800682a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800682e <__exponent>:
 800682e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006830:	2900      	cmp	r1, #0
 8006832:	4604      	mov	r4, r0
 8006834:	bfba      	itte	lt
 8006836:	4249      	neglt	r1, r1
 8006838:	232d      	movlt	r3, #45	; 0x2d
 800683a:	232b      	movge	r3, #43	; 0x2b
 800683c:	2909      	cmp	r1, #9
 800683e:	f804 2b02 	strb.w	r2, [r4], #2
 8006842:	7043      	strb	r3, [r0, #1]
 8006844:	dd20      	ble.n	8006888 <__exponent+0x5a>
 8006846:	f10d 0307 	add.w	r3, sp, #7
 800684a:	461f      	mov	r7, r3
 800684c:	260a      	movs	r6, #10
 800684e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006852:	fb06 1115 	mls	r1, r6, r5, r1
 8006856:	3130      	adds	r1, #48	; 0x30
 8006858:	2d09      	cmp	r5, #9
 800685a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800685e:	f103 32ff 	add.w	r2, r3, #4294967295
 8006862:	4629      	mov	r1, r5
 8006864:	dc09      	bgt.n	800687a <__exponent+0x4c>
 8006866:	3130      	adds	r1, #48	; 0x30
 8006868:	3b02      	subs	r3, #2
 800686a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800686e:	42bb      	cmp	r3, r7
 8006870:	4622      	mov	r2, r4
 8006872:	d304      	bcc.n	800687e <__exponent+0x50>
 8006874:	1a10      	subs	r0, r2, r0
 8006876:	b003      	add	sp, #12
 8006878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687a:	4613      	mov	r3, r2
 800687c:	e7e7      	b.n	800684e <__exponent+0x20>
 800687e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006882:	f804 2b01 	strb.w	r2, [r4], #1
 8006886:	e7f2      	b.n	800686e <__exponent+0x40>
 8006888:	2330      	movs	r3, #48	; 0x30
 800688a:	4419      	add	r1, r3
 800688c:	7083      	strb	r3, [r0, #2]
 800688e:	1d02      	adds	r2, r0, #4
 8006890:	70c1      	strb	r1, [r0, #3]
 8006892:	e7ef      	b.n	8006874 <__exponent+0x46>

08006894 <_printf_float>:
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	b08d      	sub	sp, #52	; 0x34
 800689a:	460c      	mov	r4, r1
 800689c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80068a0:	4616      	mov	r6, r2
 80068a2:	461f      	mov	r7, r3
 80068a4:	4605      	mov	r5, r0
 80068a6:	f003 f89d 	bl	80099e4 <_localeconv_r>
 80068aa:	6803      	ldr	r3, [r0, #0]
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7f9 fc8e 	bl	80001d0 <strlen>
 80068b4:	2300      	movs	r3, #0
 80068b6:	930a      	str	r3, [sp, #40]	; 0x28
 80068b8:	f8d8 3000 	ldr.w	r3, [r8]
 80068bc:	9005      	str	r0, [sp, #20]
 80068be:	3307      	adds	r3, #7
 80068c0:	f023 0307 	bic.w	r3, r3, #7
 80068c4:	f103 0208 	add.w	r2, r3, #8
 80068c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068cc:	f8d4 b000 	ldr.w	fp, [r4]
 80068d0:	f8c8 2000 	str.w	r2, [r8]
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068dc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068e4:	9307      	str	r3, [sp, #28]
 80068e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295
 80068ee:	4ba7      	ldr	r3, [pc, #668]	; (8006b8c <_printf_float+0x2f8>)
 80068f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f4:	f7fa f91a 	bl	8000b2c <__aeabi_dcmpun>
 80068f8:	bb70      	cbnz	r0, 8006958 <_printf_float+0xc4>
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295
 80068fe:	4ba3      	ldr	r3, [pc, #652]	; (8006b8c <_printf_float+0x2f8>)
 8006900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006904:	f7fa f8f4 	bl	8000af0 <__aeabi_dcmple>
 8006908:	bb30      	cbnz	r0, 8006958 <_printf_float+0xc4>
 800690a:	2200      	movs	r2, #0
 800690c:	2300      	movs	r3, #0
 800690e:	4640      	mov	r0, r8
 8006910:	4649      	mov	r1, r9
 8006912:	f7fa f8e3 	bl	8000adc <__aeabi_dcmplt>
 8006916:	b110      	cbz	r0, 800691e <_printf_float+0x8a>
 8006918:	232d      	movs	r3, #45	; 0x2d
 800691a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691e:	4a9c      	ldr	r2, [pc, #624]	; (8006b90 <_printf_float+0x2fc>)
 8006920:	4b9c      	ldr	r3, [pc, #624]	; (8006b94 <_printf_float+0x300>)
 8006922:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006926:	bf8c      	ite	hi
 8006928:	4690      	movhi	r8, r2
 800692a:	4698      	movls	r8, r3
 800692c:	2303      	movs	r3, #3
 800692e:	f02b 0204 	bic.w	r2, fp, #4
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	6022      	str	r2, [r4, #0]
 8006936:	f04f 0900 	mov.w	r9, #0
 800693a:	9700      	str	r7, [sp, #0]
 800693c:	4633      	mov	r3, r6
 800693e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f9e6 	bl	8006d14 <_printf_common>
 8006948:	3001      	adds	r0, #1
 800694a:	f040 808d 	bne.w	8006a68 <_printf_float+0x1d4>
 800694e:	f04f 30ff 	mov.w	r0, #4294967295
 8006952:	b00d      	add	sp, #52	; 0x34
 8006954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	4640      	mov	r0, r8
 800695e:	4649      	mov	r1, r9
 8006960:	f7fa f8e4 	bl	8000b2c <__aeabi_dcmpun>
 8006964:	b110      	cbz	r0, 800696c <_printf_float+0xd8>
 8006966:	4a8c      	ldr	r2, [pc, #560]	; (8006b98 <_printf_float+0x304>)
 8006968:	4b8c      	ldr	r3, [pc, #560]	; (8006b9c <_printf_float+0x308>)
 800696a:	e7da      	b.n	8006922 <_printf_float+0x8e>
 800696c:	6861      	ldr	r1, [r4, #4]
 800696e:	1c4b      	adds	r3, r1, #1
 8006970:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006974:	a80a      	add	r0, sp, #40	; 0x28
 8006976:	d13e      	bne.n	80069f6 <_printf_float+0x162>
 8006978:	2306      	movs	r3, #6
 800697a:	6063      	str	r3, [r4, #4]
 800697c:	2300      	movs	r3, #0
 800697e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006982:	ab09      	add	r3, sp, #36	; 0x24
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	ec49 8b10 	vmov	d0, r8, r9
 800698a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800698e:	6022      	str	r2, [r4, #0]
 8006990:	f8cd a004 	str.w	sl, [sp, #4]
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	4628      	mov	r0, r5
 8006998:	f7ff fee8 	bl	800676c <__cvt>
 800699c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80069a0:	2b47      	cmp	r3, #71	; 0x47
 80069a2:	4680      	mov	r8, r0
 80069a4:	d109      	bne.n	80069ba <_printf_float+0x126>
 80069a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a8:	1cd8      	adds	r0, r3, #3
 80069aa:	db02      	blt.n	80069b2 <_printf_float+0x11e>
 80069ac:	6862      	ldr	r2, [r4, #4]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	dd47      	ble.n	8006a42 <_printf_float+0x1ae>
 80069b2:	f1aa 0a02 	sub.w	sl, sl, #2
 80069b6:	fa5f fa8a 	uxtb.w	sl, sl
 80069ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80069be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c0:	d824      	bhi.n	8006a0c <_printf_float+0x178>
 80069c2:	3901      	subs	r1, #1
 80069c4:	4652      	mov	r2, sl
 80069c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069ca:	9109      	str	r1, [sp, #36]	; 0x24
 80069cc:	f7ff ff2f 	bl	800682e <__exponent>
 80069d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d2:	1813      	adds	r3, r2, r0
 80069d4:	2a01      	cmp	r2, #1
 80069d6:	4681      	mov	r9, r0
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	dc02      	bgt.n	80069e2 <_printf_float+0x14e>
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	07d1      	lsls	r1, r2, #31
 80069e0:	d501      	bpl.n	80069e6 <_printf_float+0x152>
 80069e2:	3301      	adds	r3, #1
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0a5      	beq.n	800693a <_printf_float+0xa6>
 80069ee:	232d      	movs	r3, #45	; 0x2d
 80069f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f4:	e7a1      	b.n	800693a <_printf_float+0xa6>
 80069f6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80069fa:	f000 8177 	beq.w	8006cec <_printf_float+0x458>
 80069fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006a02:	d1bb      	bne.n	800697c <_printf_float+0xe8>
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d1b9      	bne.n	800697c <_printf_float+0xe8>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e7b6      	b.n	800697a <_printf_float+0xe6>
 8006a0c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006a10:	d119      	bne.n	8006a46 <_printf_float+0x1b2>
 8006a12:	2900      	cmp	r1, #0
 8006a14:	6863      	ldr	r3, [r4, #4]
 8006a16:	dd0c      	ble.n	8006a32 <_printf_float+0x19e>
 8006a18:	6121      	str	r1, [r4, #16]
 8006a1a:	b913      	cbnz	r3, 8006a22 <_printf_float+0x18e>
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	07d2      	lsls	r2, r2, #31
 8006a20:	d502      	bpl.n	8006a28 <_printf_float+0x194>
 8006a22:	3301      	adds	r3, #1
 8006a24:	440b      	add	r3, r1
 8006a26:	6123      	str	r3, [r4, #16]
 8006a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a2c:	f04f 0900 	mov.w	r9, #0
 8006a30:	e7d9      	b.n	80069e6 <_printf_float+0x152>
 8006a32:	b913      	cbnz	r3, 8006a3a <_printf_float+0x1a6>
 8006a34:	6822      	ldr	r2, [r4, #0]
 8006a36:	07d0      	lsls	r0, r2, #31
 8006a38:	d501      	bpl.n	8006a3e <_printf_float+0x1aa>
 8006a3a:	3302      	adds	r3, #2
 8006a3c:	e7f3      	b.n	8006a26 <_printf_float+0x192>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e7f1      	b.n	8006a26 <_printf_float+0x192>
 8006a42:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006a46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	db05      	blt.n	8006a5a <_printf_float+0x1c6>
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	6123      	str	r3, [r4, #16]
 8006a52:	07d1      	lsls	r1, r2, #31
 8006a54:	d5e8      	bpl.n	8006a28 <_printf_float+0x194>
 8006a56:	3301      	adds	r3, #1
 8006a58:	e7e5      	b.n	8006a26 <_printf_float+0x192>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bfd4      	ite	le
 8006a5e:	f1c3 0302 	rsble	r3, r3, #2
 8006a62:	2301      	movgt	r3, #1
 8006a64:	4413      	add	r3, r2
 8006a66:	e7de      	b.n	8006a26 <_printf_float+0x192>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	055a      	lsls	r2, r3, #21
 8006a6c:	d407      	bmi.n	8006a7e <_printf_float+0x1ea>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	4642      	mov	r2, r8
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d12b      	bne.n	8006ad4 <_printf_float+0x240>
 8006a7c:	e767      	b.n	800694e <_printf_float+0xba>
 8006a7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006a82:	f240 80dc 	bls.w	8006c3e <_printf_float+0x3aa>
 8006a86:	2200      	movs	r2, #0
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a8e:	f7fa f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d033      	beq.n	8006afe <_printf_float+0x26a>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4a41      	ldr	r2, [pc, #260]	; (8006ba0 <_printf_float+0x30c>)
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f43f af54 	beq.w	800694e <_printf_float+0xba>
 8006aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	db02      	blt.n	8006ab4 <_printf_float+0x220>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	07d8      	lsls	r0, r3, #31
 8006ab2:	d50f      	bpl.n	8006ad4 <_printf_float+0x240>
 8006ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f af45 	beq.w	800694e <_printf_float+0xba>
 8006ac4:	f04f 0800 	mov.w	r8, #0
 8006ac8:	f104 091a 	add.w	r9, r4, #26
 8006acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4543      	cmp	r3, r8
 8006ad2:	dc09      	bgt.n	8006ae8 <_printf_float+0x254>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	079b      	lsls	r3, r3, #30
 8006ad8:	f100 8103 	bmi.w	8006ce2 <_printf_float+0x44e>
 8006adc:	68e0      	ldr	r0, [r4, #12]
 8006ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae0:	4298      	cmp	r0, r3
 8006ae2:	bfb8      	it	lt
 8006ae4:	4618      	movlt	r0, r3
 8006ae6:	e734      	b.n	8006952 <_printf_float+0xbe>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	464a      	mov	r2, r9
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f af2b 	beq.w	800694e <_printf_float+0xba>
 8006af8:	f108 0801 	add.w	r8, r8, #1
 8006afc:	e7e6      	b.n	8006acc <_printf_float+0x238>
 8006afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc2b      	bgt.n	8006b5c <_printf_float+0x2c8>
 8006b04:	2301      	movs	r3, #1
 8006b06:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <_printf_float+0x30c>)
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f af1d 	beq.w	800694e <_printf_float+0xba>
 8006b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b16:	b923      	cbnz	r3, 8006b22 <_printf_float+0x28e>
 8006b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1a:	b913      	cbnz	r3, 8006b22 <_printf_float+0x28e>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	07d9      	lsls	r1, r3, #31
 8006b20:	d5d8      	bpl.n	8006ad4 <_printf_float+0x240>
 8006b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f43f af0e 	beq.w	800694e <_printf_float+0xba>
 8006b32:	f04f 0900 	mov.w	r9, #0
 8006b36:	f104 0a1a 	add.w	sl, r4, #26
 8006b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3c:	425b      	negs	r3, r3
 8006b3e:	454b      	cmp	r3, r9
 8006b40:	dc01      	bgt.n	8006b46 <_printf_float+0x2b2>
 8006b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b44:	e794      	b.n	8006a70 <_printf_float+0x1dc>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4652      	mov	r2, sl
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	f43f aefc 	beq.w	800694e <_printf_float+0xba>
 8006b56:	f109 0901 	add.w	r9, r9, #1
 8006b5a:	e7ee      	b.n	8006b3a <_printf_float+0x2a6>
 8006b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b60:	429a      	cmp	r2, r3
 8006b62:	bfa8      	it	ge
 8006b64:	461a      	movge	r2, r3
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	4691      	mov	r9, r2
 8006b6a:	dd07      	ble.n	8006b7c <_printf_float+0x2e8>
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4642      	mov	r2, r8
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f aee9 	beq.w	800694e <_printf_float+0xba>
 8006b7c:	f104 031a 	add.w	r3, r4, #26
 8006b80:	f04f 0b00 	mov.w	fp, #0
 8006b84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b88:	9306      	str	r3, [sp, #24]
 8006b8a:	e015      	b.n	8006bb8 <_printf_float+0x324>
 8006b8c:	7fefffff 	.word	0x7fefffff
 8006b90:	0800ad24 	.word	0x0800ad24
 8006b94:	0800ad20 	.word	0x0800ad20
 8006b98:	0800ad2c 	.word	0x0800ad2c
 8006b9c:	0800ad28 	.word	0x0800ad28
 8006ba0:	0800ad30 	.word	0x0800ad30
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	9a06      	ldr	r2, [sp, #24]
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f aecd 	beq.w	800694e <_printf_float+0xba>
 8006bb4:	f10b 0b01 	add.w	fp, fp, #1
 8006bb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006bbc:	ebaa 0309 	sub.w	r3, sl, r9
 8006bc0:	455b      	cmp	r3, fp
 8006bc2:	dcef      	bgt.n	8006ba4 <_printf_float+0x310>
 8006bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	44d0      	add	r8, sl
 8006bcc:	db15      	blt.n	8006bfa <_printf_float+0x366>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	07da      	lsls	r2, r3, #31
 8006bd2:	d412      	bmi.n	8006bfa <_printf_float+0x366>
 8006bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bd8:	eba3 020a 	sub.w	r2, r3, sl
 8006bdc:	eba3 0a01 	sub.w	sl, r3, r1
 8006be0:	4592      	cmp	sl, r2
 8006be2:	bfa8      	it	ge
 8006be4:	4692      	movge	sl, r2
 8006be6:	f1ba 0f00 	cmp.w	sl, #0
 8006bea:	dc0e      	bgt.n	8006c0a <_printf_float+0x376>
 8006bec:	f04f 0800 	mov.w	r8, #0
 8006bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bf4:	f104 091a 	add.w	r9, r4, #26
 8006bf8:	e019      	b.n	8006c2e <_printf_float+0x39a>
 8006bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	d1e5      	bne.n	8006bd4 <_printf_float+0x340>
 8006c08:	e6a1      	b.n	800694e <_printf_float+0xba>
 8006c0a:	4653      	mov	r3, sl
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1e9      	bne.n	8006bec <_printf_float+0x358>
 8006c18:	e699      	b.n	800694e <_printf_float+0xba>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	464a      	mov	r2, r9
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
 8006c22:	47b8      	blx	r7
 8006c24:	3001      	adds	r0, #1
 8006c26:	f43f ae92 	beq.w	800694e <_printf_float+0xba>
 8006c2a:	f108 0801 	add.w	r8, r8, #1
 8006c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	eba3 030a 	sub.w	r3, r3, sl
 8006c38:	4543      	cmp	r3, r8
 8006c3a:	dcee      	bgt.n	8006c1a <_printf_float+0x386>
 8006c3c:	e74a      	b.n	8006ad4 <_printf_float+0x240>
 8006c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c40:	2a01      	cmp	r2, #1
 8006c42:	dc01      	bgt.n	8006c48 <_printf_float+0x3b4>
 8006c44:	07db      	lsls	r3, r3, #31
 8006c46:	d53a      	bpl.n	8006cbe <_printf_float+0x42a>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f ae7b 	beq.w	800694e <_printf_float+0xba>
 8006c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47b8      	blx	r7
 8006c62:	3001      	adds	r0, #1
 8006c64:	f108 0801 	add.w	r8, r8, #1
 8006c68:	f43f ae71 	beq.w	800694e <_printf_float+0xba>
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f103 3aff 	add.w	sl, r3, #4294967295
 8006c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f7f9 ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c7e:	b9c8      	cbnz	r0, 8006cb4 <_printf_float+0x420>
 8006c80:	4653      	mov	r3, sl
 8006c82:	4642      	mov	r2, r8
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d10e      	bne.n	8006cac <_printf_float+0x418>
 8006c8e:	e65e      	b.n	800694e <_printf_float+0xba>
 8006c90:	2301      	movs	r3, #1
 8006c92:	4652      	mov	r2, sl
 8006c94:	4631      	mov	r1, r6
 8006c96:	4628      	mov	r0, r5
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	f43f ae57 	beq.w	800694e <_printf_float+0xba>
 8006ca0:	f108 0801 	add.w	r8, r8, #1
 8006ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	4543      	cmp	r3, r8
 8006caa:	dcf1      	bgt.n	8006c90 <_printf_float+0x3fc>
 8006cac:	464b      	mov	r3, r9
 8006cae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cb2:	e6de      	b.n	8006a72 <_printf_float+0x1de>
 8006cb4:	f04f 0800 	mov.w	r8, #0
 8006cb8:	f104 0a1a 	add.w	sl, r4, #26
 8006cbc:	e7f2      	b.n	8006ca4 <_printf_float+0x410>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e7df      	b.n	8006c82 <_printf_float+0x3ee>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	464a      	mov	r2, r9
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f ae3e 	beq.w	800694e <_printf_float+0xba>
 8006cd2:	f108 0801 	add.w	r8, r8, #1
 8006cd6:	68e3      	ldr	r3, [r4, #12]
 8006cd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cda:	1a9b      	subs	r3, r3, r2
 8006cdc:	4543      	cmp	r3, r8
 8006cde:	dcf0      	bgt.n	8006cc2 <_printf_float+0x42e>
 8006ce0:	e6fc      	b.n	8006adc <_printf_float+0x248>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	f104 0919 	add.w	r9, r4, #25
 8006cea:	e7f4      	b.n	8006cd6 <_printf_float+0x442>
 8006cec:	2900      	cmp	r1, #0
 8006cee:	f43f ae8b 	beq.w	8006a08 <_printf_float+0x174>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006cf8:	ab09      	add	r3, sp, #36	; 0x24
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	ec49 8b10 	vmov	d0, r8, r9
 8006d00:	6022      	str	r2, [r4, #0]
 8006d02:	f8cd a004 	str.w	sl, [sp, #4]
 8006d06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f7ff fd2e 	bl	800676c <__cvt>
 8006d10:	4680      	mov	r8, r0
 8006d12:	e648      	b.n	80069a6 <_printf_float+0x112>

08006d14 <_printf_common>:
 8006d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	4691      	mov	r9, r2
 8006d1a:	461f      	mov	r7, r3
 8006d1c:	688a      	ldr	r2, [r1, #8]
 8006d1e:	690b      	ldr	r3, [r1, #16]
 8006d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	bfb8      	it	lt
 8006d28:	4613      	movlt	r3, r2
 8006d2a:	f8c9 3000 	str.w	r3, [r9]
 8006d2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d32:	4606      	mov	r6, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	b112      	cbz	r2, 8006d3e <_printf_common+0x2a>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f8c9 3000 	str.w	r3, [r9]
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	0699      	lsls	r1, r3, #26
 8006d42:	bf42      	ittt	mi
 8006d44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d48:	3302      	addmi	r3, #2
 8006d4a:	f8c9 3000 	strmi.w	r3, [r9]
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	f015 0506 	ands.w	r5, r5, #6
 8006d54:	d107      	bne.n	8006d66 <_printf_common+0x52>
 8006d56:	f104 0a19 	add.w	sl, r4, #25
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	42ab      	cmp	r3, r5
 8006d64:	dc28      	bgt.n	8006db8 <_printf_common+0xa4>
 8006d66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	3300      	adds	r3, #0
 8006d6e:	bf18      	it	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	0692      	lsls	r2, r2, #26
 8006d74:	d42d      	bmi.n	8006dd2 <_printf_common+0xbe>
 8006d76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	47c0      	blx	r8
 8006d80:	3001      	adds	r0, #1
 8006d82:	d020      	beq.n	8006dc6 <_printf_common+0xb2>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	68e5      	ldr	r5, [r4, #12]
 8006d88:	f8d9 2000 	ldr.w	r2, [r9]
 8006d8c:	f003 0306 	and.w	r3, r3, #6
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	bf08      	it	eq
 8006d94:	1aad      	subeq	r5, r5, r2
 8006d96:	68a3      	ldr	r3, [r4, #8]
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	bf0c      	ite	eq
 8006d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006da0:	2500      	movne	r5, #0
 8006da2:	4293      	cmp	r3, r2
 8006da4:	bfc4      	itt	gt
 8006da6:	1a9b      	subgt	r3, r3, r2
 8006da8:	18ed      	addgt	r5, r5, r3
 8006daa:	f04f 0900 	mov.w	r9, #0
 8006dae:	341a      	adds	r4, #26
 8006db0:	454d      	cmp	r5, r9
 8006db2:	d11a      	bne.n	8006dea <_printf_common+0xd6>
 8006db4:	2000      	movs	r0, #0
 8006db6:	e008      	b.n	8006dca <_printf_common+0xb6>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4652      	mov	r2, sl
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	47c0      	blx	r8
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d103      	bne.n	8006dce <_printf_common+0xba>
 8006dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	3501      	adds	r5, #1
 8006dd0:	e7c3      	b.n	8006d5a <_printf_common+0x46>
 8006dd2:	18e1      	adds	r1, r4, r3
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	2030      	movs	r0, #48	; 0x30
 8006dd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ddc:	4422      	add	r2, r4
 8006dde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006de2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006de6:	3302      	adds	r3, #2
 8006de8:	e7c5      	b.n	8006d76 <_printf_common+0x62>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4622      	mov	r2, r4
 8006dee:	4639      	mov	r1, r7
 8006df0:	4630      	mov	r0, r6
 8006df2:	47c0      	blx	r8
 8006df4:	3001      	adds	r0, #1
 8006df6:	d0e6      	beq.n	8006dc6 <_printf_common+0xb2>
 8006df8:	f109 0901 	add.w	r9, r9, #1
 8006dfc:	e7d8      	b.n	8006db0 <_printf_common+0x9c>
	...

08006e00 <_printf_i>:
 8006e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e08:	460c      	mov	r4, r1
 8006e0a:	7e09      	ldrb	r1, [r1, #24]
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	296e      	cmp	r1, #110	; 0x6e
 8006e10:	4617      	mov	r7, r2
 8006e12:	4606      	mov	r6, r0
 8006e14:	4698      	mov	r8, r3
 8006e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e18:	f000 80b3 	beq.w	8006f82 <_printf_i+0x182>
 8006e1c:	d822      	bhi.n	8006e64 <_printf_i+0x64>
 8006e1e:	2963      	cmp	r1, #99	; 0x63
 8006e20:	d036      	beq.n	8006e90 <_printf_i+0x90>
 8006e22:	d80a      	bhi.n	8006e3a <_printf_i+0x3a>
 8006e24:	2900      	cmp	r1, #0
 8006e26:	f000 80b9 	beq.w	8006f9c <_printf_i+0x19c>
 8006e2a:	2958      	cmp	r1, #88	; 0x58
 8006e2c:	f000 8083 	beq.w	8006f36 <_printf_i+0x136>
 8006e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e38:	e032      	b.n	8006ea0 <_printf_i+0xa0>
 8006e3a:	2964      	cmp	r1, #100	; 0x64
 8006e3c:	d001      	beq.n	8006e42 <_printf_i+0x42>
 8006e3e:	2969      	cmp	r1, #105	; 0x69
 8006e40:	d1f6      	bne.n	8006e30 <_printf_i+0x30>
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	6813      	ldr	r3, [r2, #0]
 8006e46:	0605      	lsls	r5, r0, #24
 8006e48:	f103 0104 	add.w	r1, r3, #4
 8006e4c:	d52a      	bpl.n	8006ea4 <_printf_i+0xa4>
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	da03      	bge.n	8006e5e <_printf_i+0x5e>
 8006e56:	222d      	movs	r2, #45	; 0x2d
 8006e58:	425b      	negs	r3, r3
 8006e5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e5e:	486f      	ldr	r0, [pc, #444]	; (800701c <_printf_i+0x21c>)
 8006e60:	220a      	movs	r2, #10
 8006e62:	e039      	b.n	8006ed8 <_printf_i+0xd8>
 8006e64:	2973      	cmp	r1, #115	; 0x73
 8006e66:	f000 809d 	beq.w	8006fa4 <_printf_i+0x1a4>
 8006e6a:	d808      	bhi.n	8006e7e <_printf_i+0x7e>
 8006e6c:	296f      	cmp	r1, #111	; 0x6f
 8006e6e:	d020      	beq.n	8006eb2 <_printf_i+0xb2>
 8006e70:	2970      	cmp	r1, #112	; 0x70
 8006e72:	d1dd      	bne.n	8006e30 <_printf_i+0x30>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	f043 0320 	orr.w	r3, r3, #32
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	e003      	b.n	8006e86 <_printf_i+0x86>
 8006e7e:	2975      	cmp	r1, #117	; 0x75
 8006e80:	d017      	beq.n	8006eb2 <_printf_i+0xb2>
 8006e82:	2978      	cmp	r1, #120	; 0x78
 8006e84:	d1d4      	bne.n	8006e30 <_printf_i+0x30>
 8006e86:	2378      	movs	r3, #120	; 0x78
 8006e88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e8c:	4864      	ldr	r0, [pc, #400]	; (8007020 <_printf_i+0x220>)
 8006e8e:	e055      	b.n	8006f3c <_printf_i+0x13c>
 8006e90:	6813      	ldr	r3, [r2, #0]
 8006e92:	1d19      	adds	r1, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6011      	str	r1, [r2, #0]
 8006e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e08c      	b.n	8006fbe <_printf_i+0x1be>
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6011      	str	r1, [r2, #0]
 8006ea8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eac:	bf18      	it	ne
 8006eae:	b21b      	sxthne	r3, r3
 8006eb0:	e7cf      	b.n	8006e52 <_printf_i+0x52>
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	6825      	ldr	r5, [r4, #0]
 8006eb6:	1d18      	adds	r0, r3, #4
 8006eb8:	6010      	str	r0, [r2, #0]
 8006eba:	0628      	lsls	r0, r5, #24
 8006ebc:	d501      	bpl.n	8006ec2 <_printf_i+0xc2>
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	e002      	b.n	8006ec8 <_printf_i+0xc8>
 8006ec2:	0668      	lsls	r0, r5, #25
 8006ec4:	d5fb      	bpl.n	8006ebe <_printf_i+0xbe>
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	4854      	ldr	r0, [pc, #336]	; (800701c <_printf_i+0x21c>)
 8006eca:	296f      	cmp	r1, #111	; 0x6f
 8006ecc:	bf14      	ite	ne
 8006ece:	220a      	movne	r2, #10
 8006ed0:	2208      	moveq	r2, #8
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ed8:	6865      	ldr	r5, [r4, #4]
 8006eda:	60a5      	str	r5, [r4, #8]
 8006edc:	2d00      	cmp	r5, #0
 8006ede:	f2c0 8095 	blt.w	800700c <_printf_i+0x20c>
 8006ee2:	6821      	ldr	r1, [r4, #0]
 8006ee4:	f021 0104 	bic.w	r1, r1, #4
 8006ee8:	6021      	str	r1, [r4, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d13d      	bne.n	8006f6a <_printf_i+0x16a>
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	f040 808e 	bne.w	8007010 <_printf_i+0x210>
 8006ef4:	4665      	mov	r5, ip
 8006ef6:	2a08      	cmp	r2, #8
 8006ef8:	d10b      	bne.n	8006f12 <_printf_i+0x112>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	07db      	lsls	r3, r3, #31
 8006efe:	d508      	bpl.n	8006f12 <_printf_i+0x112>
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	bfde      	ittt	le
 8006f08:	2330      	movle	r3, #48	; 0x30
 8006f0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f12:	ebac 0305 	sub.w	r3, ip, r5
 8006f16:	6123      	str	r3, [r4, #16]
 8006f18:	f8cd 8000 	str.w	r8, [sp]
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	aa03      	add	r2, sp, #12
 8006f20:	4621      	mov	r1, r4
 8006f22:	4630      	mov	r0, r6
 8006f24:	f7ff fef6 	bl	8006d14 <_printf_common>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d14d      	bne.n	8006fc8 <_printf_i+0x1c8>
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	b005      	add	sp, #20
 8006f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f36:	4839      	ldr	r0, [pc, #228]	; (800701c <_printf_i+0x21c>)
 8006f38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f3c:	6813      	ldr	r3, [r2, #0]
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	1d1d      	adds	r5, r3, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6015      	str	r5, [r2, #0]
 8006f46:	060a      	lsls	r2, r1, #24
 8006f48:	d50b      	bpl.n	8006f62 <_printf_i+0x162>
 8006f4a:	07ca      	lsls	r2, r1, #31
 8006f4c:	bf44      	itt	mi
 8006f4e:	f041 0120 	orrmi.w	r1, r1, #32
 8006f52:	6021      	strmi	r1, [r4, #0]
 8006f54:	b91b      	cbnz	r3, 8006f5e <_printf_i+0x15e>
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	f022 0220 	bic.w	r2, r2, #32
 8006f5c:	6022      	str	r2, [r4, #0]
 8006f5e:	2210      	movs	r2, #16
 8006f60:	e7b7      	b.n	8006ed2 <_printf_i+0xd2>
 8006f62:	064d      	lsls	r5, r1, #25
 8006f64:	bf48      	it	mi
 8006f66:	b29b      	uxthmi	r3, r3
 8006f68:	e7ef      	b.n	8006f4a <_printf_i+0x14a>
 8006f6a:	4665      	mov	r5, ip
 8006f6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f70:	fb02 3311 	mls	r3, r2, r1, r3
 8006f74:	5cc3      	ldrb	r3, [r0, r3]
 8006f76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d1f5      	bne.n	8006f6c <_printf_i+0x16c>
 8006f80:	e7b9      	b.n	8006ef6 <_printf_i+0xf6>
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	6825      	ldr	r5, [r4, #0]
 8006f86:	6961      	ldr	r1, [r4, #20]
 8006f88:	1d18      	adds	r0, r3, #4
 8006f8a:	6010      	str	r0, [r2, #0]
 8006f8c:	0628      	lsls	r0, r5, #24
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	d501      	bpl.n	8006f96 <_printf_i+0x196>
 8006f92:	6019      	str	r1, [r3, #0]
 8006f94:	e002      	b.n	8006f9c <_printf_i+0x19c>
 8006f96:	066a      	lsls	r2, r5, #25
 8006f98:	d5fb      	bpl.n	8006f92 <_printf_i+0x192>
 8006f9a:	8019      	strh	r1, [r3, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	4665      	mov	r5, ip
 8006fa2:	e7b9      	b.n	8006f18 <_printf_i+0x118>
 8006fa4:	6813      	ldr	r3, [r2, #0]
 8006fa6:	1d19      	adds	r1, r3, #4
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	681d      	ldr	r5, [r3, #0]
 8006fac:	6862      	ldr	r2, [r4, #4]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f7f9 f915 	bl	80001e0 <memchr>
 8006fb6:	b108      	cbz	r0, 8006fbc <_printf_i+0x1bc>
 8006fb8:	1b40      	subs	r0, r0, r5
 8006fba:	6060      	str	r0, [r4, #4]
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc6:	e7a7      	b.n	8006f18 <_printf_i+0x118>
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	462a      	mov	r2, r5
 8006fcc:	4639      	mov	r1, r7
 8006fce:	4630      	mov	r0, r6
 8006fd0:	47c0      	blx	r8
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d0aa      	beq.n	8006f2c <_printf_i+0x12c>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	079b      	lsls	r3, r3, #30
 8006fda:	d413      	bmi.n	8007004 <_printf_i+0x204>
 8006fdc:	68e0      	ldr	r0, [r4, #12]
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	4298      	cmp	r0, r3
 8006fe2:	bfb8      	it	lt
 8006fe4:	4618      	movlt	r0, r3
 8006fe6:	e7a3      	b.n	8006f30 <_printf_i+0x130>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	464a      	mov	r2, r9
 8006fec:	4639      	mov	r1, r7
 8006fee:	4630      	mov	r0, r6
 8006ff0:	47c0      	blx	r8
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d09a      	beq.n	8006f2c <_printf_i+0x12c>
 8006ff6:	3501      	adds	r5, #1
 8006ff8:	68e3      	ldr	r3, [r4, #12]
 8006ffa:	9a03      	ldr	r2, [sp, #12]
 8006ffc:	1a9b      	subs	r3, r3, r2
 8006ffe:	42ab      	cmp	r3, r5
 8007000:	dcf2      	bgt.n	8006fe8 <_printf_i+0x1e8>
 8007002:	e7eb      	b.n	8006fdc <_printf_i+0x1dc>
 8007004:	2500      	movs	r5, #0
 8007006:	f104 0919 	add.w	r9, r4, #25
 800700a:	e7f5      	b.n	8006ff8 <_printf_i+0x1f8>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1ac      	bne.n	8006f6a <_printf_i+0x16a>
 8007010:	7803      	ldrb	r3, [r0, #0]
 8007012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007016:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800701a:	e76c      	b.n	8006ef6 <_printf_i+0xf6>
 800701c:	0800ad32 	.word	0x0800ad32
 8007020:	0800ad43 	.word	0x0800ad43

08007024 <_scanf_float>:
 8007024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	469a      	mov	sl, r3
 800702a:	688b      	ldr	r3, [r1, #8]
 800702c:	4616      	mov	r6, r2
 800702e:	1e5a      	subs	r2, r3, #1
 8007030:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007034:	b087      	sub	sp, #28
 8007036:	bf83      	ittte	hi
 8007038:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800703c:	189b      	addhi	r3, r3, r2
 800703e:	9301      	strhi	r3, [sp, #4]
 8007040:	2300      	movls	r3, #0
 8007042:	bf86      	itte	hi
 8007044:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007048:	608b      	strhi	r3, [r1, #8]
 800704a:	9301      	strls	r3, [sp, #4]
 800704c:	680b      	ldr	r3, [r1, #0]
 800704e:	4688      	mov	r8, r1
 8007050:	f04f 0b00 	mov.w	fp, #0
 8007054:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007058:	f848 3b1c 	str.w	r3, [r8], #28
 800705c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007060:	4607      	mov	r7, r0
 8007062:	460c      	mov	r4, r1
 8007064:	4645      	mov	r5, r8
 8007066:	465a      	mov	r2, fp
 8007068:	46d9      	mov	r9, fp
 800706a:	f8cd b008 	str.w	fp, [sp, #8]
 800706e:	68a1      	ldr	r1, [r4, #8]
 8007070:	b181      	cbz	r1, 8007094 <_scanf_float+0x70>
 8007072:	6833      	ldr	r3, [r6, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b49      	cmp	r3, #73	; 0x49
 8007078:	d071      	beq.n	800715e <_scanf_float+0x13a>
 800707a:	d84d      	bhi.n	8007118 <_scanf_float+0xf4>
 800707c:	2b39      	cmp	r3, #57	; 0x39
 800707e:	d840      	bhi.n	8007102 <_scanf_float+0xde>
 8007080:	2b31      	cmp	r3, #49	; 0x31
 8007082:	f080 8088 	bcs.w	8007196 <_scanf_float+0x172>
 8007086:	2b2d      	cmp	r3, #45	; 0x2d
 8007088:	f000 8090 	beq.w	80071ac <_scanf_float+0x188>
 800708c:	d815      	bhi.n	80070ba <_scanf_float+0x96>
 800708e:	2b2b      	cmp	r3, #43	; 0x2b
 8007090:	f000 808c 	beq.w	80071ac <_scanf_float+0x188>
 8007094:	f1b9 0f00 	cmp.w	r9, #0
 8007098:	d003      	beq.n	80070a2 <_scanf_float+0x7e>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	3a01      	subs	r2, #1
 80070a4:	2a01      	cmp	r2, #1
 80070a6:	f200 80ea 	bhi.w	800727e <_scanf_float+0x25a>
 80070aa:	4545      	cmp	r5, r8
 80070ac:	f200 80dc 	bhi.w	8007268 <_scanf_float+0x244>
 80070b0:	2601      	movs	r6, #1
 80070b2:	4630      	mov	r0, r6
 80070b4:	b007      	add	sp, #28
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	2b2e      	cmp	r3, #46	; 0x2e
 80070bc:	f000 809f 	beq.w	80071fe <_scanf_float+0x1da>
 80070c0:	2b30      	cmp	r3, #48	; 0x30
 80070c2:	d1e7      	bne.n	8007094 <_scanf_float+0x70>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80070ca:	d064      	beq.n	8007196 <_scanf_float+0x172>
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80070d2:	6020      	str	r0, [r4, #0]
 80070d4:	f109 0901 	add.w	r9, r9, #1
 80070d8:	b11b      	cbz	r3, 80070e2 <_scanf_float+0xbe>
 80070da:	3b01      	subs	r3, #1
 80070dc:	3101      	adds	r1, #1
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	60a1      	str	r1, [r4, #8]
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	60a3      	str	r3, [r4, #8]
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	3301      	adds	r3, #1
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	6873      	ldr	r3, [r6, #4]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	6073      	str	r3, [r6, #4]
 80070f6:	f340 80ac 	ble.w	8007252 <_scanf_float+0x22e>
 80070fa:	6833      	ldr	r3, [r6, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	6033      	str	r3, [r6, #0]
 8007100:	e7b5      	b.n	800706e <_scanf_float+0x4a>
 8007102:	2b45      	cmp	r3, #69	; 0x45
 8007104:	f000 8085 	beq.w	8007212 <_scanf_float+0x1ee>
 8007108:	2b46      	cmp	r3, #70	; 0x46
 800710a:	d06a      	beq.n	80071e2 <_scanf_float+0x1be>
 800710c:	2b41      	cmp	r3, #65	; 0x41
 800710e:	d1c1      	bne.n	8007094 <_scanf_float+0x70>
 8007110:	2a01      	cmp	r2, #1
 8007112:	d1bf      	bne.n	8007094 <_scanf_float+0x70>
 8007114:	2202      	movs	r2, #2
 8007116:	e046      	b.n	80071a6 <_scanf_float+0x182>
 8007118:	2b65      	cmp	r3, #101	; 0x65
 800711a:	d07a      	beq.n	8007212 <_scanf_float+0x1ee>
 800711c:	d818      	bhi.n	8007150 <_scanf_float+0x12c>
 800711e:	2b54      	cmp	r3, #84	; 0x54
 8007120:	d066      	beq.n	80071f0 <_scanf_float+0x1cc>
 8007122:	d811      	bhi.n	8007148 <_scanf_float+0x124>
 8007124:	2b4e      	cmp	r3, #78	; 0x4e
 8007126:	d1b5      	bne.n	8007094 <_scanf_float+0x70>
 8007128:	2a00      	cmp	r2, #0
 800712a:	d146      	bne.n	80071ba <_scanf_float+0x196>
 800712c:	f1b9 0f00 	cmp.w	r9, #0
 8007130:	d145      	bne.n	80071be <_scanf_float+0x19a>
 8007132:	6821      	ldr	r1, [r4, #0]
 8007134:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007138:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800713c:	d13f      	bne.n	80071be <_scanf_float+0x19a>
 800713e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007142:	6021      	str	r1, [r4, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	e02e      	b.n	80071a6 <_scanf_float+0x182>
 8007148:	2b59      	cmp	r3, #89	; 0x59
 800714a:	d01e      	beq.n	800718a <_scanf_float+0x166>
 800714c:	2b61      	cmp	r3, #97	; 0x61
 800714e:	e7de      	b.n	800710e <_scanf_float+0xea>
 8007150:	2b6e      	cmp	r3, #110	; 0x6e
 8007152:	d0e9      	beq.n	8007128 <_scanf_float+0x104>
 8007154:	d815      	bhi.n	8007182 <_scanf_float+0x15e>
 8007156:	2b66      	cmp	r3, #102	; 0x66
 8007158:	d043      	beq.n	80071e2 <_scanf_float+0x1be>
 800715a:	2b69      	cmp	r3, #105	; 0x69
 800715c:	d19a      	bne.n	8007094 <_scanf_float+0x70>
 800715e:	f1bb 0f00 	cmp.w	fp, #0
 8007162:	d138      	bne.n	80071d6 <_scanf_float+0x1b2>
 8007164:	f1b9 0f00 	cmp.w	r9, #0
 8007168:	d197      	bne.n	800709a <_scanf_float+0x76>
 800716a:	6821      	ldr	r1, [r4, #0]
 800716c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007170:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007174:	d195      	bne.n	80070a2 <_scanf_float+0x7e>
 8007176:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800717a:	6021      	str	r1, [r4, #0]
 800717c:	f04f 0b01 	mov.w	fp, #1
 8007180:	e011      	b.n	80071a6 <_scanf_float+0x182>
 8007182:	2b74      	cmp	r3, #116	; 0x74
 8007184:	d034      	beq.n	80071f0 <_scanf_float+0x1cc>
 8007186:	2b79      	cmp	r3, #121	; 0x79
 8007188:	d184      	bne.n	8007094 <_scanf_float+0x70>
 800718a:	f1bb 0f07 	cmp.w	fp, #7
 800718e:	d181      	bne.n	8007094 <_scanf_float+0x70>
 8007190:	f04f 0b08 	mov.w	fp, #8
 8007194:	e007      	b.n	80071a6 <_scanf_float+0x182>
 8007196:	eb12 0f0b 	cmn.w	r2, fp
 800719a:	f47f af7b 	bne.w	8007094 <_scanf_float+0x70>
 800719e:	6821      	ldr	r1, [r4, #0]
 80071a0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80071a4:	6021      	str	r1, [r4, #0]
 80071a6:	702b      	strb	r3, [r5, #0]
 80071a8:	3501      	adds	r5, #1
 80071aa:	e79a      	b.n	80070e2 <_scanf_float+0xbe>
 80071ac:	6821      	ldr	r1, [r4, #0]
 80071ae:	0608      	lsls	r0, r1, #24
 80071b0:	f57f af70 	bpl.w	8007094 <_scanf_float+0x70>
 80071b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80071b8:	e7f4      	b.n	80071a4 <_scanf_float+0x180>
 80071ba:	2a02      	cmp	r2, #2
 80071bc:	d047      	beq.n	800724e <_scanf_float+0x22a>
 80071be:	f1bb 0f01 	cmp.w	fp, #1
 80071c2:	d003      	beq.n	80071cc <_scanf_float+0x1a8>
 80071c4:	f1bb 0f04 	cmp.w	fp, #4
 80071c8:	f47f af64 	bne.w	8007094 <_scanf_float+0x70>
 80071cc:	f10b 0b01 	add.w	fp, fp, #1
 80071d0:	fa5f fb8b 	uxtb.w	fp, fp
 80071d4:	e7e7      	b.n	80071a6 <_scanf_float+0x182>
 80071d6:	f1bb 0f03 	cmp.w	fp, #3
 80071da:	d0f7      	beq.n	80071cc <_scanf_float+0x1a8>
 80071dc:	f1bb 0f05 	cmp.w	fp, #5
 80071e0:	e7f2      	b.n	80071c8 <_scanf_float+0x1a4>
 80071e2:	f1bb 0f02 	cmp.w	fp, #2
 80071e6:	f47f af55 	bne.w	8007094 <_scanf_float+0x70>
 80071ea:	f04f 0b03 	mov.w	fp, #3
 80071ee:	e7da      	b.n	80071a6 <_scanf_float+0x182>
 80071f0:	f1bb 0f06 	cmp.w	fp, #6
 80071f4:	f47f af4e 	bne.w	8007094 <_scanf_float+0x70>
 80071f8:	f04f 0b07 	mov.w	fp, #7
 80071fc:	e7d3      	b.n	80071a6 <_scanf_float+0x182>
 80071fe:	6821      	ldr	r1, [r4, #0]
 8007200:	0588      	lsls	r0, r1, #22
 8007202:	f57f af47 	bpl.w	8007094 <_scanf_float+0x70>
 8007206:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800720a:	6021      	str	r1, [r4, #0]
 800720c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007210:	e7c9      	b.n	80071a6 <_scanf_float+0x182>
 8007212:	6821      	ldr	r1, [r4, #0]
 8007214:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007218:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800721c:	d006      	beq.n	800722c <_scanf_float+0x208>
 800721e:	0548      	lsls	r0, r1, #21
 8007220:	f57f af38 	bpl.w	8007094 <_scanf_float+0x70>
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	f43f af3b 	beq.w	80070a2 <_scanf_float+0x7e>
 800722c:	0588      	lsls	r0, r1, #22
 800722e:	bf58      	it	pl
 8007230:	9802      	ldrpl	r0, [sp, #8]
 8007232:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007236:	bf58      	it	pl
 8007238:	eba9 0000 	subpl.w	r0, r9, r0
 800723c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007240:	bf58      	it	pl
 8007242:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007246:	6021      	str	r1, [r4, #0]
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	e7ab      	b.n	80071a6 <_scanf_float+0x182>
 800724e:	2203      	movs	r2, #3
 8007250:	e7a9      	b.n	80071a6 <_scanf_float+0x182>
 8007252:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007256:	9205      	str	r2, [sp, #20]
 8007258:	4631      	mov	r1, r6
 800725a:	4638      	mov	r0, r7
 800725c:	4798      	blx	r3
 800725e:	9a05      	ldr	r2, [sp, #20]
 8007260:	2800      	cmp	r0, #0
 8007262:	f43f af04 	beq.w	800706e <_scanf_float+0x4a>
 8007266:	e715      	b.n	8007094 <_scanf_float+0x70>
 8007268:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800726c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007270:	4632      	mov	r2, r6
 8007272:	4638      	mov	r0, r7
 8007274:	4798      	blx	r3
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	3b01      	subs	r3, #1
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	e715      	b.n	80070aa <_scanf_float+0x86>
 800727e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007282:	2b06      	cmp	r3, #6
 8007284:	d80a      	bhi.n	800729c <_scanf_float+0x278>
 8007286:	f1bb 0f02 	cmp.w	fp, #2
 800728a:	d968      	bls.n	800735e <_scanf_float+0x33a>
 800728c:	f1ab 0b03 	sub.w	fp, fp, #3
 8007290:	fa5f fb8b 	uxtb.w	fp, fp
 8007294:	eba5 0b0b 	sub.w	fp, r5, fp
 8007298:	455d      	cmp	r5, fp
 800729a:	d14b      	bne.n	8007334 <_scanf_float+0x310>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	05da      	lsls	r2, r3, #23
 80072a0:	d51f      	bpl.n	80072e2 <_scanf_float+0x2be>
 80072a2:	055b      	lsls	r3, r3, #21
 80072a4:	d468      	bmi.n	8007378 <_scanf_float+0x354>
 80072a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	2965      	cmp	r1, #101	; 0x65
 80072ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80072b2:	f105 3bff 	add.w	fp, r5, #4294967295
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	d00d      	beq.n	80072d6 <_scanf_float+0x2b2>
 80072ba:	2945      	cmp	r1, #69	; 0x45
 80072bc:	d00b      	beq.n	80072d6 <_scanf_float+0x2b2>
 80072be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072c2:	4632      	mov	r2, r6
 80072c4:	4638      	mov	r0, r7
 80072c6:	4798      	blx	r3
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	f1a5 0b02 	sub.w	fp, r5, #2
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072da:	4632      	mov	r2, r6
 80072dc:	4638      	mov	r0, r7
 80072de:	4798      	blx	r3
 80072e0:	465d      	mov	r5, fp
 80072e2:	6826      	ldr	r6, [r4, #0]
 80072e4:	f016 0610 	ands.w	r6, r6, #16
 80072e8:	d17a      	bne.n	80073e0 <_scanf_float+0x3bc>
 80072ea:	702e      	strb	r6, [r5, #0]
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f6:	d142      	bne.n	800737e <_scanf_float+0x35a>
 80072f8:	9b02      	ldr	r3, [sp, #8]
 80072fa:	eba9 0303 	sub.w	r3, r9, r3
 80072fe:	425a      	negs	r2, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d149      	bne.n	8007398 <_scanf_float+0x374>
 8007304:	2200      	movs	r2, #0
 8007306:	4641      	mov	r1, r8
 8007308:	4638      	mov	r0, r7
 800730a:	f000 ff21 	bl	8008150 <_strtod_r>
 800730e:	6825      	ldr	r5, [r4, #0]
 8007310:	f8da 3000 	ldr.w	r3, [sl]
 8007314:	f015 0f02 	tst.w	r5, #2
 8007318:	f103 0204 	add.w	r2, r3, #4
 800731c:	ec59 8b10 	vmov	r8, r9, d0
 8007320:	f8ca 2000 	str.w	r2, [sl]
 8007324:	d043      	beq.n	80073ae <_scanf_float+0x38a>
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	e9c3 8900 	strd	r8, r9, [r3]
 800732c:	68e3      	ldr	r3, [r4, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60e3      	str	r3, [r4, #12]
 8007332:	e6be      	b.n	80070b2 <_scanf_float+0x8e>
 8007334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007338:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800733c:	4632      	mov	r2, r6
 800733e:	4638      	mov	r0, r7
 8007340:	4798      	blx	r3
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	3b01      	subs	r3, #1
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	e7a6      	b.n	8007298 <_scanf_float+0x274>
 800734a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800734e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007352:	4632      	mov	r2, r6
 8007354:	4638      	mov	r0, r7
 8007356:	4798      	blx	r3
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	3b01      	subs	r3, #1
 800735c:	6123      	str	r3, [r4, #16]
 800735e:	4545      	cmp	r5, r8
 8007360:	d8f3      	bhi.n	800734a <_scanf_float+0x326>
 8007362:	e6a5      	b.n	80070b0 <_scanf_float+0x8c>
 8007364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007368:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800736c:	4632      	mov	r2, r6
 800736e:	4638      	mov	r0, r7
 8007370:	4798      	blx	r3
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	3b01      	subs	r3, #1
 8007376:	6123      	str	r3, [r4, #16]
 8007378:	4545      	cmp	r5, r8
 800737a:	d8f3      	bhi.n	8007364 <_scanf_float+0x340>
 800737c:	e698      	b.n	80070b0 <_scanf_float+0x8c>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0bf      	beq.n	8007304 <_scanf_float+0x2e0>
 8007384:	9904      	ldr	r1, [sp, #16]
 8007386:	230a      	movs	r3, #10
 8007388:	4632      	mov	r2, r6
 800738a:	3101      	adds	r1, #1
 800738c:	4638      	mov	r0, r7
 800738e:	f000 ff6b 	bl	8008268 <_strtol_r>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	9d04      	ldr	r5, [sp, #16]
 8007396:	1ac2      	subs	r2, r0, r3
 8007398:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800739c:	429d      	cmp	r5, r3
 800739e:	bf28      	it	cs
 80073a0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80073a4:	490f      	ldr	r1, [pc, #60]	; (80073e4 <_scanf_float+0x3c0>)
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 f8a0 	bl	80074ec <siprintf>
 80073ac:	e7aa      	b.n	8007304 <_scanf_float+0x2e0>
 80073ae:	f015 0504 	ands.w	r5, r5, #4
 80073b2:	d1b8      	bne.n	8007326 <_scanf_float+0x302>
 80073b4:	681f      	ldr	r7, [r3, #0]
 80073b6:	ee10 2a10 	vmov	r2, s0
 80073ba:	464b      	mov	r3, r9
 80073bc:	ee10 0a10 	vmov	r0, s0
 80073c0:	4649      	mov	r1, r9
 80073c2:	f7f9 fbb3 	bl	8000b2c <__aeabi_dcmpun>
 80073c6:	b128      	cbz	r0, 80073d4 <_scanf_float+0x3b0>
 80073c8:	4628      	mov	r0, r5
 80073ca:	f000 f889 	bl	80074e0 <nanf>
 80073ce:	ed87 0a00 	vstr	s0, [r7]
 80073d2:	e7ab      	b.n	800732c <_scanf_float+0x308>
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f7f9 fc06 	bl	8000be8 <__aeabi_d2f>
 80073dc:	6038      	str	r0, [r7, #0]
 80073de:	e7a5      	b.n	800732c <_scanf_float+0x308>
 80073e0:	2600      	movs	r6, #0
 80073e2:	e666      	b.n	80070b2 <_scanf_float+0x8e>
 80073e4:	0800ad54 	.word	0x0800ad54

080073e8 <iprintf>:
 80073e8:	b40f      	push	{r0, r1, r2, r3}
 80073ea:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <iprintf+0x2c>)
 80073ec:	b513      	push	{r0, r1, r4, lr}
 80073ee:	681c      	ldr	r4, [r3, #0]
 80073f0:	b124      	cbz	r4, 80073fc <iprintf+0x14>
 80073f2:	69a3      	ldr	r3, [r4, #24]
 80073f4:	b913      	cbnz	r3, 80073fc <iprintf+0x14>
 80073f6:	4620      	mov	r0, r4
 80073f8:	f001 ff3e 	bl	8009278 <__sinit>
 80073fc:	ab05      	add	r3, sp, #20
 80073fe:	9a04      	ldr	r2, [sp, #16]
 8007400:	68a1      	ldr	r1, [r4, #8]
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	4620      	mov	r0, r4
 8007406:	f003 f9b5 	bl	800a774 <_vfiprintf_r>
 800740a:	b002      	add	sp, #8
 800740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007410:	b004      	add	sp, #16
 8007412:	4770      	bx	lr
 8007414:	20000010 	.word	0x20000010

08007418 <_puts_r>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	460e      	mov	r6, r1
 800741c:	4605      	mov	r5, r0
 800741e:	b118      	cbz	r0, 8007428 <_puts_r+0x10>
 8007420:	6983      	ldr	r3, [r0, #24]
 8007422:	b90b      	cbnz	r3, 8007428 <_puts_r+0x10>
 8007424:	f001 ff28 	bl	8009278 <__sinit>
 8007428:	69ab      	ldr	r3, [r5, #24]
 800742a:	68ac      	ldr	r4, [r5, #8]
 800742c:	b913      	cbnz	r3, 8007434 <_puts_r+0x1c>
 800742e:	4628      	mov	r0, r5
 8007430:	f001 ff22 	bl	8009278 <__sinit>
 8007434:	4b23      	ldr	r3, [pc, #140]	; (80074c4 <_puts_r+0xac>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d117      	bne.n	800746a <_puts_r+0x52>
 800743a:	686c      	ldr	r4, [r5, #4]
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	071b      	lsls	r3, r3, #28
 8007440:	d51d      	bpl.n	800747e <_puts_r+0x66>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	b1db      	cbz	r3, 800747e <_puts_r+0x66>
 8007446:	3e01      	subs	r6, #1
 8007448:	68a3      	ldr	r3, [r4, #8]
 800744a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800744e:	3b01      	subs	r3, #1
 8007450:	60a3      	str	r3, [r4, #8]
 8007452:	b9e9      	cbnz	r1, 8007490 <_puts_r+0x78>
 8007454:	2b00      	cmp	r3, #0
 8007456:	da2e      	bge.n	80074b6 <_puts_r+0x9e>
 8007458:	4622      	mov	r2, r4
 800745a:	210a      	movs	r1, #10
 800745c:	4628      	mov	r0, r5
 800745e:	f000 ff15 	bl	800828c <__swbuf_r>
 8007462:	3001      	adds	r0, #1
 8007464:	d011      	beq.n	800748a <_puts_r+0x72>
 8007466:	200a      	movs	r0, #10
 8007468:	e011      	b.n	800748e <_puts_r+0x76>
 800746a:	4b17      	ldr	r3, [pc, #92]	; (80074c8 <_puts_r+0xb0>)
 800746c:	429c      	cmp	r4, r3
 800746e:	d101      	bne.n	8007474 <_puts_r+0x5c>
 8007470:	68ac      	ldr	r4, [r5, #8]
 8007472:	e7e3      	b.n	800743c <_puts_r+0x24>
 8007474:	4b15      	ldr	r3, [pc, #84]	; (80074cc <_puts_r+0xb4>)
 8007476:	429c      	cmp	r4, r3
 8007478:	bf08      	it	eq
 800747a:	68ec      	ldreq	r4, [r5, #12]
 800747c:	e7de      	b.n	800743c <_puts_r+0x24>
 800747e:	4621      	mov	r1, r4
 8007480:	4628      	mov	r0, r5
 8007482:	f000 ff55 	bl	8008330 <__swsetup_r>
 8007486:	2800      	cmp	r0, #0
 8007488:	d0dd      	beq.n	8007446 <_puts_r+0x2e>
 800748a:	f04f 30ff 	mov.w	r0, #4294967295
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	2b00      	cmp	r3, #0
 8007492:	da04      	bge.n	800749e <_puts_r+0x86>
 8007494:	69a2      	ldr	r2, [r4, #24]
 8007496:	429a      	cmp	r2, r3
 8007498:	dc06      	bgt.n	80074a8 <_puts_r+0x90>
 800749a:	290a      	cmp	r1, #10
 800749c:	d004      	beq.n	80074a8 <_puts_r+0x90>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	6022      	str	r2, [r4, #0]
 80074a4:	7019      	strb	r1, [r3, #0]
 80074a6:	e7cf      	b.n	8007448 <_puts_r+0x30>
 80074a8:	4622      	mov	r2, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 feee 	bl	800828c <__swbuf_r>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d1c9      	bne.n	8007448 <_puts_r+0x30>
 80074b4:	e7e9      	b.n	800748a <_puts_r+0x72>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	200a      	movs	r0, #10
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	6022      	str	r2, [r4, #0]
 80074be:	7018      	strb	r0, [r3, #0]
 80074c0:	e7e5      	b.n	800748e <_puts_r+0x76>
 80074c2:	bf00      	nop
 80074c4:	0800ade0 	.word	0x0800ade0
 80074c8:	0800ae00 	.word	0x0800ae00
 80074cc:	0800adc0 	.word	0x0800adc0

080074d0 <puts>:
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <puts+0xc>)
 80074d2:	4601      	mov	r1, r0
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f7ff bf9f 	b.w	8007418 <_puts_r>
 80074da:	bf00      	nop
 80074dc:	20000010 	.word	0x20000010

080074e0 <nanf>:
 80074e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80074e8 <nanf+0x8>
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	7fc00000 	.word	0x7fc00000

080074ec <siprintf>:
 80074ec:	b40e      	push	{r1, r2, r3}
 80074ee:	b500      	push	{lr}
 80074f0:	b09c      	sub	sp, #112	; 0x70
 80074f2:	ab1d      	add	r3, sp, #116	; 0x74
 80074f4:	9002      	str	r0, [sp, #8]
 80074f6:	9006      	str	r0, [sp, #24]
 80074f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074fc:	4809      	ldr	r0, [pc, #36]	; (8007524 <siprintf+0x38>)
 80074fe:	9107      	str	r1, [sp, #28]
 8007500:	9104      	str	r1, [sp, #16]
 8007502:	4909      	ldr	r1, [pc, #36]	; (8007528 <siprintf+0x3c>)
 8007504:	f853 2b04 	ldr.w	r2, [r3], #4
 8007508:	9105      	str	r1, [sp, #20]
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	a902      	add	r1, sp, #8
 8007510:	f003 f80e 	bl	800a530 <_svfiprintf_r>
 8007514:	9b02      	ldr	r3, [sp, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	b01c      	add	sp, #112	; 0x70
 800751c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007520:	b003      	add	sp, #12
 8007522:	4770      	bx	lr
 8007524:	20000010 	.word	0x20000010
 8007528:	ffff0208 	.word	0xffff0208

0800752c <sulp>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	4604      	mov	r4, r0
 8007530:	460d      	mov	r5, r1
 8007532:	ec45 4b10 	vmov	d0, r4, r5
 8007536:	4616      	mov	r6, r2
 8007538:	f002 fdb6 	bl	800a0a8 <__ulp>
 800753c:	ec51 0b10 	vmov	r0, r1, d0
 8007540:	b17e      	cbz	r6, 8007562 <sulp+0x36>
 8007542:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007546:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800754a:	2b00      	cmp	r3, #0
 800754c:	dd09      	ble.n	8007562 <sulp+0x36>
 800754e:	051b      	lsls	r3, r3, #20
 8007550:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007554:	2400      	movs	r4, #0
 8007556:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800755a:	4622      	mov	r2, r4
 800755c:	462b      	mov	r3, r5
 800755e:	f7f9 f84b 	bl	80005f8 <__aeabi_dmul>
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	0000      	movs	r0, r0
	...

08007568 <_strtod_l>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	461f      	mov	r7, r3
 800756e:	b0a1      	sub	sp, #132	; 0x84
 8007570:	2300      	movs	r3, #0
 8007572:	4681      	mov	r9, r0
 8007574:	4638      	mov	r0, r7
 8007576:	460e      	mov	r6, r1
 8007578:	9217      	str	r2, [sp, #92]	; 0x5c
 800757a:	931c      	str	r3, [sp, #112]	; 0x70
 800757c:	f002 fa2f 	bl	80099de <__localeconv_l>
 8007580:	4680      	mov	r8, r0
 8007582:	6800      	ldr	r0, [r0, #0]
 8007584:	f7f8 fe24 	bl	80001d0 <strlen>
 8007588:	f04f 0a00 	mov.w	sl, #0
 800758c:	4604      	mov	r4, r0
 800758e:	f04f 0b00 	mov.w	fp, #0
 8007592:	961b      	str	r6, [sp, #108]	; 0x6c
 8007594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	2a0d      	cmp	r2, #13
 800759a:	d832      	bhi.n	8007602 <_strtod_l+0x9a>
 800759c:	2a09      	cmp	r2, #9
 800759e:	d236      	bcs.n	800760e <_strtod_l+0xa6>
 80075a0:	2a00      	cmp	r2, #0
 80075a2:	d03e      	beq.n	8007622 <_strtod_l+0xba>
 80075a4:	2300      	movs	r3, #0
 80075a6:	930d      	str	r3, [sp, #52]	; 0x34
 80075a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80075aa:	782b      	ldrb	r3, [r5, #0]
 80075ac:	2b30      	cmp	r3, #48	; 0x30
 80075ae:	f040 80ac 	bne.w	800770a <_strtod_l+0x1a2>
 80075b2:	786b      	ldrb	r3, [r5, #1]
 80075b4:	2b58      	cmp	r3, #88	; 0x58
 80075b6:	d001      	beq.n	80075bc <_strtod_l+0x54>
 80075b8:	2b78      	cmp	r3, #120	; 0x78
 80075ba:	d167      	bne.n	800768c <_strtod_l+0x124>
 80075bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	ab1c      	add	r3, sp, #112	; 0x70
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	9702      	str	r7, [sp, #8]
 80075c6:	ab1d      	add	r3, sp, #116	; 0x74
 80075c8:	4a88      	ldr	r2, [pc, #544]	; (80077ec <_strtod_l+0x284>)
 80075ca:	a91b      	add	r1, sp, #108	; 0x6c
 80075cc:	4648      	mov	r0, r9
 80075ce:	f001 ff2c 	bl	800942a <__gethex>
 80075d2:	f010 0407 	ands.w	r4, r0, #7
 80075d6:	4606      	mov	r6, r0
 80075d8:	d005      	beq.n	80075e6 <_strtod_l+0x7e>
 80075da:	2c06      	cmp	r4, #6
 80075dc:	d12b      	bne.n	8007636 <_strtod_l+0xce>
 80075de:	3501      	adds	r5, #1
 80075e0:	2300      	movs	r3, #0
 80075e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80075e4:	930d      	str	r3, [sp, #52]	; 0x34
 80075e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 859a 	bne.w	8008122 <_strtod_l+0xbba>
 80075ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f0:	b1e3      	cbz	r3, 800762c <_strtod_l+0xc4>
 80075f2:	4652      	mov	r2, sl
 80075f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075f8:	ec43 2b10 	vmov	d0, r2, r3
 80075fc:	b021      	add	sp, #132	; 0x84
 80075fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007602:	2a2b      	cmp	r2, #43	; 0x2b
 8007604:	d015      	beq.n	8007632 <_strtod_l+0xca>
 8007606:	2a2d      	cmp	r2, #45	; 0x2d
 8007608:	d004      	beq.n	8007614 <_strtod_l+0xac>
 800760a:	2a20      	cmp	r2, #32
 800760c:	d1ca      	bne.n	80075a4 <_strtod_l+0x3c>
 800760e:	3301      	adds	r3, #1
 8007610:	931b      	str	r3, [sp, #108]	; 0x6c
 8007612:	e7bf      	b.n	8007594 <_strtod_l+0x2c>
 8007614:	2201      	movs	r2, #1
 8007616:	920d      	str	r2, [sp, #52]	; 0x34
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	921b      	str	r2, [sp, #108]	; 0x6c
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1c2      	bne.n	80075a8 <_strtod_l+0x40>
 8007622:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007624:	961b      	str	r6, [sp, #108]	; 0x6c
 8007626:	2b00      	cmp	r3, #0
 8007628:	f040 8579 	bne.w	800811e <_strtod_l+0xbb6>
 800762c:	4652      	mov	r2, sl
 800762e:	465b      	mov	r3, fp
 8007630:	e7e2      	b.n	80075f8 <_strtod_l+0x90>
 8007632:	2200      	movs	r2, #0
 8007634:	e7ef      	b.n	8007616 <_strtod_l+0xae>
 8007636:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007638:	b13a      	cbz	r2, 800764a <_strtod_l+0xe2>
 800763a:	2135      	movs	r1, #53	; 0x35
 800763c:	a81e      	add	r0, sp, #120	; 0x78
 800763e:	f002 fe2b 	bl	800a298 <__copybits>
 8007642:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007644:	4648      	mov	r0, r9
 8007646:	f002 fa98 	bl	8009b7a <_Bfree>
 800764a:	3c01      	subs	r4, #1
 800764c:	2c04      	cmp	r4, #4
 800764e:	d806      	bhi.n	800765e <_strtod_l+0xf6>
 8007650:	e8df f004 	tbb	[pc, r4]
 8007654:	1714030a 	.word	0x1714030a
 8007658:	0a          	.byte	0x0a
 8007659:	00          	.byte	0x00
 800765a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800765e:	0730      	lsls	r0, r6, #28
 8007660:	d5c1      	bpl.n	80075e6 <_strtod_l+0x7e>
 8007662:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007666:	e7be      	b.n	80075e6 <_strtod_l+0x7e>
 8007668:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800766c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800766e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007672:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007676:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800767a:	e7f0      	b.n	800765e <_strtod_l+0xf6>
 800767c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80077f0 <_strtod_l+0x288>
 8007680:	e7ed      	b.n	800765e <_strtod_l+0xf6>
 8007682:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007686:	f04f 3aff 	mov.w	sl, #4294967295
 800768a:	e7e8      	b.n	800765e <_strtod_l+0xf6>
 800768c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	921b      	str	r2, [sp, #108]	; 0x6c
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	2b30      	cmp	r3, #48	; 0x30
 8007696:	d0f9      	beq.n	800768c <_strtod_l+0x124>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0a4      	beq.n	80075e6 <_strtod_l+0x7e>
 800769c:	2301      	movs	r3, #1
 800769e:	2500      	movs	r5, #0
 80076a0:	9306      	str	r3, [sp, #24]
 80076a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076a4:	9308      	str	r3, [sp, #32]
 80076a6:	9507      	str	r5, [sp, #28]
 80076a8:	9505      	str	r5, [sp, #20]
 80076aa:	220a      	movs	r2, #10
 80076ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80076ae:	7807      	ldrb	r7, [r0, #0]
 80076b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80076b4:	b2d9      	uxtb	r1, r3
 80076b6:	2909      	cmp	r1, #9
 80076b8:	d929      	bls.n	800770e <_strtod_l+0x1a6>
 80076ba:	4622      	mov	r2, r4
 80076bc:	f8d8 1000 	ldr.w	r1, [r8]
 80076c0:	f003 f9c1 	bl	800aa46 <strncmp>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d031      	beq.n	800772c <_strtod_l+0x1c4>
 80076c8:	2000      	movs	r0, #0
 80076ca:	9c05      	ldr	r4, [sp, #20]
 80076cc:	9004      	str	r0, [sp, #16]
 80076ce:	463b      	mov	r3, r7
 80076d0:	4602      	mov	r2, r0
 80076d2:	2b65      	cmp	r3, #101	; 0x65
 80076d4:	d001      	beq.n	80076da <_strtod_l+0x172>
 80076d6:	2b45      	cmp	r3, #69	; 0x45
 80076d8:	d114      	bne.n	8007704 <_strtod_l+0x19c>
 80076da:	b924      	cbnz	r4, 80076e6 <_strtod_l+0x17e>
 80076dc:	b910      	cbnz	r0, 80076e4 <_strtod_l+0x17c>
 80076de:	9b06      	ldr	r3, [sp, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d09e      	beq.n	8007622 <_strtod_l+0xba>
 80076e4:	2400      	movs	r4, #0
 80076e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80076e8:	1c73      	adds	r3, r6, #1
 80076ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80076ec:	7873      	ldrb	r3, [r6, #1]
 80076ee:	2b2b      	cmp	r3, #43	; 0x2b
 80076f0:	d078      	beq.n	80077e4 <_strtod_l+0x27c>
 80076f2:	2b2d      	cmp	r3, #45	; 0x2d
 80076f4:	d070      	beq.n	80077d8 <_strtod_l+0x270>
 80076f6:	f04f 0c00 	mov.w	ip, #0
 80076fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80076fe:	2f09      	cmp	r7, #9
 8007700:	d97c      	bls.n	80077fc <_strtod_l+0x294>
 8007702:	961b      	str	r6, [sp, #108]	; 0x6c
 8007704:	f04f 0e00 	mov.w	lr, #0
 8007708:	e09a      	b.n	8007840 <_strtod_l+0x2d8>
 800770a:	2300      	movs	r3, #0
 800770c:	e7c7      	b.n	800769e <_strtod_l+0x136>
 800770e:	9905      	ldr	r1, [sp, #20]
 8007710:	2908      	cmp	r1, #8
 8007712:	bfdd      	ittte	le
 8007714:	9907      	ldrle	r1, [sp, #28]
 8007716:	fb02 3301 	mlale	r3, r2, r1, r3
 800771a:	9307      	strle	r3, [sp, #28]
 800771c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007720:	9b05      	ldr	r3, [sp, #20]
 8007722:	3001      	adds	r0, #1
 8007724:	3301      	adds	r3, #1
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	901b      	str	r0, [sp, #108]	; 0x6c
 800772a:	e7bf      	b.n	80076ac <_strtod_l+0x144>
 800772c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800772e:	191a      	adds	r2, r3, r4
 8007730:	921b      	str	r2, [sp, #108]	; 0x6c
 8007732:	9a05      	ldr	r2, [sp, #20]
 8007734:	5d1b      	ldrb	r3, [r3, r4]
 8007736:	2a00      	cmp	r2, #0
 8007738:	d037      	beq.n	80077aa <_strtod_l+0x242>
 800773a:	9c05      	ldr	r4, [sp, #20]
 800773c:	4602      	mov	r2, r0
 800773e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007742:	2909      	cmp	r1, #9
 8007744:	d913      	bls.n	800776e <_strtod_l+0x206>
 8007746:	2101      	movs	r1, #1
 8007748:	9104      	str	r1, [sp, #16]
 800774a:	e7c2      	b.n	80076d2 <_strtod_l+0x16a>
 800774c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	921b      	str	r2, [sp, #108]	; 0x6c
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	3001      	adds	r0, #1
 8007756:	2b30      	cmp	r3, #48	; 0x30
 8007758:	d0f8      	beq.n	800774c <_strtod_l+0x1e4>
 800775a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800775e:	2a08      	cmp	r2, #8
 8007760:	f200 84e4 	bhi.w	800812c <_strtod_l+0xbc4>
 8007764:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007766:	9208      	str	r2, [sp, #32]
 8007768:	4602      	mov	r2, r0
 800776a:	2000      	movs	r0, #0
 800776c:	4604      	mov	r4, r0
 800776e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007772:	f100 0101 	add.w	r1, r0, #1
 8007776:	d012      	beq.n	800779e <_strtod_l+0x236>
 8007778:	440a      	add	r2, r1
 800777a:	eb00 0c04 	add.w	ip, r0, r4
 800777e:	4621      	mov	r1, r4
 8007780:	270a      	movs	r7, #10
 8007782:	458c      	cmp	ip, r1
 8007784:	d113      	bne.n	80077ae <_strtod_l+0x246>
 8007786:	1821      	adds	r1, r4, r0
 8007788:	2908      	cmp	r1, #8
 800778a:	f104 0401 	add.w	r4, r4, #1
 800778e:	4404      	add	r4, r0
 8007790:	dc19      	bgt.n	80077c6 <_strtod_l+0x25e>
 8007792:	9b07      	ldr	r3, [sp, #28]
 8007794:	210a      	movs	r1, #10
 8007796:	fb01 e303 	mla	r3, r1, r3, lr
 800779a:	9307      	str	r3, [sp, #28]
 800779c:	2100      	movs	r1, #0
 800779e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077a0:	1c58      	adds	r0, r3, #1
 80077a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	4608      	mov	r0, r1
 80077a8:	e7c9      	b.n	800773e <_strtod_l+0x1d6>
 80077aa:	9805      	ldr	r0, [sp, #20]
 80077ac:	e7d3      	b.n	8007756 <_strtod_l+0x1ee>
 80077ae:	2908      	cmp	r1, #8
 80077b0:	f101 0101 	add.w	r1, r1, #1
 80077b4:	dc03      	bgt.n	80077be <_strtod_l+0x256>
 80077b6:	9b07      	ldr	r3, [sp, #28]
 80077b8:	437b      	muls	r3, r7
 80077ba:	9307      	str	r3, [sp, #28]
 80077bc:	e7e1      	b.n	8007782 <_strtod_l+0x21a>
 80077be:	2910      	cmp	r1, #16
 80077c0:	bfd8      	it	le
 80077c2:	437d      	mulle	r5, r7
 80077c4:	e7dd      	b.n	8007782 <_strtod_l+0x21a>
 80077c6:	2c10      	cmp	r4, #16
 80077c8:	bfdc      	itt	le
 80077ca:	210a      	movle	r1, #10
 80077cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80077d0:	e7e4      	b.n	800779c <_strtod_l+0x234>
 80077d2:	2301      	movs	r3, #1
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	e781      	b.n	80076dc <_strtod_l+0x174>
 80077d8:	f04f 0c01 	mov.w	ip, #1
 80077dc:	1cb3      	adds	r3, r6, #2
 80077de:	931b      	str	r3, [sp, #108]	; 0x6c
 80077e0:	78b3      	ldrb	r3, [r6, #2]
 80077e2:	e78a      	b.n	80076fa <_strtod_l+0x192>
 80077e4:	f04f 0c00 	mov.w	ip, #0
 80077e8:	e7f8      	b.n	80077dc <_strtod_l+0x274>
 80077ea:	bf00      	nop
 80077ec:	0800ad5c 	.word	0x0800ad5c
 80077f0:	7ff00000 	.word	0x7ff00000
 80077f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077f6:	1c5f      	adds	r7, r3, #1
 80077f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b30      	cmp	r3, #48	; 0x30
 80077fe:	d0f9      	beq.n	80077f4 <_strtod_l+0x28c>
 8007800:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007804:	2f08      	cmp	r7, #8
 8007806:	f63f af7d 	bhi.w	8007704 <_strtod_l+0x19c>
 800780a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800780e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007810:	930a      	str	r3, [sp, #40]	; 0x28
 8007812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007814:	1c5f      	adds	r7, r3, #1
 8007816:	971b      	str	r7, [sp, #108]	; 0x6c
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800781e:	f1b8 0f09 	cmp.w	r8, #9
 8007822:	d937      	bls.n	8007894 <_strtod_l+0x32c>
 8007824:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007826:	1a7f      	subs	r7, r7, r1
 8007828:	2f08      	cmp	r7, #8
 800782a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800782e:	dc37      	bgt.n	80078a0 <_strtod_l+0x338>
 8007830:	45be      	cmp	lr, r7
 8007832:	bfa8      	it	ge
 8007834:	46be      	movge	lr, r7
 8007836:	f1bc 0f00 	cmp.w	ip, #0
 800783a:	d001      	beq.n	8007840 <_strtod_l+0x2d8>
 800783c:	f1ce 0e00 	rsb	lr, lr, #0
 8007840:	2c00      	cmp	r4, #0
 8007842:	d151      	bne.n	80078e8 <_strtod_l+0x380>
 8007844:	2800      	cmp	r0, #0
 8007846:	f47f aece 	bne.w	80075e6 <_strtod_l+0x7e>
 800784a:	9a06      	ldr	r2, [sp, #24]
 800784c:	2a00      	cmp	r2, #0
 800784e:	f47f aeca 	bne.w	80075e6 <_strtod_l+0x7e>
 8007852:	9a04      	ldr	r2, [sp, #16]
 8007854:	2a00      	cmp	r2, #0
 8007856:	f47f aee4 	bne.w	8007622 <_strtod_l+0xba>
 800785a:	2b4e      	cmp	r3, #78	; 0x4e
 800785c:	d027      	beq.n	80078ae <_strtod_l+0x346>
 800785e:	dc21      	bgt.n	80078a4 <_strtod_l+0x33c>
 8007860:	2b49      	cmp	r3, #73	; 0x49
 8007862:	f47f aede 	bne.w	8007622 <_strtod_l+0xba>
 8007866:	49a0      	ldr	r1, [pc, #640]	; (8007ae8 <_strtod_l+0x580>)
 8007868:	a81b      	add	r0, sp, #108	; 0x6c
 800786a:	f002 f811 	bl	8009890 <__match>
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f aed7 	beq.w	8007622 <_strtod_l+0xba>
 8007874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007876:	499d      	ldr	r1, [pc, #628]	; (8007aec <_strtod_l+0x584>)
 8007878:	3b01      	subs	r3, #1
 800787a:	a81b      	add	r0, sp, #108	; 0x6c
 800787c:	931b      	str	r3, [sp, #108]	; 0x6c
 800787e:	f002 f807 	bl	8009890 <__match>
 8007882:	b910      	cbnz	r0, 800788a <_strtod_l+0x322>
 8007884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007886:	3301      	adds	r3, #1
 8007888:	931b      	str	r3, [sp, #108]	; 0x6c
 800788a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007b00 <_strtod_l+0x598>
 800788e:	f04f 0a00 	mov.w	sl, #0
 8007892:	e6a8      	b.n	80075e6 <_strtod_l+0x7e>
 8007894:	210a      	movs	r1, #10
 8007896:	fb01 3e0e 	mla	lr, r1, lr, r3
 800789a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800789e:	e7b8      	b.n	8007812 <_strtod_l+0x2aa>
 80078a0:	46be      	mov	lr, r7
 80078a2:	e7c8      	b.n	8007836 <_strtod_l+0x2ce>
 80078a4:	2b69      	cmp	r3, #105	; 0x69
 80078a6:	d0de      	beq.n	8007866 <_strtod_l+0x2fe>
 80078a8:	2b6e      	cmp	r3, #110	; 0x6e
 80078aa:	f47f aeba 	bne.w	8007622 <_strtod_l+0xba>
 80078ae:	4990      	ldr	r1, [pc, #576]	; (8007af0 <_strtod_l+0x588>)
 80078b0:	a81b      	add	r0, sp, #108	; 0x6c
 80078b2:	f001 ffed 	bl	8009890 <__match>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f43f aeb3 	beq.w	8007622 <_strtod_l+0xba>
 80078bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b28      	cmp	r3, #40	; 0x28
 80078c2:	d10e      	bne.n	80078e2 <_strtod_l+0x37a>
 80078c4:	aa1e      	add	r2, sp, #120	; 0x78
 80078c6:	498b      	ldr	r1, [pc, #556]	; (8007af4 <_strtod_l+0x58c>)
 80078c8:	a81b      	add	r0, sp, #108	; 0x6c
 80078ca:	f001 fff5 	bl	80098b8 <__hexnan>
 80078ce:	2805      	cmp	r0, #5
 80078d0:	d107      	bne.n	80078e2 <_strtod_l+0x37a>
 80078d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80078d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80078dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80078e0:	e681      	b.n	80075e6 <_strtod_l+0x7e>
 80078e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007b08 <_strtod_l+0x5a0>
 80078e6:	e7d2      	b.n	800788e <_strtod_l+0x326>
 80078e8:	ebae 0302 	sub.w	r3, lr, r2
 80078ec:	9306      	str	r3, [sp, #24]
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	9807      	ldr	r0, [sp, #28]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf08      	it	eq
 80078f6:	4623      	moveq	r3, r4
 80078f8:	2c10      	cmp	r4, #16
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	46a0      	mov	r8, r4
 80078fe:	bfa8      	it	ge
 8007900:	f04f 0810 	movge.w	r8, #16
 8007904:	f7f8 fdfe 	bl	8000504 <__aeabi_ui2d>
 8007908:	2c09      	cmp	r4, #9
 800790a:	4682      	mov	sl, r0
 800790c:	468b      	mov	fp, r1
 800790e:	dc13      	bgt.n	8007938 <_strtod_l+0x3d0>
 8007910:	9b06      	ldr	r3, [sp, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	f43f ae67 	beq.w	80075e6 <_strtod_l+0x7e>
 8007918:	9b06      	ldr	r3, [sp, #24]
 800791a:	dd7a      	ble.n	8007a12 <_strtod_l+0x4aa>
 800791c:	2b16      	cmp	r3, #22
 800791e:	dc61      	bgt.n	80079e4 <_strtod_l+0x47c>
 8007920:	4a75      	ldr	r2, [pc, #468]	; (8007af8 <_strtod_l+0x590>)
 8007922:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007926:	e9de 0100 	ldrd	r0, r1, [lr]
 800792a:	4652      	mov	r2, sl
 800792c:	465b      	mov	r3, fp
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	4682      	mov	sl, r0
 8007934:	468b      	mov	fp, r1
 8007936:	e656      	b.n	80075e6 <_strtod_l+0x7e>
 8007938:	4b6f      	ldr	r3, [pc, #444]	; (8007af8 <_strtod_l+0x590>)
 800793a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800793e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007942:	f7f8 fe59 	bl	80005f8 <__aeabi_dmul>
 8007946:	4606      	mov	r6, r0
 8007948:	4628      	mov	r0, r5
 800794a:	460f      	mov	r7, r1
 800794c:	f7f8 fdda 	bl	8000504 <__aeabi_ui2d>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f8 fc98 	bl	800028c <__adddf3>
 800795c:	2c0f      	cmp	r4, #15
 800795e:	4682      	mov	sl, r0
 8007960:	468b      	mov	fp, r1
 8007962:	ddd5      	ble.n	8007910 <_strtod_l+0x3a8>
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	eba4 0808 	sub.w	r8, r4, r8
 800796a:	4498      	add	r8, r3
 800796c:	f1b8 0f00 	cmp.w	r8, #0
 8007970:	f340 8096 	ble.w	8007aa0 <_strtod_l+0x538>
 8007974:	f018 030f 	ands.w	r3, r8, #15
 8007978:	d00a      	beq.n	8007990 <_strtod_l+0x428>
 800797a:	495f      	ldr	r1, [pc, #380]	; (8007af8 <_strtod_l+0x590>)
 800797c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007980:	4652      	mov	r2, sl
 8007982:	465b      	mov	r3, fp
 8007984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007988:	f7f8 fe36 	bl	80005f8 <__aeabi_dmul>
 800798c:	4682      	mov	sl, r0
 800798e:	468b      	mov	fp, r1
 8007990:	f038 080f 	bics.w	r8, r8, #15
 8007994:	d073      	beq.n	8007a7e <_strtod_l+0x516>
 8007996:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800799a:	dd47      	ble.n	8007a2c <_strtod_l+0x4c4>
 800799c:	2400      	movs	r4, #0
 800799e:	46a0      	mov	r8, r4
 80079a0:	9407      	str	r4, [sp, #28]
 80079a2:	9405      	str	r4, [sp, #20]
 80079a4:	2322      	movs	r3, #34	; 0x22
 80079a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007b00 <_strtod_l+0x598>
 80079aa:	f8c9 3000 	str.w	r3, [r9]
 80079ae:	f04f 0a00 	mov.w	sl, #0
 80079b2:	9b07      	ldr	r3, [sp, #28]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f43f ae16 	beq.w	80075e6 <_strtod_l+0x7e>
 80079ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079bc:	4648      	mov	r0, r9
 80079be:	f002 f8dc 	bl	8009b7a <_Bfree>
 80079c2:	9905      	ldr	r1, [sp, #20]
 80079c4:	4648      	mov	r0, r9
 80079c6:	f002 f8d8 	bl	8009b7a <_Bfree>
 80079ca:	4641      	mov	r1, r8
 80079cc:	4648      	mov	r0, r9
 80079ce:	f002 f8d4 	bl	8009b7a <_Bfree>
 80079d2:	9907      	ldr	r1, [sp, #28]
 80079d4:	4648      	mov	r0, r9
 80079d6:	f002 f8d0 	bl	8009b7a <_Bfree>
 80079da:	4621      	mov	r1, r4
 80079dc:	4648      	mov	r0, r9
 80079de:	f002 f8cc 	bl	8009b7a <_Bfree>
 80079e2:	e600      	b.n	80075e6 <_strtod_l+0x7e>
 80079e4:	9a06      	ldr	r2, [sp, #24]
 80079e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80079ea:	4293      	cmp	r3, r2
 80079ec:	dbba      	blt.n	8007964 <_strtod_l+0x3fc>
 80079ee:	4d42      	ldr	r5, [pc, #264]	; (8007af8 <_strtod_l+0x590>)
 80079f0:	f1c4 040f 	rsb	r4, r4, #15
 80079f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80079f8:	4652      	mov	r2, sl
 80079fa:	465b      	mov	r3, fp
 80079fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a00:	f7f8 fdfa 	bl	80005f8 <__aeabi_dmul>
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	1b1c      	subs	r4, r3, r4
 8007a08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a10:	e78d      	b.n	800792e <_strtod_l+0x3c6>
 8007a12:	f113 0f16 	cmn.w	r3, #22
 8007a16:	dba5      	blt.n	8007964 <_strtod_l+0x3fc>
 8007a18:	4a37      	ldr	r2, [pc, #220]	; (8007af8 <_strtod_l+0x590>)
 8007a1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007a1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007a22:	4650      	mov	r0, sl
 8007a24:	4659      	mov	r1, fp
 8007a26:	f7f8 ff11 	bl	800084c <__aeabi_ddiv>
 8007a2a:	e782      	b.n	8007932 <_strtod_l+0x3ca>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4e33      	ldr	r6, [pc, #204]	; (8007afc <_strtod_l+0x594>)
 8007a30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007a34:	4650      	mov	r0, sl
 8007a36:	4659      	mov	r1, fp
 8007a38:	461d      	mov	r5, r3
 8007a3a:	f1b8 0f01 	cmp.w	r8, #1
 8007a3e:	dc21      	bgt.n	8007a84 <_strtod_l+0x51c>
 8007a40:	b10b      	cbz	r3, 8007a46 <_strtod_l+0x4de>
 8007a42:	4682      	mov	sl, r0
 8007a44:	468b      	mov	fp, r1
 8007a46:	4b2d      	ldr	r3, [pc, #180]	; (8007afc <_strtod_l+0x594>)
 8007a48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007a4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a50:	4652      	mov	r2, sl
 8007a52:	465b      	mov	r3, fp
 8007a54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007a58:	f7f8 fdce 	bl	80005f8 <__aeabi_dmul>
 8007a5c:	4b28      	ldr	r3, [pc, #160]	; (8007b00 <_strtod_l+0x598>)
 8007a5e:	460a      	mov	r2, r1
 8007a60:	400b      	ands	r3, r1
 8007a62:	4928      	ldr	r1, [pc, #160]	; (8007b04 <_strtod_l+0x59c>)
 8007a64:	428b      	cmp	r3, r1
 8007a66:	4682      	mov	sl, r0
 8007a68:	d898      	bhi.n	800799c <_strtod_l+0x434>
 8007a6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a6e:	428b      	cmp	r3, r1
 8007a70:	bf86      	itte	hi
 8007a72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007b0c <_strtod_l+0x5a4>
 8007a76:	f04f 3aff 	movhi.w	sl, #4294967295
 8007a7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	e077      	b.n	8007b74 <_strtod_l+0x60c>
 8007a84:	f018 0f01 	tst.w	r8, #1
 8007a88:	d006      	beq.n	8007a98 <_strtod_l+0x530>
 8007a8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	f7f8 fdb1 	bl	80005f8 <__aeabi_dmul>
 8007a96:	2301      	movs	r3, #1
 8007a98:	3501      	adds	r5, #1
 8007a9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a9e:	e7cc      	b.n	8007a3a <_strtod_l+0x4d2>
 8007aa0:	d0ed      	beq.n	8007a7e <_strtod_l+0x516>
 8007aa2:	f1c8 0800 	rsb	r8, r8, #0
 8007aa6:	f018 020f 	ands.w	r2, r8, #15
 8007aaa:	d00a      	beq.n	8007ac2 <_strtod_l+0x55a>
 8007aac:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <_strtod_l+0x590>)
 8007aae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fec7 	bl	800084c <__aeabi_ddiv>
 8007abe:	4682      	mov	sl, r0
 8007ac0:	468b      	mov	fp, r1
 8007ac2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ac6:	d0da      	beq.n	8007a7e <_strtod_l+0x516>
 8007ac8:	f1b8 0f1f 	cmp.w	r8, #31
 8007acc:	dd20      	ble.n	8007b10 <_strtod_l+0x5a8>
 8007ace:	2400      	movs	r4, #0
 8007ad0:	46a0      	mov	r8, r4
 8007ad2:	9407      	str	r4, [sp, #28]
 8007ad4:	9405      	str	r4, [sp, #20]
 8007ad6:	2322      	movs	r3, #34	; 0x22
 8007ad8:	f04f 0a00 	mov.w	sl, #0
 8007adc:	f04f 0b00 	mov.w	fp, #0
 8007ae0:	f8c9 3000 	str.w	r3, [r9]
 8007ae4:	e765      	b.n	80079b2 <_strtod_l+0x44a>
 8007ae6:	bf00      	nop
 8007ae8:	0800ad25 	.word	0x0800ad25
 8007aec:	0800adb3 	.word	0x0800adb3
 8007af0:	0800ad2d 	.word	0x0800ad2d
 8007af4:	0800ad70 	.word	0x0800ad70
 8007af8:	0800ae58 	.word	0x0800ae58
 8007afc:	0800ae30 	.word	0x0800ae30
 8007b00:	7ff00000 	.word	0x7ff00000
 8007b04:	7ca00000 	.word	0x7ca00000
 8007b08:	fff80000 	.word	0xfff80000
 8007b0c:	7fefffff 	.word	0x7fefffff
 8007b10:	f018 0310 	ands.w	r3, r8, #16
 8007b14:	bf18      	it	ne
 8007b16:	236a      	movne	r3, #106	; 0x6a
 8007b18:	4da0      	ldr	r5, [pc, #640]	; (8007d9c <_strtod_l+0x834>)
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	4659      	mov	r1, fp
 8007b20:	2300      	movs	r3, #0
 8007b22:	f1b8 0f00 	cmp.w	r8, #0
 8007b26:	f300 810a 	bgt.w	8007d3e <_strtod_l+0x7d6>
 8007b2a:	b10b      	cbz	r3, 8007b30 <_strtod_l+0x5c8>
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	468b      	mov	fp, r1
 8007b30:	9b04      	ldr	r3, [sp, #16]
 8007b32:	b1bb      	cbz	r3, 8007b64 <_strtod_l+0x5fc>
 8007b34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007b38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	4659      	mov	r1, fp
 8007b40:	dd10      	ble.n	8007b64 <_strtod_l+0x5fc>
 8007b42:	2b1f      	cmp	r3, #31
 8007b44:	f340 8107 	ble.w	8007d56 <_strtod_l+0x7ee>
 8007b48:	2b34      	cmp	r3, #52	; 0x34
 8007b4a:	bfde      	ittt	le
 8007b4c:	3b20      	suble	r3, #32
 8007b4e:	f04f 32ff 	movle.w	r2, #4294967295
 8007b52:	fa02 f303 	lslle.w	r3, r2, r3
 8007b56:	f04f 0a00 	mov.w	sl, #0
 8007b5a:	bfcc      	ite	gt
 8007b5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007b60:	ea03 0b01 	andle.w	fp, r3, r1
 8007b64:	2200      	movs	r2, #0
 8007b66:	2300      	movs	r3, #0
 8007b68:	4650      	mov	r0, sl
 8007b6a:	4659      	mov	r1, fp
 8007b6c:	f7f8 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1ac      	bne.n	8007ace <_strtod_l+0x566>
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	9a05      	ldr	r2, [sp, #20]
 8007b7a:	9908      	ldr	r1, [sp, #32]
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	4648      	mov	r0, r9
 8007b80:	f002 f84d 	bl	8009c1e <__s2b>
 8007b84:	9007      	str	r0, [sp, #28]
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f af08 	beq.w	800799c <_strtod_l+0x434>
 8007b8c:	9a06      	ldr	r2, [sp, #24]
 8007b8e:	9b06      	ldr	r3, [sp, #24]
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	f1c3 0300 	rsb	r3, r3, #0
 8007b96:	bfa8      	it	ge
 8007b98:	2300      	movge	r3, #0
 8007b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b9c:	2400      	movs	r4, #0
 8007b9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ba2:	9316      	str	r3, [sp, #88]	; 0x58
 8007ba4:	46a0      	mov	r8, r4
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	4648      	mov	r0, r9
 8007baa:	6859      	ldr	r1, [r3, #4]
 8007bac:	f001 ffb1 	bl	8009b12 <_Balloc>
 8007bb0:	9005      	str	r0, [sp, #20]
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f43f aef6 	beq.w	80079a4 <_strtod_l+0x43c>
 8007bb8:	9b07      	ldr	r3, [sp, #28]
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	3202      	adds	r2, #2
 8007bbe:	f103 010c 	add.w	r1, r3, #12
 8007bc2:	0092      	lsls	r2, r2, #2
 8007bc4:	300c      	adds	r0, #12
 8007bc6:	f001 ff99 	bl	8009afc <memcpy>
 8007bca:	aa1e      	add	r2, sp, #120	; 0x78
 8007bcc:	a91d      	add	r1, sp, #116	; 0x74
 8007bce:	ec4b ab10 	vmov	d0, sl, fp
 8007bd2:	4648      	mov	r0, r9
 8007bd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007bd8:	f002 fadc 	bl	800a194 <__d2b>
 8007bdc:	901c      	str	r0, [sp, #112]	; 0x70
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f43f aee0 	beq.w	80079a4 <_strtod_l+0x43c>
 8007be4:	2101      	movs	r1, #1
 8007be6:	4648      	mov	r0, r9
 8007be8:	f002 f8a5 	bl	8009d36 <__i2b>
 8007bec:	4680      	mov	r8, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f43f aed8 	beq.w	80079a4 <_strtod_l+0x43c>
 8007bf4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007bf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	bfab      	itete	ge
 8007bfc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007bfe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007c00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007c02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007c04:	bfac      	ite	ge
 8007c06:	18f7      	addge	r7, r6, r3
 8007c08:	1b9d      	sublt	r5, r3, r6
 8007c0a:	9b04      	ldr	r3, [sp, #16]
 8007c0c:	1af6      	subs	r6, r6, r3
 8007c0e:	4416      	add	r6, r2
 8007c10:	4b63      	ldr	r3, [pc, #396]	; (8007da0 <_strtod_l+0x838>)
 8007c12:	3e01      	subs	r6, #1
 8007c14:	429e      	cmp	r6, r3
 8007c16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c1a:	f280 80af 	bge.w	8007d7c <_strtod_l+0x814>
 8007c1e:	1b9b      	subs	r3, r3, r6
 8007c20:	2b1f      	cmp	r3, #31
 8007c22:	eba2 0203 	sub.w	r2, r2, r3
 8007c26:	f04f 0101 	mov.w	r1, #1
 8007c2a:	f300 809b 	bgt.w	8007d64 <_strtod_l+0x7fc>
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c34:	2300      	movs	r3, #0
 8007c36:	930a      	str	r3, [sp, #40]	; 0x28
 8007c38:	18be      	adds	r6, r7, r2
 8007c3a:	9b04      	ldr	r3, [sp, #16]
 8007c3c:	42b7      	cmp	r7, r6
 8007c3e:	4415      	add	r5, r2
 8007c40:	441d      	add	r5, r3
 8007c42:	463b      	mov	r3, r7
 8007c44:	bfa8      	it	ge
 8007c46:	4633      	movge	r3, r6
 8007c48:	42ab      	cmp	r3, r5
 8007c4a:	bfa8      	it	ge
 8007c4c:	462b      	movge	r3, r5
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfc2      	ittt	gt
 8007c52:	1af6      	subgt	r6, r6, r3
 8007c54:	1aed      	subgt	r5, r5, r3
 8007c56:	1aff      	subgt	r7, r7, r3
 8007c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c5a:	b1bb      	cbz	r3, 8007c8c <_strtod_l+0x724>
 8007c5c:	4641      	mov	r1, r8
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4648      	mov	r0, r9
 8007c62:	f002 f907 	bl	8009e74 <__pow5mult>
 8007c66:	4680      	mov	r8, r0
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	f43f ae9b 	beq.w	80079a4 <_strtod_l+0x43c>
 8007c6e:	4601      	mov	r1, r0
 8007c70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c72:	4648      	mov	r0, r9
 8007c74:	f002 f868 	bl	8009d48 <__multiply>
 8007c78:	900c      	str	r0, [sp, #48]	; 0x30
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	f43f ae92 	beq.w	80079a4 <_strtod_l+0x43c>
 8007c80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c82:	4648      	mov	r0, r9
 8007c84:	f001 ff79 	bl	8009b7a <_Bfree>
 8007c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8a:	931c      	str	r3, [sp, #112]	; 0x70
 8007c8c:	2e00      	cmp	r6, #0
 8007c8e:	dc7a      	bgt.n	8007d86 <_strtod_l+0x81e>
 8007c90:	9b06      	ldr	r3, [sp, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd08      	ble.n	8007ca8 <_strtod_l+0x740>
 8007c96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c98:	9905      	ldr	r1, [sp, #20]
 8007c9a:	4648      	mov	r0, r9
 8007c9c:	f002 f8ea 	bl	8009e74 <__pow5mult>
 8007ca0:	9005      	str	r0, [sp, #20]
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	f43f ae7e 	beq.w	80079a4 <_strtod_l+0x43c>
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	dd08      	ble.n	8007cbe <_strtod_l+0x756>
 8007cac:	462a      	mov	r2, r5
 8007cae:	9905      	ldr	r1, [sp, #20]
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	f002 f92d 	bl	8009f10 <__lshift>
 8007cb6:	9005      	str	r0, [sp, #20]
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f43f ae73 	beq.w	80079a4 <_strtod_l+0x43c>
 8007cbe:	2f00      	cmp	r7, #0
 8007cc0:	dd08      	ble.n	8007cd4 <_strtod_l+0x76c>
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	463a      	mov	r2, r7
 8007cc6:	4648      	mov	r0, r9
 8007cc8:	f002 f922 	bl	8009f10 <__lshift>
 8007ccc:	4680      	mov	r8, r0
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f43f ae68 	beq.w	80079a4 <_strtod_l+0x43c>
 8007cd4:	9a05      	ldr	r2, [sp, #20]
 8007cd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007cd8:	4648      	mov	r0, r9
 8007cda:	f002 f987 	bl	8009fec <__mdiff>
 8007cde:	4604      	mov	r4, r0
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f43f ae5f 	beq.w	80079a4 <_strtod_l+0x43c>
 8007ce6:	68c3      	ldr	r3, [r0, #12]
 8007ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8007cea:	2300      	movs	r3, #0
 8007cec:	60c3      	str	r3, [r0, #12]
 8007cee:	4641      	mov	r1, r8
 8007cf0:	f002 f962 	bl	8009fb8 <__mcmp>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	da55      	bge.n	8007da4 <_strtod_l+0x83c>
 8007cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cfa:	b9e3      	cbnz	r3, 8007d36 <_strtod_l+0x7ce>
 8007cfc:	f1ba 0f00 	cmp.w	sl, #0
 8007d00:	d119      	bne.n	8007d36 <_strtod_l+0x7ce>
 8007d02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d06:	b9b3      	cbnz	r3, 8007d36 <_strtod_l+0x7ce>
 8007d08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d0c:	0d1b      	lsrs	r3, r3, #20
 8007d0e:	051b      	lsls	r3, r3, #20
 8007d10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007d14:	d90f      	bls.n	8007d36 <_strtod_l+0x7ce>
 8007d16:	6963      	ldr	r3, [r4, #20]
 8007d18:	b913      	cbnz	r3, 8007d20 <_strtod_l+0x7b8>
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	dd0a      	ble.n	8007d36 <_strtod_l+0x7ce>
 8007d20:	4621      	mov	r1, r4
 8007d22:	2201      	movs	r2, #1
 8007d24:	4648      	mov	r0, r9
 8007d26:	f002 f8f3 	bl	8009f10 <__lshift>
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	f002 f943 	bl	8009fb8 <__mcmp>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	dc67      	bgt.n	8007e06 <_strtod_l+0x89e>
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d171      	bne.n	8007e20 <_strtod_l+0x8b8>
 8007d3c:	e63d      	b.n	80079ba <_strtod_l+0x452>
 8007d3e:	f018 0f01 	tst.w	r8, #1
 8007d42:	d004      	beq.n	8007d4e <_strtod_l+0x7e6>
 8007d44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d48:	f7f8 fc56 	bl	80005f8 <__aeabi_dmul>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d52:	3508      	adds	r5, #8
 8007d54:	e6e5      	b.n	8007b22 <_strtod_l+0x5ba>
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	ea03 0a0a 	and.w	sl, r3, sl
 8007d62:	e6ff      	b.n	8007b64 <_strtod_l+0x5fc>
 8007d64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007d68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007d6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007d70:	36e2      	adds	r6, #226	; 0xe2
 8007d72:	fa01 f306 	lsl.w	r3, r1, r6
 8007d76:	930a      	str	r3, [sp, #40]	; 0x28
 8007d78:	910f      	str	r1, [sp, #60]	; 0x3c
 8007d7a:	e75d      	b.n	8007c38 <_strtod_l+0x6d0>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d80:	2301      	movs	r3, #1
 8007d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d84:	e758      	b.n	8007c38 <_strtod_l+0x6d0>
 8007d86:	4632      	mov	r2, r6
 8007d88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d8a:	4648      	mov	r0, r9
 8007d8c:	f002 f8c0 	bl	8009f10 <__lshift>
 8007d90:	901c      	str	r0, [sp, #112]	; 0x70
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f47f af7c 	bne.w	8007c90 <_strtod_l+0x728>
 8007d98:	e604      	b.n	80079a4 <_strtod_l+0x43c>
 8007d9a:	bf00      	nop
 8007d9c:	0800ad88 	.word	0x0800ad88
 8007da0:	fffffc02 	.word	0xfffffc02
 8007da4:	465d      	mov	r5, fp
 8007da6:	f040 8086 	bne.w	8007eb6 <_strtod_l+0x94e>
 8007daa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007db0:	b32a      	cbz	r2, 8007dfe <_strtod_l+0x896>
 8007db2:	4aaf      	ldr	r2, [pc, #700]	; (8008070 <_strtod_l+0xb08>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d153      	bne.n	8007e60 <_strtod_l+0x8f8>
 8007db8:	9b04      	ldr	r3, [sp, #16]
 8007dba:	4650      	mov	r0, sl
 8007dbc:	b1d3      	cbz	r3, 8007df4 <_strtod_l+0x88c>
 8007dbe:	4aad      	ldr	r2, [pc, #692]	; (8008074 <_strtod_l+0xb0c>)
 8007dc0:	402a      	ands	r2, r5
 8007dc2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8007dca:	d816      	bhi.n	8007dfa <_strtod_l+0x892>
 8007dcc:	0d12      	lsrs	r2, r2, #20
 8007dce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd6:	4298      	cmp	r0, r3
 8007dd8:	d142      	bne.n	8007e60 <_strtod_l+0x8f8>
 8007dda:	4ba7      	ldr	r3, [pc, #668]	; (8008078 <_strtod_l+0xb10>)
 8007ddc:	429d      	cmp	r5, r3
 8007dde:	d102      	bne.n	8007de6 <_strtod_l+0x87e>
 8007de0:	3001      	adds	r0, #1
 8007de2:	f43f addf 	beq.w	80079a4 <_strtod_l+0x43c>
 8007de6:	4ba3      	ldr	r3, [pc, #652]	; (8008074 <_strtod_l+0xb0c>)
 8007de8:	402b      	ands	r3, r5
 8007dea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007dee:	f04f 0a00 	mov.w	sl, #0
 8007df2:	e7a0      	b.n	8007d36 <_strtod_l+0x7ce>
 8007df4:	f04f 33ff 	mov.w	r3, #4294967295
 8007df8:	e7ed      	b.n	8007dd6 <_strtod_l+0x86e>
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	e7eb      	b.n	8007dd6 <_strtod_l+0x86e>
 8007dfe:	bb7b      	cbnz	r3, 8007e60 <_strtod_l+0x8f8>
 8007e00:	f1ba 0f00 	cmp.w	sl, #0
 8007e04:	d12c      	bne.n	8007e60 <_strtod_l+0x8f8>
 8007e06:	9904      	ldr	r1, [sp, #16]
 8007e08:	4a9a      	ldr	r2, [pc, #616]	; (8008074 <_strtod_l+0xb0c>)
 8007e0a:	465b      	mov	r3, fp
 8007e0c:	b1f1      	cbz	r1, 8007e4c <_strtod_l+0x8e4>
 8007e0e:	ea02 010b 	and.w	r1, r2, fp
 8007e12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e16:	dc19      	bgt.n	8007e4c <_strtod_l+0x8e4>
 8007e18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e1c:	f77f ae5b 	ble.w	8007ad6 <_strtod_l+0x56e>
 8007e20:	4a96      	ldr	r2, [pc, #600]	; (800807c <_strtod_l+0xb14>)
 8007e22:	2300      	movs	r3, #0
 8007e24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007e28:	4650      	mov	r0, sl
 8007e2a:	4659      	mov	r1, fp
 8007e2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007e30:	f7f8 fbe2 	bl	80005f8 <__aeabi_dmul>
 8007e34:	4682      	mov	sl, r0
 8007e36:	468b      	mov	fp, r1
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	f47f adbe 	bne.w	80079ba <_strtod_l+0x452>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f47f adbb 	bne.w	80079ba <_strtod_l+0x452>
 8007e44:	2322      	movs	r3, #34	; 0x22
 8007e46:	f8c9 3000 	str.w	r3, [r9]
 8007e4a:	e5b6      	b.n	80079ba <_strtod_l+0x452>
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e5a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e5e:	e76a      	b.n	8007d36 <_strtod_l+0x7ce>
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	b193      	cbz	r3, 8007e8a <_strtod_l+0x922>
 8007e64:	422b      	tst	r3, r5
 8007e66:	f43f af66 	beq.w	8007d36 <_strtod_l+0x7ce>
 8007e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e6c:	9a04      	ldr	r2, [sp, #16]
 8007e6e:	4650      	mov	r0, sl
 8007e70:	4659      	mov	r1, fp
 8007e72:	b173      	cbz	r3, 8007e92 <_strtod_l+0x92a>
 8007e74:	f7ff fb5a 	bl	800752c <sulp>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e80:	f7f8 fa04 	bl	800028c <__adddf3>
 8007e84:	4682      	mov	sl, r0
 8007e86:	468b      	mov	fp, r1
 8007e88:	e755      	b.n	8007d36 <_strtod_l+0x7ce>
 8007e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e8c:	ea13 0f0a 	tst.w	r3, sl
 8007e90:	e7e9      	b.n	8007e66 <_strtod_l+0x8fe>
 8007e92:	f7ff fb4b 	bl	800752c <sulp>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e9e:	f7f8 f9f3 	bl	8000288 <__aeabi_dsub>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4682      	mov	sl, r0
 8007ea8:	468b      	mov	fp, r1
 8007eaa:	f7f8 fe0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f47f ae11 	bne.w	8007ad6 <_strtod_l+0x56e>
 8007eb4:	e73f      	b.n	8007d36 <_strtod_l+0x7ce>
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f002 f9ba 	bl	800a232 <__ratio>
 8007ebe:	ec57 6b10 	vmov	r6, r7, d0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ec8:	ee10 0a10 	vmov	r0, s0
 8007ecc:	4639      	mov	r1, r7
 8007ece:	f7f8 fe0f 	bl	8000af0 <__aeabi_dcmple>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d077      	beq.n	8007fc6 <_strtod_l+0xa5e>
 8007ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d04a      	beq.n	8007f72 <_strtod_l+0xa0a>
 8007edc:	4b68      	ldr	r3, [pc, #416]	; (8008080 <_strtod_l+0xb18>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007ee4:	4f66      	ldr	r7, [pc, #408]	; (8008080 <_strtod_l+0xb18>)
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	4b62      	ldr	r3, [pc, #392]	; (8008074 <_strtod_l+0xb0c>)
 8007eea:	402b      	ands	r3, r5
 8007eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ef0:	4b64      	ldr	r3, [pc, #400]	; (8008084 <_strtod_l+0xb1c>)
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	f040 80ce 	bne.w	8008094 <_strtod_l+0xb2c>
 8007ef8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007f04:	ec4b ab10 	vmov	d0, sl, fp
 8007f08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007f0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f10:	f002 f8ca 	bl	800a0a8 <__ulp>
 8007f14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f18:	ec53 2b10 	vmov	r2, r3, d0
 8007f1c:	f7f8 fb6c 	bl	80005f8 <__aeabi_dmul>
 8007f20:	4652      	mov	r2, sl
 8007f22:	465b      	mov	r3, fp
 8007f24:	f7f8 f9b2 	bl	800028c <__adddf3>
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4952      	ldr	r1, [pc, #328]	; (8008074 <_strtod_l+0xb0c>)
 8007f2c:	4a56      	ldr	r2, [pc, #344]	; (8008088 <_strtod_l+0xb20>)
 8007f2e:	4019      	ands	r1, r3
 8007f30:	4291      	cmp	r1, r2
 8007f32:	4682      	mov	sl, r0
 8007f34:	d95b      	bls.n	8007fee <_strtod_l+0xa86>
 8007f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d103      	bne.n	8007f48 <_strtod_l+0x9e0>
 8007f40:	9b08      	ldr	r3, [sp, #32]
 8007f42:	3301      	adds	r3, #1
 8007f44:	f43f ad2e 	beq.w	80079a4 <_strtod_l+0x43c>
 8007f48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008078 <_strtod_l+0xb10>
 8007f4c:	f04f 3aff 	mov.w	sl, #4294967295
 8007f50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f52:	4648      	mov	r0, r9
 8007f54:	f001 fe11 	bl	8009b7a <_Bfree>
 8007f58:	9905      	ldr	r1, [sp, #20]
 8007f5a:	4648      	mov	r0, r9
 8007f5c:	f001 fe0d 	bl	8009b7a <_Bfree>
 8007f60:	4641      	mov	r1, r8
 8007f62:	4648      	mov	r0, r9
 8007f64:	f001 fe09 	bl	8009b7a <_Bfree>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	4648      	mov	r0, r9
 8007f6c:	f001 fe05 	bl	8009b7a <_Bfree>
 8007f70:	e619      	b.n	8007ba6 <_strtod_l+0x63e>
 8007f72:	f1ba 0f00 	cmp.w	sl, #0
 8007f76:	d11a      	bne.n	8007fae <_strtod_l+0xa46>
 8007f78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f7c:	b9eb      	cbnz	r3, 8007fba <_strtod_l+0xa52>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4b3f      	ldr	r3, [pc, #252]	; (8008080 <_strtod_l+0xb18>)
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 fda9 	bl	8000adc <__aeabi_dcmplt>
 8007f8a:	b9c8      	cbnz	r0, 8007fc0 <_strtod_l+0xa58>
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4639      	mov	r1, r7
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b3e      	ldr	r3, [pc, #248]	; (800808c <_strtod_l+0xb24>)
 8007f94:	f7f8 fb30 	bl	80005f8 <__aeabi_dmul>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007fa0:	9618      	str	r6, [sp, #96]	; 0x60
 8007fa2:	9319      	str	r3, [sp, #100]	; 0x64
 8007fa4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007fa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007fac:	e79c      	b.n	8007ee8 <_strtod_l+0x980>
 8007fae:	f1ba 0f01 	cmp.w	sl, #1
 8007fb2:	d102      	bne.n	8007fba <_strtod_l+0xa52>
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	f43f ad8e 	beq.w	8007ad6 <_strtod_l+0x56e>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4b34      	ldr	r3, [pc, #208]	; (8008090 <_strtod_l+0xb28>)
 8007fbe:	e78f      	b.n	8007ee0 <_strtod_l+0x978>
 8007fc0:	2600      	movs	r6, #0
 8007fc2:	4f32      	ldr	r7, [pc, #200]	; (800808c <_strtod_l+0xb24>)
 8007fc4:	e7ea      	b.n	8007f9c <_strtod_l+0xa34>
 8007fc6:	4b31      	ldr	r3, [pc, #196]	; (800808c <_strtod_l+0xb24>)
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f7f8 fb13 	bl	80005f8 <__aeabi_dmul>
 8007fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	460f      	mov	r7, r1
 8007fd8:	b933      	cbnz	r3, 8007fe8 <_strtod_l+0xa80>
 8007fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fde:	9010      	str	r0, [sp, #64]	; 0x40
 8007fe0:	9311      	str	r3, [sp, #68]	; 0x44
 8007fe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fe6:	e7df      	b.n	8007fa8 <_strtod_l+0xa40>
 8007fe8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007fec:	e7f9      	b.n	8007fe2 <_strtod_l+0xa7a>
 8007fee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ff2:	9b04      	ldr	r3, [sp, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1ab      	bne.n	8007f50 <_strtod_l+0x9e8>
 8007ff8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ffc:	0d1b      	lsrs	r3, r3, #20
 8007ffe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008000:	051b      	lsls	r3, r3, #20
 8008002:	429a      	cmp	r2, r3
 8008004:	465d      	mov	r5, fp
 8008006:	d1a3      	bne.n	8007f50 <_strtod_l+0x9e8>
 8008008:	4639      	mov	r1, r7
 800800a:	4630      	mov	r0, r6
 800800c:	f7f8 fda4 	bl	8000b58 <__aeabi_d2iz>
 8008010:	f7f8 fa88 	bl	8000524 <__aeabi_i2d>
 8008014:	460b      	mov	r3, r1
 8008016:	4602      	mov	r2, r0
 8008018:	4639      	mov	r1, r7
 800801a:	4630      	mov	r0, r6
 800801c:	f7f8 f934 	bl	8000288 <__aeabi_dsub>
 8008020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008022:	4606      	mov	r6, r0
 8008024:	460f      	mov	r7, r1
 8008026:	b933      	cbnz	r3, 8008036 <_strtod_l+0xace>
 8008028:	f1ba 0f00 	cmp.w	sl, #0
 800802c:	d103      	bne.n	8008036 <_strtod_l+0xace>
 800802e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008032:	2d00      	cmp	r5, #0
 8008034:	d06d      	beq.n	8008112 <_strtod_l+0xbaa>
 8008036:	a30a      	add	r3, pc, #40	; (adr r3, 8008060 <_strtod_l+0xaf8>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	4630      	mov	r0, r6
 800803e:	4639      	mov	r1, r7
 8008040:	f7f8 fd4c 	bl	8000adc <__aeabi_dcmplt>
 8008044:	2800      	cmp	r0, #0
 8008046:	f47f acb8 	bne.w	80079ba <_strtod_l+0x452>
 800804a:	a307      	add	r3, pc, #28	; (adr r3, 8008068 <_strtod_l+0xb00>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8008058:	2800      	cmp	r0, #0
 800805a:	f43f af79 	beq.w	8007f50 <_strtod_l+0x9e8>
 800805e:	e4ac      	b.n	80079ba <_strtod_l+0x452>
 8008060:	94a03595 	.word	0x94a03595
 8008064:	3fdfffff 	.word	0x3fdfffff
 8008068:	35afe535 	.word	0x35afe535
 800806c:	3fe00000 	.word	0x3fe00000
 8008070:	000fffff 	.word	0x000fffff
 8008074:	7ff00000 	.word	0x7ff00000
 8008078:	7fefffff 	.word	0x7fefffff
 800807c:	39500000 	.word	0x39500000
 8008080:	3ff00000 	.word	0x3ff00000
 8008084:	7fe00000 	.word	0x7fe00000
 8008088:	7c9fffff 	.word	0x7c9fffff
 800808c:	3fe00000 	.word	0x3fe00000
 8008090:	bff00000 	.word	0xbff00000
 8008094:	9b04      	ldr	r3, [sp, #16]
 8008096:	b333      	cbz	r3, 80080e6 <_strtod_l+0xb7e>
 8008098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800809a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800809e:	d822      	bhi.n	80080e6 <_strtod_l+0xb7e>
 80080a0:	a327      	add	r3, pc, #156	; (adr r3, 8008140 <_strtod_l+0xbd8>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 fd21 	bl	8000af0 <__aeabi_dcmple>
 80080ae:	b1a0      	cbz	r0, 80080da <_strtod_l+0xb72>
 80080b0:	4639      	mov	r1, r7
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7f8 fd78 	bl	8000ba8 <__aeabi_d2uiz>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	bf08      	it	eq
 80080bc:	2001      	moveq	r0, #1
 80080be:	f7f8 fa21 	bl	8000504 <__aeabi_ui2d>
 80080c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c4:	4606      	mov	r6, r0
 80080c6:	460f      	mov	r7, r1
 80080c8:	bb03      	cbnz	r3, 800810c <_strtod_l+0xba4>
 80080ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ce:	9012      	str	r0, [sp, #72]	; 0x48
 80080d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80080d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80080d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80080da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80080ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80080ee:	f001 ffdb 	bl	800a0a8 <__ulp>
 80080f2:	4650      	mov	r0, sl
 80080f4:	ec53 2b10 	vmov	r2, r3, d0
 80080f8:	4659      	mov	r1, fp
 80080fa:	f7f8 fa7d 	bl	80005f8 <__aeabi_dmul>
 80080fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008102:	f7f8 f8c3 	bl	800028c <__adddf3>
 8008106:	4682      	mov	sl, r0
 8008108:	468b      	mov	fp, r1
 800810a:	e772      	b.n	8007ff2 <_strtod_l+0xa8a>
 800810c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008110:	e7df      	b.n	80080d2 <_strtod_l+0xb6a>
 8008112:	a30d      	add	r3, pc, #52	; (adr r3, 8008148 <_strtod_l+0xbe0>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 fce0 	bl	8000adc <__aeabi_dcmplt>
 800811c:	e79c      	b.n	8008058 <_strtod_l+0xaf0>
 800811e:	2300      	movs	r3, #0
 8008120:	930d      	str	r3, [sp, #52]	; 0x34
 8008122:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	f7ff ba61 	b.w	80075ee <_strtod_l+0x86>
 800812c:	2b65      	cmp	r3, #101	; 0x65
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f43f ab4e 	beq.w	80077d2 <_strtod_l+0x26a>
 8008136:	2101      	movs	r1, #1
 8008138:	4614      	mov	r4, r2
 800813a:	9104      	str	r1, [sp, #16]
 800813c:	f7ff bacb 	b.w	80076d6 <_strtod_l+0x16e>
 8008140:	ffc00000 	.word	0xffc00000
 8008144:	41dfffff 	.word	0x41dfffff
 8008148:	94a03595 	.word	0x94a03595
 800814c:	3fcfffff 	.word	0x3fcfffff

08008150 <_strtod_r>:
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <_strtod_r+0x18>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	b410      	push	{r4}
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	4c04      	ldr	r4, [pc, #16]	; (800816c <_strtod_r+0x1c>)
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf08      	it	eq
 800815e:	4623      	moveq	r3, r4
 8008160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008164:	f7ff ba00 	b.w	8007568 <_strtod_l>
 8008168:	20000010 	.word	0x20000010
 800816c:	20000074 	.word	0x20000074

08008170 <_strtol_l.isra.0>:
 8008170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	4680      	mov	r8, r0
 8008176:	4689      	mov	r9, r1
 8008178:	4692      	mov	sl, r2
 800817a:	461e      	mov	r6, r3
 800817c:	460f      	mov	r7, r1
 800817e:	463d      	mov	r5, r7
 8008180:	9808      	ldr	r0, [sp, #32]
 8008182:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008186:	f001 fc27 	bl	80099d8 <__locale_ctype_ptr_l>
 800818a:	4420      	add	r0, r4
 800818c:	7843      	ldrb	r3, [r0, #1]
 800818e:	f013 0308 	ands.w	r3, r3, #8
 8008192:	d132      	bne.n	80081fa <_strtol_l.isra.0+0x8a>
 8008194:	2c2d      	cmp	r4, #45	; 0x2d
 8008196:	d132      	bne.n	80081fe <_strtol_l.isra.0+0x8e>
 8008198:	787c      	ldrb	r4, [r7, #1]
 800819a:	1cbd      	adds	r5, r7, #2
 800819c:	2201      	movs	r2, #1
 800819e:	2e00      	cmp	r6, #0
 80081a0:	d05d      	beq.n	800825e <_strtol_l.isra.0+0xee>
 80081a2:	2e10      	cmp	r6, #16
 80081a4:	d109      	bne.n	80081ba <_strtol_l.isra.0+0x4a>
 80081a6:	2c30      	cmp	r4, #48	; 0x30
 80081a8:	d107      	bne.n	80081ba <_strtol_l.isra.0+0x4a>
 80081aa:	782b      	ldrb	r3, [r5, #0]
 80081ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081b0:	2b58      	cmp	r3, #88	; 0x58
 80081b2:	d14f      	bne.n	8008254 <_strtol_l.isra.0+0xe4>
 80081b4:	786c      	ldrb	r4, [r5, #1]
 80081b6:	2610      	movs	r6, #16
 80081b8:	3502      	adds	r5, #2
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	bf14      	ite	ne
 80081be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80081c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80081c6:	2700      	movs	r7, #0
 80081c8:	fbb1 fcf6 	udiv	ip, r1, r6
 80081cc:	4638      	mov	r0, r7
 80081ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 80081d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80081d6:	2b09      	cmp	r3, #9
 80081d8:	d817      	bhi.n	800820a <_strtol_l.isra.0+0x9a>
 80081da:	461c      	mov	r4, r3
 80081dc:	42a6      	cmp	r6, r4
 80081de:	dd23      	ble.n	8008228 <_strtol_l.isra.0+0xb8>
 80081e0:	1c7b      	adds	r3, r7, #1
 80081e2:	d007      	beq.n	80081f4 <_strtol_l.isra.0+0x84>
 80081e4:	4584      	cmp	ip, r0
 80081e6:	d31c      	bcc.n	8008222 <_strtol_l.isra.0+0xb2>
 80081e8:	d101      	bne.n	80081ee <_strtol_l.isra.0+0x7e>
 80081ea:	45a6      	cmp	lr, r4
 80081ec:	db19      	blt.n	8008222 <_strtol_l.isra.0+0xb2>
 80081ee:	fb00 4006 	mla	r0, r0, r6, r4
 80081f2:	2701      	movs	r7, #1
 80081f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081f8:	e7eb      	b.n	80081d2 <_strtol_l.isra.0+0x62>
 80081fa:	462f      	mov	r7, r5
 80081fc:	e7bf      	b.n	800817e <_strtol_l.isra.0+0xe>
 80081fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008200:	bf04      	itt	eq
 8008202:	1cbd      	addeq	r5, r7, #2
 8008204:	787c      	ldrbeq	r4, [r7, #1]
 8008206:	461a      	mov	r2, r3
 8008208:	e7c9      	b.n	800819e <_strtol_l.isra.0+0x2e>
 800820a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800820e:	2b19      	cmp	r3, #25
 8008210:	d801      	bhi.n	8008216 <_strtol_l.isra.0+0xa6>
 8008212:	3c37      	subs	r4, #55	; 0x37
 8008214:	e7e2      	b.n	80081dc <_strtol_l.isra.0+0x6c>
 8008216:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800821a:	2b19      	cmp	r3, #25
 800821c:	d804      	bhi.n	8008228 <_strtol_l.isra.0+0xb8>
 800821e:	3c57      	subs	r4, #87	; 0x57
 8008220:	e7dc      	b.n	80081dc <_strtol_l.isra.0+0x6c>
 8008222:	f04f 37ff 	mov.w	r7, #4294967295
 8008226:	e7e5      	b.n	80081f4 <_strtol_l.isra.0+0x84>
 8008228:	1c7b      	adds	r3, r7, #1
 800822a:	d108      	bne.n	800823e <_strtol_l.isra.0+0xce>
 800822c:	2322      	movs	r3, #34	; 0x22
 800822e:	f8c8 3000 	str.w	r3, [r8]
 8008232:	4608      	mov	r0, r1
 8008234:	f1ba 0f00 	cmp.w	sl, #0
 8008238:	d107      	bne.n	800824a <_strtol_l.isra.0+0xda>
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	b102      	cbz	r2, 8008242 <_strtol_l.isra.0+0xd2>
 8008240:	4240      	negs	r0, r0
 8008242:	f1ba 0f00 	cmp.w	sl, #0
 8008246:	d0f8      	beq.n	800823a <_strtol_l.isra.0+0xca>
 8008248:	b10f      	cbz	r7, 800824e <_strtol_l.isra.0+0xde>
 800824a:	f105 39ff 	add.w	r9, r5, #4294967295
 800824e:	f8ca 9000 	str.w	r9, [sl]
 8008252:	e7f2      	b.n	800823a <_strtol_l.isra.0+0xca>
 8008254:	2430      	movs	r4, #48	; 0x30
 8008256:	2e00      	cmp	r6, #0
 8008258:	d1af      	bne.n	80081ba <_strtol_l.isra.0+0x4a>
 800825a:	2608      	movs	r6, #8
 800825c:	e7ad      	b.n	80081ba <_strtol_l.isra.0+0x4a>
 800825e:	2c30      	cmp	r4, #48	; 0x30
 8008260:	d0a3      	beq.n	80081aa <_strtol_l.isra.0+0x3a>
 8008262:	260a      	movs	r6, #10
 8008264:	e7a9      	b.n	80081ba <_strtol_l.isra.0+0x4a>
	...

08008268 <_strtol_r>:
 8008268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800826a:	4c06      	ldr	r4, [pc, #24]	; (8008284 <_strtol_r+0x1c>)
 800826c:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_strtol_r+0x20>)
 800826e:	6824      	ldr	r4, [r4, #0]
 8008270:	6a24      	ldr	r4, [r4, #32]
 8008272:	2c00      	cmp	r4, #0
 8008274:	bf08      	it	eq
 8008276:	462c      	moveq	r4, r5
 8008278:	9400      	str	r4, [sp, #0]
 800827a:	f7ff ff79 	bl	8008170 <_strtol_l.isra.0>
 800827e:	b003      	add	sp, #12
 8008280:	bd30      	pop	{r4, r5, pc}
 8008282:	bf00      	nop
 8008284:	20000010 	.word	0x20000010
 8008288:	20000074 	.word	0x20000074

0800828c <__swbuf_r>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	460e      	mov	r6, r1
 8008290:	4614      	mov	r4, r2
 8008292:	4605      	mov	r5, r0
 8008294:	b118      	cbz	r0, 800829e <__swbuf_r+0x12>
 8008296:	6983      	ldr	r3, [r0, #24]
 8008298:	b90b      	cbnz	r3, 800829e <__swbuf_r+0x12>
 800829a:	f000 ffed 	bl	8009278 <__sinit>
 800829e:	4b21      	ldr	r3, [pc, #132]	; (8008324 <__swbuf_r+0x98>)
 80082a0:	429c      	cmp	r4, r3
 80082a2:	d12a      	bne.n	80082fa <__swbuf_r+0x6e>
 80082a4:	686c      	ldr	r4, [r5, #4]
 80082a6:	69a3      	ldr	r3, [r4, #24]
 80082a8:	60a3      	str	r3, [r4, #8]
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	071a      	lsls	r2, r3, #28
 80082ae:	d52e      	bpl.n	800830e <__swbuf_r+0x82>
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	b363      	cbz	r3, 800830e <__swbuf_r+0x82>
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	6820      	ldr	r0, [r4, #0]
 80082b8:	1ac0      	subs	r0, r0, r3
 80082ba:	6963      	ldr	r3, [r4, #20]
 80082bc:	b2f6      	uxtb	r6, r6
 80082be:	4283      	cmp	r3, r0
 80082c0:	4637      	mov	r7, r6
 80082c2:	dc04      	bgt.n	80082ce <__swbuf_r+0x42>
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 ff6c 	bl	80091a4 <_fflush_r>
 80082cc:	bb28      	cbnz	r0, 800831a <__swbuf_r+0x8e>
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	60a3      	str	r3, [r4, #8]
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	701e      	strb	r6, [r3, #0]
 80082dc:	6963      	ldr	r3, [r4, #20]
 80082de:	3001      	adds	r0, #1
 80082e0:	4283      	cmp	r3, r0
 80082e2:	d004      	beq.n	80082ee <__swbuf_r+0x62>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	07db      	lsls	r3, r3, #31
 80082e8:	d519      	bpl.n	800831e <__swbuf_r+0x92>
 80082ea:	2e0a      	cmp	r6, #10
 80082ec:	d117      	bne.n	800831e <__swbuf_r+0x92>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 ff57 	bl	80091a4 <_fflush_r>
 80082f6:	b190      	cbz	r0, 800831e <__swbuf_r+0x92>
 80082f8:	e00f      	b.n	800831a <__swbuf_r+0x8e>
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <__swbuf_r+0x9c>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d101      	bne.n	8008304 <__swbuf_r+0x78>
 8008300:	68ac      	ldr	r4, [r5, #8]
 8008302:	e7d0      	b.n	80082a6 <__swbuf_r+0x1a>
 8008304:	4b09      	ldr	r3, [pc, #36]	; (800832c <__swbuf_r+0xa0>)
 8008306:	429c      	cmp	r4, r3
 8008308:	bf08      	it	eq
 800830a:	68ec      	ldreq	r4, [r5, #12]
 800830c:	e7cb      	b.n	80082a6 <__swbuf_r+0x1a>
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 f80d 	bl	8008330 <__swsetup_r>
 8008316:	2800      	cmp	r0, #0
 8008318:	d0cc      	beq.n	80082b4 <__swbuf_r+0x28>
 800831a:	f04f 37ff 	mov.w	r7, #4294967295
 800831e:	4638      	mov	r0, r7
 8008320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008322:	bf00      	nop
 8008324:	0800ade0 	.word	0x0800ade0
 8008328:	0800ae00 	.word	0x0800ae00
 800832c:	0800adc0 	.word	0x0800adc0

08008330 <__swsetup_r>:
 8008330:	4b32      	ldr	r3, [pc, #200]	; (80083fc <__swsetup_r+0xcc>)
 8008332:	b570      	push	{r4, r5, r6, lr}
 8008334:	681d      	ldr	r5, [r3, #0]
 8008336:	4606      	mov	r6, r0
 8008338:	460c      	mov	r4, r1
 800833a:	b125      	cbz	r5, 8008346 <__swsetup_r+0x16>
 800833c:	69ab      	ldr	r3, [r5, #24]
 800833e:	b913      	cbnz	r3, 8008346 <__swsetup_r+0x16>
 8008340:	4628      	mov	r0, r5
 8008342:	f000 ff99 	bl	8009278 <__sinit>
 8008346:	4b2e      	ldr	r3, [pc, #184]	; (8008400 <__swsetup_r+0xd0>)
 8008348:	429c      	cmp	r4, r3
 800834a:	d10f      	bne.n	800836c <__swsetup_r+0x3c>
 800834c:	686c      	ldr	r4, [r5, #4]
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	b29a      	uxth	r2, r3
 8008354:	0715      	lsls	r5, r2, #28
 8008356:	d42c      	bmi.n	80083b2 <__swsetup_r+0x82>
 8008358:	06d0      	lsls	r0, r2, #27
 800835a:	d411      	bmi.n	8008380 <__swsetup_r+0x50>
 800835c:	2209      	movs	r2, #9
 800835e:	6032      	str	r2, [r6, #0]
 8008360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	f04f 30ff 	mov.w	r0, #4294967295
 800836a:	e03e      	b.n	80083ea <__swsetup_r+0xba>
 800836c:	4b25      	ldr	r3, [pc, #148]	; (8008404 <__swsetup_r+0xd4>)
 800836e:	429c      	cmp	r4, r3
 8008370:	d101      	bne.n	8008376 <__swsetup_r+0x46>
 8008372:	68ac      	ldr	r4, [r5, #8]
 8008374:	e7eb      	b.n	800834e <__swsetup_r+0x1e>
 8008376:	4b24      	ldr	r3, [pc, #144]	; (8008408 <__swsetup_r+0xd8>)
 8008378:	429c      	cmp	r4, r3
 800837a:	bf08      	it	eq
 800837c:	68ec      	ldreq	r4, [r5, #12]
 800837e:	e7e6      	b.n	800834e <__swsetup_r+0x1e>
 8008380:	0751      	lsls	r1, r2, #29
 8008382:	d512      	bpl.n	80083aa <__swsetup_r+0x7a>
 8008384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008386:	b141      	cbz	r1, 800839a <__swsetup_r+0x6a>
 8008388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800838c:	4299      	cmp	r1, r3
 800838e:	d002      	beq.n	8008396 <__swsetup_r+0x66>
 8008390:	4630      	mov	r0, r6
 8008392:	f001 ffcb 	bl	800a32c <_free_r>
 8008396:	2300      	movs	r3, #0
 8008398:	6363      	str	r3, [r4, #52]	; 0x34
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	2300      	movs	r3, #0
 80083a4:	6063      	str	r3, [r4, #4]
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f043 0308 	orr.w	r3, r3, #8
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	b94b      	cbnz	r3, 80083ca <__swsetup_r+0x9a>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c0:	d003      	beq.n	80083ca <__swsetup_r+0x9a>
 80083c2:	4621      	mov	r1, r4
 80083c4:	4630      	mov	r0, r6
 80083c6:	f001 fb3f 	bl	8009a48 <__smakebuf_r>
 80083ca:	89a2      	ldrh	r2, [r4, #12]
 80083cc:	f012 0301 	ands.w	r3, r2, #1
 80083d0:	d00c      	beq.n	80083ec <__swsetup_r+0xbc>
 80083d2:	2300      	movs	r3, #0
 80083d4:	60a3      	str	r3, [r4, #8]
 80083d6:	6963      	ldr	r3, [r4, #20]
 80083d8:	425b      	negs	r3, r3
 80083da:	61a3      	str	r3, [r4, #24]
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	b953      	cbnz	r3, 80083f6 <__swsetup_r+0xc6>
 80083e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80083e8:	d1ba      	bne.n	8008360 <__swsetup_r+0x30>
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	0792      	lsls	r2, r2, #30
 80083ee:	bf58      	it	pl
 80083f0:	6963      	ldrpl	r3, [r4, #20]
 80083f2:	60a3      	str	r3, [r4, #8]
 80083f4:	e7f2      	b.n	80083dc <__swsetup_r+0xac>
 80083f6:	2000      	movs	r0, #0
 80083f8:	e7f7      	b.n	80083ea <__swsetup_r+0xba>
 80083fa:	bf00      	nop
 80083fc:	20000010 	.word	0x20000010
 8008400:	0800ade0 	.word	0x0800ade0
 8008404:	0800ae00 	.word	0x0800ae00
 8008408:	0800adc0 	.word	0x0800adc0

0800840c <quorem>:
 800840c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	6903      	ldr	r3, [r0, #16]
 8008412:	690c      	ldr	r4, [r1, #16]
 8008414:	42a3      	cmp	r3, r4
 8008416:	4680      	mov	r8, r0
 8008418:	f2c0 8082 	blt.w	8008520 <quorem+0x114>
 800841c:	3c01      	subs	r4, #1
 800841e:	f101 0714 	add.w	r7, r1, #20
 8008422:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008426:	f100 0614 	add.w	r6, r0, #20
 800842a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800842e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008432:	eb06 030c 	add.w	r3, r6, ip
 8008436:	3501      	adds	r5, #1
 8008438:	eb07 090c 	add.w	r9, r7, ip
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008442:	b395      	cbz	r5, 80084aa <quorem+0x9e>
 8008444:	f04f 0a00 	mov.w	sl, #0
 8008448:	4638      	mov	r0, r7
 800844a:	46b6      	mov	lr, r6
 800844c:	46d3      	mov	fp, sl
 800844e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008452:	b293      	uxth	r3, r2
 8008454:	fb05 a303 	mla	r3, r5, r3, sl
 8008458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800845c:	b29b      	uxth	r3, r3
 800845e:	ebab 0303 	sub.w	r3, fp, r3
 8008462:	0c12      	lsrs	r2, r2, #16
 8008464:	f8de b000 	ldr.w	fp, [lr]
 8008468:	fb05 a202 	mla	r2, r5, r2, sl
 800846c:	fa13 f38b 	uxtah	r3, r3, fp
 8008470:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008474:	fa1f fb82 	uxth.w	fp, r2
 8008478:	f8de 2000 	ldr.w	r2, [lr]
 800847c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008484:	b29b      	uxth	r3, r3
 8008486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800848a:	4581      	cmp	r9, r0
 800848c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008490:	f84e 3b04 	str.w	r3, [lr], #4
 8008494:	d2db      	bcs.n	800844e <quorem+0x42>
 8008496:	f856 300c 	ldr.w	r3, [r6, ip]
 800849a:	b933      	cbnz	r3, 80084aa <quorem+0x9e>
 800849c:	9b01      	ldr	r3, [sp, #4]
 800849e:	3b04      	subs	r3, #4
 80084a0:	429e      	cmp	r6, r3
 80084a2:	461a      	mov	r2, r3
 80084a4:	d330      	bcc.n	8008508 <quorem+0xfc>
 80084a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80084aa:	4640      	mov	r0, r8
 80084ac:	f001 fd84 	bl	8009fb8 <__mcmp>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	db25      	blt.n	8008500 <quorem+0xf4>
 80084b4:	3501      	adds	r5, #1
 80084b6:	4630      	mov	r0, r6
 80084b8:	f04f 0c00 	mov.w	ip, #0
 80084bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80084c0:	f8d0 e000 	ldr.w	lr, [r0]
 80084c4:	b293      	uxth	r3, r2
 80084c6:	ebac 0303 	sub.w	r3, ip, r3
 80084ca:	0c12      	lsrs	r2, r2, #16
 80084cc:	fa13 f38e 	uxtah	r3, r3, lr
 80084d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084d8:	b29b      	uxth	r3, r3
 80084da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084de:	45b9      	cmp	r9, r7
 80084e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084e4:	f840 3b04 	str.w	r3, [r0], #4
 80084e8:	d2e8      	bcs.n	80084bc <quorem+0xb0>
 80084ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80084ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80084f2:	b92a      	cbnz	r2, 8008500 <quorem+0xf4>
 80084f4:	3b04      	subs	r3, #4
 80084f6:	429e      	cmp	r6, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	d30b      	bcc.n	8008514 <quorem+0x108>
 80084fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008500:	4628      	mov	r0, r5
 8008502:	b003      	add	sp, #12
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	3b04      	subs	r3, #4
 800850c:	2a00      	cmp	r2, #0
 800850e:	d1ca      	bne.n	80084a6 <quorem+0x9a>
 8008510:	3c01      	subs	r4, #1
 8008512:	e7c5      	b.n	80084a0 <quorem+0x94>
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	3b04      	subs	r3, #4
 8008518:	2a00      	cmp	r2, #0
 800851a:	d1ef      	bne.n	80084fc <quorem+0xf0>
 800851c:	3c01      	subs	r4, #1
 800851e:	e7ea      	b.n	80084f6 <quorem+0xea>
 8008520:	2000      	movs	r0, #0
 8008522:	e7ee      	b.n	8008502 <quorem+0xf6>
 8008524:	0000      	movs	r0, r0
	...

08008528 <_dtoa_r>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	ec57 6b10 	vmov	r6, r7, d0
 8008530:	b097      	sub	sp, #92	; 0x5c
 8008532:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008534:	9106      	str	r1, [sp, #24]
 8008536:	4604      	mov	r4, r0
 8008538:	920b      	str	r2, [sp, #44]	; 0x2c
 800853a:	9312      	str	r3, [sp, #72]	; 0x48
 800853c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008540:	e9cd 6700 	strd	r6, r7, [sp]
 8008544:	b93d      	cbnz	r5, 8008556 <_dtoa_r+0x2e>
 8008546:	2010      	movs	r0, #16
 8008548:	f001 fabe 	bl	8009ac8 <malloc>
 800854c:	6260      	str	r0, [r4, #36]	; 0x24
 800854e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008552:	6005      	str	r5, [r0, #0]
 8008554:	60c5      	str	r5, [r0, #12]
 8008556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008558:	6819      	ldr	r1, [r3, #0]
 800855a:	b151      	cbz	r1, 8008572 <_dtoa_r+0x4a>
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	604a      	str	r2, [r1, #4]
 8008560:	2301      	movs	r3, #1
 8008562:	4093      	lsls	r3, r2
 8008564:	608b      	str	r3, [r1, #8]
 8008566:	4620      	mov	r0, r4
 8008568:	f001 fb07 	bl	8009b7a <_Bfree>
 800856c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	1e3b      	subs	r3, r7, #0
 8008574:	bfbb      	ittet	lt
 8008576:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800857a:	9301      	strlt	r3, [sp, #4]
 800857c:	2300      	movge	r3, #0
 800857e:	2201      	movlt	r2, #1
 8008580:	bfac      	ite	ge
 8008582:	f8c8 3000 	strge.w	r3, [r8]
 8008586:	f8c8 2000 	strlt.w	r2, [r8]
 800858a:	4baf      	ldr	r3, [pc, #700]	; (8008848 <_dtoa_r+0x320>)
 800858c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008590:	ea33 0308 	bics.w	r3, r3, r8
 8008594:	d114      	bne.n	80085c0 <_dtoa_r+0x98>
 8008596:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008598:	f242 730f 	movw	r3, #9999	; 0x270f
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	b923      	cbnz	r3, 80085ac <_dtoa_r+0x84>
 80085a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f000 8542 	beq.w	8009030 <_dtoa_r+0xb08>
 80085ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800885c <_dtoa_r+0x334>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8544 	beq.w	8009040 <_dtoa_r+0xb18>
 80085b8:	f10b 0303 	add.w	r3, fp, #3
 80085bc:	f000 bd3e 	b.w	800903c <_dtoa_r+0xb14>
 80085c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80085d0:	4681      	mov	r9, r0
 80085d2:	b168      	cbz	r0, 80085f0 <_dtoa_r+0xc8>
 80085d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085d6:	2301      	movs	r3, #1
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8524 	beq.w	800902a <_dtoa_r+0xb02>
 80085e2:	4b9a      	ldr	r3, [pc, #616]	; (800884c <_dtoa_r+0x324>)
 80085e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	f000 bd28 	b.w	8009040 <_dtoa_r+0xb18>
 80085f0:	aa14      	add	r2, sp, #80	; 0x50
 80085f2:	a915      	add	r1, sp, #84	; 0x54
 80085f4:	ec47 6b10 	vmov	d0, r6, r7
 80085f8:	4620      	mov	r0, r4
 80085fa:	f001 fdcb 	bl	800a194 <__d2b>
 80085fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008602:	9004      	str	r0, [sp, #16]
 8008604:	2d00      	cmp	r5, #0
 8008606:	d07c      	beq.n	8008702 <_dtoa_r+0x1da>
 8008608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800860c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008610:	46b2      	mov	sl, r6
 8008612:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800861a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800861e:	2200      	movs	r2, #0
 8008620:	4b8b      	ldr	r3, [pc, #556]	; (8008850 <_dtoa_r+0x328>)
 8008622:	4650      	mov	r0, sl
 8008624:	4659      	mov	r1, fp
 8008626:	f7f7 fe2f 	bl	8000288 <__aeabi_dsub>
 800862a:	a381      	add	r3, pc, #516	; (adr r3, 8008830 <_dtoa_r+0x308>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 ffe2 	bl	80005f8 <__aeabi_dmul>
 8008634:	a380      	add	r3, pc, #512	; (adr r3, 8008838 <_dtoa_r+0x310>)
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	f7f7 fe27 	bl	800028c <__adddf3>
 800863e:	4606      	mov	r6, r0
 8008640:	4628      	mov	r0, r5
 8008642:	460f      	mov	r7, r1
 8008644:	f7f7 ff6e 	bl	8000524 <__aeabi_i2d>
 8008648:	a37d      	add	r3, pc, #500	; (adr r3, 8008840 <_dtoa_r+0x318>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 ffd3 	bl	80005f8 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4630      	mov	r0, r6
 8008658:	4639      	mov	r1, r7
 800865a:	f7f7 fe17 	bl	800028c <__adddf3>
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	f7f8 fa79 	bl	8000b58 <__aeabi_d2iz>
 8008666:	2200      	movs	r2, #0
 8008668:	4682      	mov	sl, r0
 800866a:	2300      	movs	r3, #0
 800866c:	4630      	mov	r0, r6
 800866e:	4639      	mov	r1, r7
 8008670:	f7f8 fa34 	bl	8000adc <__aeabi_dcmplt>
 8008674:	b148      	cbz	r0, 800868a <_dtoa_r+0x162>
 8008676:	4650      	mov	r0, sl
 8008678:	f7f7 ff54 	bl	8000524 <__aeabi_i2d>
 800867c:	4632      	mov	r2, r6
 800867e:	463b      	mov	r3, r7
 8008680:	f7f8 fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008684:	b908      	cbnz	r0, 800868a <_dtoa_r+0x162>
 8008686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800868a:	f1ba 0f16 	cmp.w	sl, #22
 800868e:	d859      	bhi.n	8008744 <_dtoa_r+0x21c>
 8008690:	4970      	ldr	r1, [pc, #448]	; (8008854 <_dtoa_r+0x32c>)
 8008692:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800869a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869e:	f7f8 fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d050      	beq.n	8008748 <_dtoa_r+0x220>
 80086a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086aa:	2300      	movs	r3, #0
 80086ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80086ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086b0:	1b5d      	subs	r5, r3, r5
 80086b2:	f1b5 0801 	subs.w	r8, r5, #1
 80086b6:	bf49      	itett	mi
 80086b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80086bc:	2300      	movpl	r3, #0
 80086be:	9305      	strmi	r3, [sp, #20]
 80086c0:	f04f 0800 	movmi.w	r8, #0
 80086c4:	bf58      	it	pl
 80086c6:	9305      	strpl	r3, [sp, #20]
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	db3e      	blt.n	800874c <_dtoa_r+0x224>
 80086ce:	2300      	movs	r3, #0
 80086d0:	44d0      	add	r8, sl
 80086d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80086d6:	9307      	str	r3, [sp, #28]
 80086d8:	9b06      	ldr	r3, [sp, #24]
 80086da:	2b09      	cmp	r3, #9
 80086dc:	f200 8090 	bhi.w	8008800 <_dtoa_r+0x2d8>
 80086e0:	2b05      	cmp	r3, #5
 80086e2:	bfc4      	itt	gt
 80086e4:	3b04      	subgt	r3, #4
 80086e6:	9306      	strgt	r3, [sp, #24]
 80086e8:	9b06      	ldr	r3, [sp, #24]
 80086ea:	f1a3 0302 	sub.w	r3, r3, #2
 80086ee:	bfcc      	ite	gt
 80086f0:	2500      	movgt	r5, #0
 80086f2:	2501      	movle	r5, #1
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	f200 808f 	bhi.w	8008818 <_dtoa_r+0x2f0>
 80086fa:	e8df f003 	tbb	[pc, r3]
 80086fe:	7f7d      	.short	0x7f7d
 8008700:	7131      	.short	0x7131
 8008702:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008706:	441d      	add	r5, r3
 8008708:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800870c:	2820      	cmp	r0, #32
 800870e:	dd13      	ble.n	8008738 <_dtoa_r+0x210>
 8008710:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008714:	9b00      	ldr	r3, [sp, #0]
 8008716:	fa08 f800 	lsl.w	r8, r8, r0
 800871a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800871e:	fa23 f000 	lsr.w	r0, r3, r0
 8008722:	ea48 0000 	orr.w	r0, r8, r0
 8008726:	f7f7 feed 	bl	8000504 <__aeabi_ui2d>
 800872a:	2301      	movs	r3, #1
 800872c:	4682      	mov	sl, r0
 800872e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008732:	3d01      	subs	r5, #1
 8008734:	9313      	str	r3, [sp, #76]	; 0x4c
 8008736:	e772      	b.n	800861e <_dtoa_r+0xf6>
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	f1c0 0020 	rsb	r0, r0, #32
 800873e:	fa03 f000 	lsl.w	r0, r3, r0
 8008742:	e7f0      	b.n	8008726 <_dtoa_r+0x1fe>
 8008744:	2301      	movs	r3, #1
 8008746:	e7b1      	b.n	80086ac <_dtoa_r+0x184>
 8008748:	900f      	str	r0, [sp, #60]	; 0x3c
 800874a:	e7b0      	b.n	80086ae <_dtoa_r+0x186>
 800874c:	9b05      	ldr	r3, [sp, #20]
 800874e:	eba3 030a 	sub.w	r3, r3, sl
 8008752:	9305      	str	r3, [sp, #20]
 8008754:	f1ca 0300 	rsb	r3, sl, #0
 8008758:	9307      	str	r3, [sp, #28]
 800875a:	2300      	movs	r3, #0
 800875c:	930e      	str	r3, [sp, #56]	; 0x38
 800875e:	e7bb      	b.n	80086d8 <_dtoa_r+0x1b0>
 8008760:	2301      	movs	r3, #1
 8008762:	930a      	str	r3, [sp, #40]	; 0x28
 8008764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd59      	ble.n	800881e <_dtoa_r+0x2f6>
 800876a:	9302      	str	r3, [sp, #8]
 800876c:	4699      	mov	r9, r3
 800876e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008770:	2200      	movs	r2, #0
 8008772:	6072      	str	r2, [r6, #4]
 8008774:	2204      	movs	r2, #4
 8008776:	f102 0014 	add.w	r0, r2, #20
 800877a:	4298      	cmp	r0, r3
 800877c:	6871      	ldr	r1, [r6, #4]
 800877e:	d953      	bls.n	8008828 <_dtoa_r+0x300>
 8008780:	4620      	mov	r0, r4
 8008782:	f001 f9c6 	bl	8009b12 <_Balloc>
 8008786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008788:	6030      	str	r0, [r6, #0]
 800878a:	f1b9 0f0e 	cmp.w	r9, #14
 800878e:	f8d3 b000 	ldr.w	fp, [r3]
 8008792:	f200 80e6 	bhi.w	8008962 <_dtoa_r+0x43a>
 8008796:	2d00      	cmp	r5, #0
 8008798:	f000 80e3 	beq.w	8008962 <_dtoa_r+0x43a>
 800879c:	ed9d 7b00 	vldr	d7, [sp]
 80087a0:	f1ba 0f00 	cmp.w	sl, #0
 80087a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80087a8:	dd74      	ble.n	8008894 <_dtoa_r+0x36c>
 80087aa:	4a2a      	ldr	r2, [pc, #168]	; (8008854 <_dtoa_r+0x32c>)
 80087ac:	f00a 030f 	and.w	r3, sl, #15
 80087b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087b4:	ed93 7b00 	vldr	d7, [r3]
 80087b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80087bc:	06f0      	lsls	r0, r6, #27
 80087be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80087c2:	d565      	bpl.n	8008890 <_dtoa_r+0x368>
 80087c4:	4b24      	ldr	r3, [pc, #144]	; (8008858 <_dtoa_r+0x330>)
 80087c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087ce:	f7f8 f83d 	bl	800084c <__aeabi_ddiv>
 80087d2:	e9cd 0100 	strd	r0, r1, [sp]
 80087d6:	f006 060f 	and.w	r6, r6, #15
 80087da:	2503      	movs	r5, #3
 80087dc:	4f1e      	ldr	r7, [pc, #120]	; (8008858 <_dtoa_r+0x330>)
 80087de:	e04c      	b.n	800887a <_dtoa_r+0x352>
 80087e0:	2301      	movs	r3, #1
 80087e2:	930a      	str	r3, [sp, #40]	; 0x28
 80087e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e6:	4453      	add	r3, sl
 80087e8:	f103 0901 	add.w	r9, r3, #1
 80087ec:	9302      	str	r3, [sp, #8]
 80087ee:	464b      	mov	r3, r9
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	bfb8      	it	lt
 80087f4:	2301      	movlt	r3, #1
 80087f6:	e7ba      	b.n	800876e <_dtoa_r+0x246>
 80087f8:	2300      	movs	r3, #0
 80087fa:	e7b2      	b.n	8008762 <_dtoa_r+0x23a>
 80087fc:	2300      	movs	r3, #0
 80087fe:	e7f0      	b.n	80087e2 <_dtoa_r+0x2ba>
 8008800:	2501      	movs	r5, #1
 8008802:	2300      	movs	r3, #0
 8008804:	9306      	str	r3, [sp, #24]
 8008806:	950a      	str	r5, [sp, #40]	; 0x28
 8008808:	f04f 33ff 	mov.w	r3, #4294967295
 800880c:	9302      	str	r3, [sp, #8]
 800880e:	4699      	mov	r9, r3
 8008810:	2200      	movs	r2, #0
 8008812:	2312      	movs	r3, #18
 8008814:	920b      	str	r2, [sp, #44]	; 0x2c
 8008816:	e7aa      	b.n	800876e <_dtoa_r+0x246>
 8008818:	2301      	movs	r3, #1
 800881a:	930a      	str	r3, [sp, #40]	; 0x28
 800881c:	e7f4      	b.n	8008808 <_dtoa_r+0x2e0>
 800881e:	2301      	movs	r3, #1
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	4699      	mov	r9, r3
 8008824:	461a      	mov	r2, r3
 8008826:	e7f5      	b.n	8008814 <_dtoa_r+0x2ec>
 8008828:	3101      	adds	r1, #1
 800882a:	6071      	str	r1, [r6, #4]
 800882c:	0052      	lsls	r2, r2, #1
 800882e:	e7a2      	b.n	8008776 <_dtoa_r+0x24e>
 8008830:	636f4361 	.word	0x636f4361
 8008834:	3fd287a7 	.word	0x3fd287a7
 8008838:	8b60c8b3 	.word	0x8b60c8b3
 800883c:	3fc68a28 	.word	0x3fc68a28
 8008840:	509f79fb 	.word	0x509f79fb
 8008844:	3fd34413 	.word	0x3fd34413
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	0800ad31 	.word	0x0800ad31
 8008850:	3ff80000 	.word	0x3ff80000
 8008854:	0800ae58 	.word	0x0800ae58
 8008858:	0800ae30 	.word	0x0800ae30
 800885c:	0800adb9 	.word	0x0800adb9
 8008860:	07f1      	lsls	r1, r6, #31
 8008862:	d508      	bpl.n	8008876 <_dtoa_r+0x34e>
 8008864:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886c:	f7f7 fec4 	bl	80005f8 <__aeabi_dmul>
 8008870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008874:	3501      	adds	r5, #1
 8008876:	1076      	asrs	r6, r6, #1
 8008878:	3708      	adds	r7, #8
 800887a:	2e00      	cmp	r6, #0
 800887c:	d1f0      	bne.n	8008860 <_dtoa_r+0x338>
 800887e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008882:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008886:	f7f7 ffe1 	bl	800084c <__aeabi_ddiv>
 800888a:	e9cd 0100 	strd	r0, r1, [sp]
 800888e:	e01a      	b.n	80088c6 <_dtoa_r+0x39e>
 8008890:	2502      	movs	r5, #2
 8008892:	e7a3      	b.n	80087dc <_dtoa_r+0x2b4>
 8008894:	f000 80a0 	beq.w	80089d8 <_dtoa_r+0x4b0>
 8008898:	f1ca 0600 	rsb	r6, sl, #0
 800889c:	4b9f      	ldr	r3, [pc, #636]	; (8008b1c <_dtoa_r+0x5f4>)
 800889e:	4fa0      	ldr	r7, [pc, #640]	; (8008b20 <_dtoa_r+0x5f8>)
 80088a0:	f006 020f 	and.w	r2, r6, #15
 80088a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088b0:	f7f7 fea2 	bl	80005f8 <__aeabi_dmul>
 80088b4:	e9cd 0100 	strd	r0, r1, [sp]
 80088b8:	1136      	asrs	r6, r6, #4
 80088ba:	2300      	movs	r3, #0
 80088bc:	2502      	movs	r5, #2
 80088be:	2e00      	cmp	r6, #0
 80088c0:	d17f      	bne.n	80089c2 <_dtoa_r+0x49a>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e1      	bne.n	800888a <_dtoa_r+0x362>
 80088c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8087 	beq.w	80089dc <_dtoa_r+0x4b4>
 80088ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088d2:	2200      	movs	r2, #0
 80088d4:	4b93      	ldr	r3, [pc, #588]	; (8008b24 <_dtoa_r+0x5fc>)
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f8 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d07c      	beq.n	80089dc <_dtoa_r+0x4b4>
 80088e2:	f1b9 0f00 	cmp.w	r9, #0
 80088e6:	d079      	beq.n	80089dc <_dtoa_r+0x4b4>
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	dd35      	ble.n	800895a <_dtoa_r+0x432>
 80088ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80088f2:	9308      	str	r3, [sp, #32]
 80088f4:	4639      	mov	r1, r7
 80088f6:	2200      	movs	r2, #0
 80088f8:	4b8b      	ldr	r3, [pc, #556]	; (8008b28 <_dtoa_r+0x600>)
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7f7 fe7c 	bl	80005f8 <__aeabi_dmul>
 8008900:	e9cd 0100 	strd	r0, r1, [sp]
 8008904:	9f02      	ldr	r7, [sp, #8]
 8008906:	3501      	adds	r5, #1
 8008908:	4628      	mov	r0, r5
 800890a:	f7f7 fe0b 	bl	8000524 <__aeabi_i2d>
 800890e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008912:	f7f7 fe71 	bl	80005f8 <__aeabi_dmul>
 8008916:	2200      	movs	r2, #0
 8008918:	4b84      	ldr	r3, [pc, #528]	; (8008b2c <_dtoa_r+0x604>)
 800891a:	f7f7 fcb7 	bl	800028c <__adddf3>
 800891e:	4605      	mov	r5, r0
 8008920:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008924:	2f00      	cmp	r7, #0
 8008926:	d15d      	bne.n	80089e4 <_dtoa_r+0x4bc>
 8008928:	2200      	movs	r2, #0
 800892a:	4b81      	ldr	r3, [pc, #516]	; (8008b30 <_dtoa_r+0x608>)
 800892c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008930:	f7f7 fcaa 	bl	8000288 <__aeabi_dsub>
 8008934:	462a      	mov	r2, r5
 8008936:	4633      	mov	r3, r6
 8008938:	e9cd 0100 	strd	r0, r1, [sp]
 800893c:	f7f8 f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 8008940:	2800      	cmp	r0, #0
 8008942:	f040 8288 	bne.w	8008e56 <_dtoa_r+0x92e>
 8008946:	462a      	mov	r2, r5
 8008948:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800894c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008950:	f7f8 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8008954:	2800      	cmp	r0, #0
 8008956:	f040 827c 	bne.w	8008e52 <_dtoa_r+0x92a>
 800895a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800895e:	e9cd 2300 	strd	r2, r3, [sp]
 8008962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008964:	2b00      	cmp	r3, #0
 8008966:	f2c0 8150 	blt.w	8008c0a <_dtoa_r+0x6e2>
 800896a:	f1ba 0f0e 	cmp.w	sl, #14
 800896e:	f300 814c 	bgt.w	8008c0a <_dtoa_r+0x6e2>
 8008972:	4b6a      	ldr	r3, [pc, #424]	; (8008b1c <_dtoa_r+0x5f4>)
 8008974:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008978:	ed93 7b00 	vldr	d7, [r3]
 800897c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800897e:	2b00      	cmp	r3, #0
 8008980:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008984:	f280 80d8 	bge.w	8008b38 <_dtoa_r+0x610>
 8008988:	f1b9 0f00 	cmp.w	r9, #0
 800898c:	f300 80d4 	bgt.w	8008b38 <_dtoa_r+0x610>
 8008990:	f040 825e 	bne.w	8008e50 <_dtoa_r+0x928>
 8008994:	2200      	movs	r2, #0
 8008996:	4b66      	ldr	r3, [pc, #408]	; (8008b30 <_dtoa_r+0x608>)
 8008998:	ec51 0b17 	vmov	r0, r1, d7
 800899c:	f7f7 fe2c 	bl	80005f8 <__aeabi_dmul>
 80089a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089a4:	f7f8 f8ae 	bl	8000b04 <__aeabi_dcmpge>
 80089a8:	464f      	mov	r7, r9
 80089aa:	464e      	mov	r6, r9
 80089ac:	2800      	cmp	r0, #0
 80089ae:	f040 8234 	bne.w	8008e1a <_dtoa_r+0x8f2>
 80089b2:	2331      	movs	r3, #49	; 0x31
 80089b4:	f10b 0501 	add.w	r5, fp, #1
 80089b8:	f88b 3000 	strb.w	r3, [fp]
 80089bc:	f10a 0a01 	add.w	sl, sl, #1
 80089c0:	e22f      	b.n	8008e22 <_dtoa_r+0x8fa>
 80089c2:	07f2      	lsls	r2, r6, #31
 80089c4:	d505      	bpl.n	80089d2 <_dtoa_r+0x4aa>
 80089c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ca:	f7f7 fe15 	bl	80005f8 <__aeabi_dmul>
 80089ce:	3501      	adds	r5, #1
 80089d0:	2301      	movs	r3, #1
 80089d2:	1076      	asrs	r6, r6, #1
 80089d4:	3708      	adds	r7, #8
 80089d6:	e772      	b.n	80088be <_dtoa_r+0x396>
 80089d8:	2502      	movs	r5, #2
 80089da:	e774      	b.n	80088c6 <_dtoa_r+0x39e>
 80089dc:	f8cd a020 	str.w	sl, [sp, #32]
 80089e0:	464f      	mov	r7, r9
 80089e2:	e791      	b.n	8008908 <_dtoa_r+0x3e0>
 80089e4:	4b4d      	ldr	r3, [pc, #308]	; (8008b1c <_dtoa_r+0x5f4>)
 80089e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80089ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d047      	beq.n	8008a84 <_dtoa_r+0x55c>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	2000      	movs	r0, #0
 80089fa:	494e      	ldr	r1, [pc, #312]	; (8008b34 <_dtoa_r+0x60c>)
 80089fc:	f7f7 ff26 	bl	800084c <__aeabi_ddiv>
 8008a00:	462a      	mov	r2, r5
 8008a02:	4633      	mov	r3, r6
 8008a04:	f7f7 fc40 	bl	8000288 <__aeabi_dsub>
 8008a08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a0c:	465d      	mov	r5, fp
 8008a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a12:	f7f8 f8a1 	bl	8000b58 <__aeabi_d2iz>
 8008a16:	4606      	mov	r6, r0
 8008a18:	f7f7 fd84 	bl	8000524 <__aeabi_i2d>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a24:	f7f7 fc30 	bl	8000288 <__aeabi_dsub>
 8008a28:	3630      	adds	r6, #48	; 0x30
 8008a2a:	f805 6b01 	strb.w	r6, [r5], #1
 8008a2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a32:	e9cd 0100 	strd	r0, r1, [sp]
 8008a36:	f7f8 f851 	bl	8000adc <__aeabi_dcmplt>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d163      	bne.n	8008b06 <_dtoa_r+0x5de>
 8008a3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a42:	2000      	movs	r0, #0
 8008a44:	4937      	ldr	r1, [pc, #220]	; (8008b24 <_dtoa_r+0x5fc>)
 8008a46:	f7f7 fc1f 	bl	8000288 <__aeabi_dsub>
 8008a4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a4e:	f7f8 f845 	bl	8000adc <__aeabi_dcmplt>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f040 80b7 	bne.w	8008bc6 <_dtoa_r+0x69e>
 8008a58:	eba5 030b 	sub.w	r3, r5, fp
 8008a5c:	429f      	cmp	r7, r3
 8008a5e:	f77f af7c 	ble.w	800895a <_dtoa_r+0x432>
 8008a62:	2200      	movs	r2, #0
 8008a64:	4b30      	ldr	r3, [pc, #192]	; (8008b28 <_dtoa_r+0x600>)
 8008a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a6a:	f7f7 fdc5 	bl	80005f8 <__aeabi_dmul>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a74:	4b2c      	ldr	r3, [pc, #176]	; (8008b28 <_dtoa_r+0x600>)
 8008a76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a7a:	f7f7 fdbd 	bl	80005f8 <__aeabi_dmul>
 8008a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a82:	e7c4      	b.n	8008a0e <_dtoa_r+0x4e6>
 8008a84:	462a      	mov	r2, r5
 8008a86:	4633      	mov	r3, r6
 8008a88:	f7f7 fdb6 	bl	80005f8 <__aeabi_dmul>
 8008a8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a90:	eb0b 0507 	add.w	r5, fp, r7
 8008a94:	465e      	mov	r6, fp
 8008a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a9a:	f7f8 f85d 	bl	8000b58 <__aeabi_d2iz>
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	f7f7 fd40 	bl	8000524 <__aeabi_i2d>
 8008aa4:	3730      	adds	r7, #48	; 0x30
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aae:	f7f7 fbeb 	bl	8000288 <__aeabi_dsub>
 8008ab2:	f806 7b01 	strb.w	r7, [r6], #1
 8008ab6:	42ae      	cmp	r6, r5
 8008ab8:	e9cd 0100 	strd	r0, r1, [sp]
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	d126      	bne.n	8008b10 <_dtoa_r+0x5e8>
 8008ac2:	4b1c      	ldr	r3, [pc, #112]	; (8008b34 <_dtoa_r+0x60c>)
 8008ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ac8:	f7f7 fbe0 	bl	800028c <__adddf3>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ad4:	f7f8 f820 	bl	8000b18 <__aeabi_dcmpgt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d174      	bne.n	8008bc6 <_dtoa_r+0x69e>
 8008adc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	4914      	ldr	r1, [pc, #80]	; (8008b34 <_dtoa_r+0x60c>)
 8008ae4:	f7f7 fbd0 	bl	8000288 <__aeabi_dsub>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008af0:	f7f7 fff4 	bl	8000adc <__aeabi_dcmplt>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f43f af30 	beq.w	800895a <_dtoa_r+0x432>
 8008afa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008afe:	2b30      	cmp	r3, #48	; 0x30
 8008b00:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b04:	d002      	beq.n	8008b0c <_dtoa_r+0x5e4>
 8008b06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008b0a:	e04a      	b.n	8008ba2 <_dtoa_r+0x67a>
 8008b0c:	4615      	mov	r5, r2
 8008b0e:	e7f4      	b.n	8008afa <_dtoa_r+0x5d2>
 8008b10:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <_dtoa_r+0x600>)
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	e9cd 0100 	strd	r0, r1, [sp]
 8008b1a:	e7bc      	b.n	8008a96 <_dtoa_r+0x56e>
 8008b1c:	0800ae58 	.word	0x0800ae58
 8008b20:	0800ae30 	.word	0x0800ae30
 8008b24:	3ff00000 	.word	0x3ff00000
 8008b28:	40240000 	.word	0x40240000
 8008b2c:	401c0000 	.word	0x401c0000
 8008b30:	40140000 	.word	0x40140000
 8008b34:	3fe00000 	.word	0x3fe00000
 8008b38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b3c:	465d      	mov	r5, fp
 8008b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 fe81 	bl	800084c <__aeabi_ddiv>
 8008b4a:	f7f8 f805 	bl	8000b58 <__aeabi_d2iz>
 8008b4e:	4680      	mov	r8, r0
 8008b50:	f7f7 fce8 	bl	8000524 <__aeabi_i2d>
 8008b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008b68:	f7f7 fb8e 	bl	8000288 <__aeabi_dsub>
 8008b6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b70:	eba5 060b 	sub.w	r6, r5, fp
 8008b74:	45b1      	cmp	r9, r6
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	d139      	bne.n	8008bf0 <_dtoa_r+0x6c8>
 8008b7c:	f7f7 fb86 	bl	800028c <__adddf3>
 8008b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b84:	4606      	mov	r6, r0
 8008b86:	460f      	mov	r7, r1
 8008b88:	f7f7 ffc6 	bl	8000b18 <__aeabi_dcmpgt>
 8008b8c:	b9c8      	cbnz	r0, 8008bc2 <_dtoa_r+0x69a>
 8008b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7f7 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b9a:	b110      	cbz	r0, 8008ba2 <_dtoa_r+0x67a>
 8008b9c:	f018 0f01 	tst.w	r8, #1
 8008ba0:	d10f      	bne.n	8008bc2 <_dtoa_r+0x69a>
 8008ba2:	9904      	ldr	r1, [sp, #16]
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 ffe8 	bl	8009b7a <_Bfree>
 8008baa:	2300      	movs	r3, #0
 8008bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bae:	702b      	strb	r3, [r5, #0]
 8008bb0:	f10a 0301 	add.w	r3, sl, #1
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8241 	beq.w	8009040 <_dtoa_r+0xb18>
 8008bbe:	601d      	str	r5, [r3, #0]
 8008bc0:	e23e      	b.n	8009040 <_dtoa_r+0xb18>
 8008bc2:	f8cd a020 	str.w	sl, [sp, #32]
 8008bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bca:	2a39      	cmp	r2, #57	; 0x39
 8008bcc:	f105 33ff 	add.w	r3, r5, #4294967295
 8008bd0:	d108      	bne.n	8008be4 <_dtoa_r+0x6bc>
 8008bd2:	459b      	cmp	fp, r3
 8008bd4:	d10a      	bne.n	8008bec <_dtoa_r+0x6c4>
 8008bd6:	9b08      	ldr	r3, [sp, #32]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	9308      	str	r3, [sp, #32]
 8008bdc:	2330      	movs	r3, #48	; 0x30
 8008bde:	f88b 3000 	strb.w	r3, [fp]
 8008be2:	465b      	mov	r3, fp
 8008be4:	781a      	ldrb	r2, [r3, #0]
 8008be6:	3201      	adds	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	e78c      	b.n	8008b06 <_dtoa_r+0x5de>
 8008bec:	461d      	mov	r5, r3
 8008bee:	e7ea      	b.n	8008bc6 <_dtoa_r+0x69e>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b9b      	ldr	r3, [pc, #620]	; (8008e60 <_dtoa_r+0x938>)
 8008bf4:	f7f7 fd00 	bl	80005f8 <__aeabi_dmul>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460f      	mov	r7, r1
 8008c00:	f7f7 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d09a      	beq.n	8008b3e <_dtoa_r+0x616>
 8008c08:	e7cb      	b.n	8008ba2 <_dtoa_r+0x67a>
 8008c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	f000 808b 	beq.w	8008d28 <_dtoa_r+0x800>
 8008c12:	9a06      	ldr	r2, [sp, #24]
 8008c14:	2a01      	cmp	r2, #1
 8008c16:	dc6e      	bgt.n	8008cf6 <_dtoa_r+0x7ce>
 8008c18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	d067      	beq.n	8008cee <_dtoa_r+0x7c6>
 8008c1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c22:	9f07      	ldr	r7, [sp, #28]
 8008c24:	9d05      	ldr	r5, [sp, #20]
 8008c26:	9a05      	ldr	r2, [sp, #20]
 8008c28:	2101      	movs	r1, #1
 8008c2a:	441a      	add	r2, r3
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	9205      	str	r2, [sp, #20]
 8008c30:	4498      	add	r8, r3
 8008c32:	f001 f880 	bl	8009d36 <__i2b>
 8008c36:	4606      	mov	r6, r0
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	dd0c      	ble.n	8008c56 <_dtoa_r+0x72e>
 8008c3c:	f1b8 0f00 	cmp.w	r8, #0
 8008c40:	dd09      	ble.n	8008c56 <_dtoa_r+0x72e>
 8008c42:	4545      	cmp	r5, r8
 8008c44:	9a05      	ldr	r2, [sp, #20]
 8008c46:	462b      	mov	r3, r5
 8008c48:	bfa8      	it	ge
 8008c4a:	4643      	movge	r3, r8
 8008c4c:	1ad2      	subs	r2, r2, r3
 8008c4e:	9205      	str	r2, [sp, #20]
 8008c50:	1aed      	subs	r5, r5, r3
 8008c52:	eba8 0803 	sub.w	r8, r8, r3
 8008c56:	9b07      	ldr	r3, [sp, #28]
 8008c58:	b1eb      	cbz	r3, 8008c96 <_dtoa_r+0x76e>
 8008c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d067      	beq.n	8008d30 <_dtoa_r+0x808>
 8008c60:	b18f      	cbz	r7, 8008c86 <_dtoa_r+0x75e>
 8008c62:	4631      	mov	r1, r6
 8008c64:	463a      	mov	r2, r7
 8008c66:	4620      	mov	r0, r4
 8008c68:	f001 f904 	bl	8009e74 <__pow5mult>
 8008c6c:	9a04      	ldr	r2, [sp, #16]
 8008c6e:	4601      	mov	r1, r0
 8008c70:	4606      	mov	r6, r0
 8008c72:	4620      	mov	r0, r4
 8008c74:	f001 f868 	bl	8009d48 <__multiply>
 8008c78:	9904      	ldr	r1, [sp, #16]
 8008c7a:	9008      	str	r0, [sp, #32]
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 ff7c 	bl	8009b7a <_Bfree>
 8008c82:	9b08      	ldr	r3, [sp, #32]
 8008c84:	9304      	str	r3, [sp, #16]
 8008c86:	9b07      	ldr	r3, [sp, #28]
 8008c88:	1bda      	subs	r2, r3, r7
 8008c8a:	d004      	beq.n	8008c96 <_dtoa_r+0x76e>
 8008c8c:	9904      	ldr	r1, [sp, #16]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f001 f8f0 	bl	8009e74 <__pow5mult>
 8008c94:	9004      	str	r0, [sp, #16]
 8008c96:	2101      	movs	r1, #1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f001 f84c 	bl	8009d36 <__i2b>
 8008c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 81d0 	beq.w	8009048 <_dtoa_r+0xb20>
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4601      	mov	r1, r0
 8008cac:	4620      	mov	r0, r4
 8008cae:	f001 f8e1 	bl	8009e74 <__pow5mult>
 8008cb2:	9b06      	ldr	r3, [sp, #24]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	dc40      	bgt.n	8008d3c <_dtoa_r+0x814>
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d139      	bne.n	8008d34 <_dtoa_r+0x80c>
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d136      	bne.n	8008d38 <_dtoa_r+0x810>
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cd0:	0d1b      	lsrs	r3, r3, #20
 8008cd2:	051b      	lsls	r3, r3, #20
 8008cd4:	b12b      	cbz	r3, 8008ce2 <_dtoa_r+0x7ba>
 8008cd6:	9b05      	ldr	r3, [sp, #20]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	f108 0801 	add.w	r8, r8, #1
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	9307      	str	r3, [sp, #28]
 8008ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d12a      	bne.n	8008d40 <_dtoa_r+0x818>
 8008cea:	2001      	movs	r0, #1
 8008cec:	e030      	b.n	8008d50 <_dtoa_r+0x828>
 8008cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cf0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cf4:	e795      	b.n	8008c22 <_dtoa_r+0x6fa>
 8008cf6:	9b07      	ldr	r3, [sp, #28]
 8008cf8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008cfc:	42bb      	cmp	r3, r7
 8008cfe:	bfbf      	itttt	lt
 8008d00:	9b07      	ldrlt	r3, [sp, #28]
 8008d02:	9707      	strlt	r7, [sp, #28]
 8008d04:	1afa      	sublt	r2, r7, r3
 8008d06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008d08:	bfbb      	ittet	lt
 8008d0a:	189b      	addlt	r3, r3, r2
 8008d0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008d0e:	1bdf      	subge	r7, r3, r7
 8008d10:	2700      	movlt	r7, #0
 8008d12:	f1b9 0f00 	cmp.w	r9, #0
 8008d16:	bfb5      	itete	lt
 8008d18:	9b05      	ldrlt	r3, [sp, #20]
 8008d1a:	9d05      	ldrge	r5, [sp, #20]
 8008d1c:	eba3 0509 	sublt.w	r5, r3, r9
 8008d20:	464b      	movge	r3, r9
 8008d22:	bfb8      	it	lt
 8008d24:	2300      	movlt	r3, #0
 8008d26:	e77e      	b.n	8008c26 <_dtoa_r+0x6fe>
 8008d28:	9f07      	ldr	r7, [sp, #28]
 8008d2a:	9d05      	ldr	r5, [sp, #20]
 8008d2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008d2e:	e783      	b.n	8008c38 <_dtoa_r+0x710>
 8008d30:	9a07      	ldr	r2, [sp, #28]
 8008d32:	e7ab      	b.n	8008c8c <_dtoa_r+0x764>
 8008d34:	2300      	movs	r3, #0
 8008d36:	e7d4      	b.n	8008ce2 <_dtoa_r+0x7ba>
 8008d38:	9b00      	ldr	r3, [sp, #0]
 8008d3a:	e7d2      	b.n	8008ce2 <_dtoa_r+0x7ba>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008d46:	6918      	ldr	r0, [r3, #16]
 8008d48:	f000 ffa7 	bl	8009c9a <__hi0bits>
 8008d4c:	f1c0 0020 	rsb	r0, r0, #32
 8008d50:	4440      	add	r0, r8
 8008d52:	f010 001f 	ands.w	r0, r0, #31
 8008d56:	d047      	beq.n	8008de8 <_dtoa_r+0x8c0>
 8008d58:	f1c0 0320 	rsb	r3, r0, #32
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	dd3b      	ble.n	8008dd8 <_dtoa_r+0x8b0>
 8008d60:	9b05      	ldr	r3, [sp, #20]
 8008d62:	f1c0 001c 	rsb	r0, r0, #28
 8008d66:	4403      	add	r3, r0
 8008d68:	9305      	str	r3, [sp, #20]
 8008d6a:	4405      	add	r5, r0
 8008d6c:	4480      	add	r8, r0
 8008d6e:	9b05      	ldr	r3, [sp, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	dd05      	ble.n	8008d80 <_dtoa_r+0x858>
 8008d74:	461a      	mov	r2, r3
 8008d76:	9904      	ldr	r1, [sp, #16]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f001 f8c9 	bl	8009f10 <__lshift>
 8008d7e:	9004      	str	r0, [sp, #16]
 8008d80:	f1b8 0f00 	cmp.w	r8, #0
 8008d84:	dd05      	ble.n	8008d92 <_dtoa_r+0x86a>
 8008d86:	4639      	mov	r1, r7
 8008d88:	4642      	mov	r2, r8
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f001 f8c0 	bl	8009f10 <__lshift>
 8008d90:	4607      	mov	r7, r0
 8008d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d94:	b353      	cbz	r3, 8008dec <_dtoa_r+0x8c4>
 8008d96:	4639      	mov	r1, r7
 8008d98:	9804      	ldr	r0, [sp, #16]
 8008d9a:	f001 f90d 	bl	8009fb8 <__mcmp>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	da24      	bge.n	8008dec <_dtoa_r+0x8c4>
 8008da2:	2300      	movs	r3, #0
 8008da4:	220a      	movs	r2, #10
 8008da6:	9904      	ldr	r1, [sp, #16]
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fefd 	bl	8009ba8 <__multadd>
 8008dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db0:	9004      	str	r0, [sp, #16]
 8008db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 814d 	beq.w	8009056 <_dtoa_r+0xb2e>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fef0 	bl	8009ba8 <__multadd>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	4606      	mov	r6, r0
 8008dce:	dc4f      	bgt.n	8008e70 <_dtoa_r+0x948>
 8008dd0:	9b06      	ldr	r3, [sp, #24]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	dd4c      	ble.n	8008e70 <_dtoa_r+0x948>
 8008dd6:	e011      	b.n	8008dfc <_dtoa_r+0x8d4>
 8008dd8:	d0c9      	beq.n	8008d6e <_dtoa_r+0x846>
 8008dda:	9a05      	ldr	r2, [sp, #20]
 8008ddc:	331c      	adds	r3, #28
 8008dde:	441a      	add	r2, r3
 8008de0:	9205      	str	r2, [sp, #20]
 8008de2:	441d      	add	r5, r3
 8008de4:	4498      	add	r8, r3
 8008de6:	e7c2      	b.n	8008d6e <_dtoa_r+0x846>
 8008de8:	4603      	mov	r3, r0
 8008dea:	e7f6      	b.n	8008dda <_dtoa_r+0x8b2>
 8008dec:	f1b9 0f00 	cmp.w	r9, #0
 8008df0:	dc38      	bgt.n	8008e64 <_dtoa_r+0x93c>
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	dd35      	ble.n	8008e64 <_dtoa_r+0x93c>
 8008df8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dfc:	9b02      	ldr	r3, [sp, #8]
 8008dfe:	b963      	cbnz	r3, 8008e1a <_dtoa_r+0x8f2>
 8008e00:	4639      	mov	r1, r7
 8008e02:	2205      	movs	r2, #5
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fecf 	bl	8009ba8 <__multadd>
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	9804      	ldr	r0, [sp, #16]
 8008e10:	f001 f8d2 	bl	8009fb8 <__mcmp>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f73f adcc 	bgt.w	80089b2 <_dtoa_r+0x48a>
 8008e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1c:	465d      	mov	r5, fp
 8008e1e:	ea6f 0a03 	mvn.w	sl, r3
 8008e22:	f04f 0900 	mov.w	r9, #0
 8008e26:	4639      	mov	r1, r7
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 fea6 	bl	8009b7a <_Bfree>
 8008e2e:	2e00      	cmp	r6, #0
 8008e30:	f43f aeb7 	beq.w	8008ba2 <_dtoa_r+0x67a>
 8008e34:	f1b9 0f00 	cmp.w	r9, #0
 8008e38:	d005      	beq.n	8008e46 <_dtoa_r+0x91e>
 8008e3a:	45b1      	cmp	r9, r6
 8008e3c:	d003      	beq.n	8008e46 <_dtoa_r+0x91e>
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fe9a 	bl	8009b7a <_Bfree>
 8008e46:	4631      	mov	r1, r6
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fe96 	bl	8009b7a <_Bfree>
 8008e4e:	e6a8      	b.n	8008ba2 <_dtoa_r+0x67a>
 8008e50:	2700      	movs	r7, #0
 8008e52:	463e      	mov	r6, r7
 8008e54:	e7e1      	b.n	8008e1a <_dtoa_r+0x8f2>
 8008e56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e5a:	463e      	mov	r6, r7
 8008e5c:	e5a9      	b.n	80089b2 <_dtoa_r+0x48a>
 8008e5e:	bf00      	nop
 8008e60:	40240000 	.word	0x40240000
 8008e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e66:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80fa 	beq.w	8009064 <_dtoa_r+0xb3c>
 8008e70:	2d00      	cmp	r5, #0
 8008e72:	dd05      	ble.n	8008e80 <_dtoa_r+0x958>
 8008e74:	4631      	mov	r1, r6
 8008e76:	462a      	mov	r2, r5
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f001 f849 	bl	8009f10 <__lshift>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	9b07      	ldr	r3, [sp, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d04c      	beq.n	8008f20 <_dtoa_r+0x9f8>
 8008e86:	6871      	ldr	r1, [r6, #4]
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 fe42 	bl	8009b12 <_Balloc>
 8008e8e:	6932      	ldr	r2, [r6, #16]
 8008e90:	3202      	adds	r2, #2
 8008e92:	4605      	mov	r5, r0
 8008e94:	0092      	lsls	r2, r2, #2
 8008e96:	f106 010c 	add.w	r1, r6, #12
 8008e9a:	300c      	adds	r0, #12
 8008e9c:	f000 fe2e 	bl	8009afc <memcpy>
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f001 f833 	bl	8009f10 <__lshift>
 8008eaa:	9b00      	ldr	r3, [sp, #0]
 8008eac:	f8cd b014 	str.w	fp, [sp, #20]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	46b1      	mov	r9, r6
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	4606      	mov	r6, r0
 8008eba:	4639      	mov	r1, r7
 8008ebc:	9804      	ldr	r0, [sp, #16]
 8008ebe:	f7ff faa5 	bl	800840c <quorem>
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008eca:	9804      	ldr	r0, [sp, #16]
 8008ecc:	f001 f874 	bl	8009fb8 <__mcmp>
 8008ed0:	4632      	mov	r2, r6
 8008ed2:	9000      	str	r0, [sp, #0]
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f001 f888 	bl	8009fec <__mdiff>
 8008edc:	68c3      	ldr	r3, [r0, #12]
 8008ede:	4602      	mov	r2, r0
 8008ee0:	bb03      	cbnz	r3, 8008f24 <_dtoa_r+0x9fc>
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	9008      	str	r0, [sp, #32]
 8008ee6:	9804      	ldr	r0, [sp, #16]
 8008ee8:	f001 f866 	bl	8009fb8 <__mcmp>
 8008eec:	9a08      	ldr	r2, [sp, #32]
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	9308      	str	r3, [sp, #32]
 8008ef6:	f000 fe40 	bl	8009b7a <_Bfree>
 8008efa:	9b08      	ldr	r3, [sp, #32]
 8008efc:	b9a3      	cbnz	r3, 8008f28 <_dtoa_r+0xa00>
 8008efe:	9a06      	ldr	r2, [sp, #24]
 8008f00:	b992      	cbnz	r2, 8008f28 <_dtoa_r+0xa00>
 8008f02:	9a07      	ldr	r2, [sp, #28]
 8008f04:	b982      	cbnz	r2, 8008f28 <_dtoa_r+0xa00>
 8008f06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f0a:	d029      	beq.n	8008f60 <_dtoa_r+0xa38>
 8008f0c:	9b00      	ldr	r3, [sp, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dd01      	ble.n	8008f16 <_dtoa_r+0x9ee>
 8008f12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008f16:	9b05      	ldr	r3, [sp, #20]
 8008f18:	1c5d      	adds	r5, r3, #1
 8008f1a:	f883 8000 	strb.w	r8, [r3]
 8008f1e:	e782      	b.n	8008e26 <_dtoa_r+0x8fe>
 8008f20:	4630      	mov	r0, r6
 8008f22:	e7c2      	b.n	8008eaa <_dtoa_r+0x982>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7e3      	b.n	8008ef0 <_dtoa_r+0x9c8>
 8008f28:	9a00      	ldr	r2, [sp, #0]
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	db04      	blt.n	8008f38 <_dtoa_r+0xa10>
 8008f2e:	d125      	bne.n	8008f7c <_dtoa_r+0xa54>
 8008f30:	9a06      	ldr	r2, [sp, #24]
 8008f32:	bb1a      	cbnz	r2, 8008f7c <_dtoa_r+0xa54>
 8008f34:	9a07      	ldr	r2, [sp, #28]
 8008f36:	bb0a      	cbnz	r2, 8008f7c <_dtoa_r+0xa54>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	ddec      	ble.n	8008f16 <_dtoa_r+0x9ee>
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	9904      	ldr	r1, [sp, #16]
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 ffe5 	bl	8009f10 <__lshift>
 8008f46:	4639      	mov	r1, r7
 8008f48:	9004      	str	r0, [sp, #16]
 8008f4a:	f001 f835 	bl	8009fb8 <__mcmp>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	dc03      	bgt.n	8008f5a <_dtoa_r+0xa32>
 8008f52:	d1e0      	bne.n	8008f16 <_dtoa_r+0x9ee>
 8008f54:	f018 0f01 	tst.w	r8, #1
 8008f58:	d0dd      	beq.n	8008f16 <_dtoa_r+0x9ee>
 8008f5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f5e:	d1d8      	bne.n	8008f12 <_dtoa_r+0x9ea>
 8008f60:	9b05      	ldr	r3, [sp, #20]
 8008f62:	9a05      	ldr	r2, [sp, #20]
 8008f64:	1c5d      	adds	r5, r3, #1
 8008f66:	2339      	movs	r3, #57	; 0x39
 8008f68:	7013      	strb	r3, [r2, #0]
 8008f6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f6e:	2b39      	cmp	r3, #57	; 0x39
 8008f70:	f105 32ff 	add.w	r2, r5, #4294967295
 8008f74:	d04f      	beq.n	8009016 <_dtoa_r+0xaee>
 8008f76:	3301      	adds	r3, #1
 8008f78:	7013      	strb	r3, [r2, #0]
 8008f7a:	e754      	b.n	8008e26 <_dtoa_r+0x8fe>
 8008f7c:	9a05      	ldr	r2, [sp, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f102 0501 	add.w	r5, r2, #1
 8008f84:	dd06      	ble.n	8008f94 <_dtoa_r+0xa6c>
 8008f86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f8a:	d0e9      	beq.n	8008f60 <_dtoa_r+0xa38>
 8008f8c:	f108 0801 	add.w	r8, r8, #1
 8008f90:	9b05      	ldr	r3, [sp, #20]
 8008f92:	e7c2      	b.n	8008f1a <_dtoa_r+0x9f2>
 8008f94:	9a02      	ldr	r2, [sp, #8]
 8008f96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008f9a:	eba5 030b 	sub.w	r3, r5, fp
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d021      	beq.n	8008fe6 <_dtoa_r+0xabe>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	220a      	movs	r2, #10
 8008fa6:	9904      	ldr	r1, [sp, #16]
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fdfd 	bl	8009ba8 <__multadd>
 8008fae:	45b1      	cmp	r9, r6
 8008fb0:	9004      	str	r0, [sp, #16]
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	f04f 020a 	mov.w	r2, #10
 8008fba:	4649      	mov	r1, r9
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	d105      	bne.n	8008fcc <_dtoa_r+0xaa4>
 8008fc0:	f000 fdf2 	bl	8009ba8 <__multadd>
 8008fc4:	4681      	mov	r9, r0
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	9505      	str	r5, [sp, #20]
 8008fca:	e776      	b.n	8008eba <_dtoa_r+0x992>
 8008fcc:	f000 fdec 	bl	8009ba8 <__multadd>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4681      	mov	r9, r0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	220a      	movs	r2, #10
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 fde5 	bl	8009ba8 <__multadd>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	e7f2      	b.n	8008fc8 <_dtoa_r+0xaa0>
 8008fe2:	f04f 0900 	mov.w	r9, #0
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	9904      	ldr	r1, [sp, #16]
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 ff90 	bl	8009f10 <__lshift>
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	9004      	str	r0, [sp, #16]
 8008ff4:	f000 ffe0 	bl	8009fb8 <__mcmp>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	dcb6      	bgt.n	8008f6a <_dtoa_r+0xa42>
 8008ffc:	d102      	bne.n	8009004 <_dtoa_r+0xadc>
 8008ffe:	f018 0f01 	tst.w	r8, #1
 8009002:	d1b2      	bne.n	8008f6a <_dtoa_r+0xa42>
 8009004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009008:	2b30      	cmp	r3, #48	; 0x30
 800900a:	f105 32ff 	add.w	r2, r5, #4294967295
 800900e:	f47f af0a 	bne.w	8008e26 <_dtoa_r+0x8fe>
 8009012:	4615      	mov	r5, r2
 8009014:	e7f6      	b.n	8009004 <_dtoa_r+0xadc>
 8009016:	4593      	cmp	fp, r2
 8009018:	d105      	bne.n	8009026 <_dtoa_r+0xafe>
 800901a:	2331      	movs	r3, #49	; 0x31
 800901c:	f10a 0a01 	add.w	sl, sl, #1
 8009020:	f88b 3000 	strb.w	r3, [fp]
 8009024:	e6ff      	b.n	8008e26 <_dtoa_r+0x8fe>
 8009026:	4615      	mov	r5, r2
 8009028:	e79f      	b.n	8008f6a <_dtoa_r+0xa42>
 800902a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009090 <_dtoa_r+0xb68>
 800902e:	e007      	b.n	8009040 <_dtoa_r+0xb18>
 8009030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009032:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009094 <_dtoa_r+0xb6c>
 8009036:	b11b      	cbz	r3, 8009040 <_dtoa_r+0xb18>
 8009038:	f10b 0308 	add.w	r3, fp, #8
 800903c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	4658      	mov	r0, fp
 8009042:	b017      	add	sp, #92	; 0x5c
 8009044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009048:	9b06      	ldr	r3, [sp, #24]
 800904a:	2b01      	cmp	r3, #1
 800904c:	f77f ae35 	ble.w	8008cba <_dtoa_r+0x792>
 8009050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009052:	9307      	str	r3, [sp, #28]
 8009054:	e649      	b.n	8008cea <_dtoa_r+0x7c2>
 8009056:	9b02      	ldr	r3, [sp, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	dc03      	bgt.n	8009064 <_dtoa_r+0xb3c>
 800905c:	9b06      	ldr	r3, [sp, #24]
 800905e:	2b02      	cmp	r3, #2
 8009060:	f73f aecc 	bgt.w	8008dfc <_dtoa_r+0x8d4>
 8009064:	465d      	mov	r5, fp
 8009066:	4639      	mov	r1, r7
 8009068:	9804      	ldr	r0, [sp, #16]
 800906a:	f7ff f9cf 	bl	800840c <quorem>
 800906e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009072:	f805 8b01 	strb.w	r8, [r5], #1
 8009076:	9a02      	ldr	r2, [sp, #8]
 8009078:	eba5 030b 	sub.w	r3, r5, fp
 800907c:	429a      	cmp	r2, r3
 800907e:	ddb0      	ble.n	8008fe2 <_dtoa_r+0xaba>
 8009080:	2300      	movs	r3, #0
 8009082:	220a      	movs	r2, #10
 8009084:	9904      	ldr	r1, [sp, #16]
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fd8e 	bl	8009ba8 <__multadd>
 800908c:	9004      	str	r0, [sp, #16]
 800908e:	e7ea      	b.n	8009066 <_dtoa_r+0xb3e>
 8009090:	0800ad30 	.word	0x0800ad30
 8009094:	0800adb0 	.word	0x0800adb0

08009098 <__sflush_r>:
 8009098:	898a      	ldrh	r2, [r1, #12]
 800909a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	4605      	mov	r5, r0
 80090a0:	0710      	lsls	r0, r2, #28
 80090a2:	460c      	mov	r4, r1
 80090a4:	d458      	bmi.n	8009158 <__sflush_r+0xc0>
 80090a6:	684b      	ldr	r3, [r1, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dc05      	bgt.n	80090b8 <__sflush_r+0x20>
 80090ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dc02      	bgt.n	80090b8 <__sflush_r+0x20>
 80090b2:	2000      	movs	r0, #0
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d0f9      	beq.n	80090b2 <__sflush_r+0x1a>
 80090be:	2300      	movs	r3, #0
 80090c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090c4:	682f      	ldr	r7, [r5, #0]
 80090c6:	6a21      	ldr	r1, [r4, #32]
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	d032      	beq.n	8009132 <__sflush_r+0x9a>
 80090cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	075a      	lsls	r2, r3, #29
 80090d2:	d505      	bpl.n	80090e0 <__sflush_r+0x48>
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	1ac0      	subs	r0, r0, r3
 80090d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090da:	b10b      	cbz	r3, 80090e0 <__sflush_r+0x48>
 80090dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090de:	1ac0      	subs	r0, r0, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	4602      	mov	r2, r0
 80090e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090e6:	6a21      	ldr	r1, [r4, #32]
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b0      	blx	r6
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	d106      	bne.n	8009100 <__sflush_r+0x68>
 80090f2:	6829      	ldr	r1, [r5, #0]
 80090f4:	291d      	cmp	r1, #29
 80090f6:	d848      	bhi.n	800918a <__sflush_r+0xf2>
 80090f8:	4a29      	ldr	r2, [pc, #164]	; (80091a0 <__sflush_r+0x108>)
 80090fa:	40ca      	lsrs	r2, r1
 80090fc:	07d6      	lsls	r6, r2, #31
 80090fe:	d544      	bpl.n	800918a <__sflush_r+0xf2>
 8009100:	2200      	movs	r2, #0
 8009102:	6062      	str	r2, [r4, #4]
 8009104:	04d9      	lsls	r1, r3, #19
 8009106:	6922      	ldr	r2, [r4, #16]
 8009108:	6022      	str	r2, [r4, #0]
 800910a:	d504      	bpl.n	8009116 <__sflush_r+0x7e>
 800910c:	1c42      	adds	r2, r0, #1
 800910e:	d101      	bne.n	8009114 <__sflush_r+0x7c>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b903      	cbnz	r3, 8009116 <__sflush_r+0x7e>
 8009114:	6560      	str	r0, [r4, #84]	; 0x54
 8009116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009118:	602f      	str	r7, [r5, #0]
 800911a:	2900      	cmp	r1, #0
 800911c:	d0c9      	beq.n	80090b2 <__sflush_r+0x1a>
 800911e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009122:	4299      	cmp	r1, r3
 8009124:	d002      	beq.n	800912c <__sflush_r+0x94>
 8009126:	4628      	mov	r0, r5
 8009128:	f001 f900 	bl	800a32c <_free_r>
 800912c:	2000      	movs	r0, #0
 800912e:	6360      	str	r0, [r4, #52]	; 0x34
 8009130:	e7c0      	b.n	80090b4 <__sflush_r+0x1c>
 8009132:	2301      	movs	r3, #1
 8009134:	4628      	mov	r0, r5
 8009136:	47b0      	blx	r6
 8009138:	1c41      	adds	r1, r0, #1
 800913a:	d1c8      	bne.n	80090ce <__sflush_r+0x36>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0c5      	beq.n	80090ce <__sflush_r+0x36>
 8009142:	2b1d      	cmp	r3, #29
 8009144:	d001      	beq.n	800914a <__sflush_r+0xb2>
 8009146:	2b16      	cmp	r3, #22
 8009148:	d101      	bne.n	800914e <__sflush_r+0xb6>
 800914a:	602f      	str	r7, [r5, #0]
 800914c:	e7b1      	b.n	80090b2 <__sflush_r+0x1a>
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	e7ad      	b.n	80090b4 <__sflush_r+0x1c>
 8009158:	690f      	ldr	r7, [r1, #16]
 800915a:	2f00      	cmp	r7, #0
 800915c:	d0a9      	beq.n	80090b2 <__sflush_r+0x1a>
 800915e:	0793      	lsls	r3, r2, #30
 8009160:	680e      	ldr	r6, [r1, #0]
 8009162:	bf08      	it	eq
 8009164:	694b      	ldreq	r3, [r1, #20]
 8009166:	600f      	str	r7, [r1, #0]
 8009168:	bf18      	it	ne
 800916a:	2300      	movne	r3, #0
 800916c:	eba6 0807 	sub.w	r8, r6, r7
 8009170:	608b      	str	r3, [r1, #8]
 8009172:	f1b8 0f00 	cmp.w	r8, #0
 8009176:	dd9c      	ble.n	80090b2 <__sflush_r+0x1a>
 8009178:	4643      	mov	r3, r8
 800917a:	463a      	mov	r2, r7
 800917c:	6a21      	ldr	r1, [r4, #32]
 800917e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009180:	4628      	mov	r0, r5
 8009182:	47b0      	blx	r6
 8009184:	2800      	cmp	r0, #0
 8009186:	dc06      	bgt.n	8009196 <__sflush_r+0xfe>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	e78e      	b.n	80090b4 <__sflush_r+0x1c>
 8009196:	4407      	add	r7, r0
 8009198:	eba8 0800 	sub.w	r8, r8, r0
 800919c:	e7e9      	b.n	8009172 <__sflush_r+0xda>
 800919e:	bf00      	nop
 80091a0:	20400001 	.word	0x20400001

080091a4 <_fflush_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	4605      	mov	r5, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b1db      	cbz	r3, 80091e6 <_fflush_r+0x42>
 80091ae:	b118      	cbz	r0, 80091b8 <_fflush_r+0x14>
 80091b0:	6983      	ldr	r3, [r0, #24]
 80091b2:	b90b      	cbnz	r3, 80091b8 <_fflush_r+0x14>
 80091b4:	f000 f860 	bl	8009278 <__sinit>
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <_fflush_r+0x48>)
 80091ba:	429c      	cmp	r4, r3
 80091bc:	d109      	bne.n	80091d2 <_fflush_r+0x2e>
 80091be:	686c      	ldr	r4, [r5, #4]
 80091c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c4:	b17b      	cbz	r3, 80091e6 <_fflush_r+0x42>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ce:	f7ff bf63 	b.w	8009098 <__sflush_r>
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <_fflush_r+0x4c>)
 80091d4:	429c      	cmp	r4, r3
 80091d6:	d101      	bne.n	80091dc <_fflush_r+0x38>
 80091d8:	68ac      	ldr	r4, [r5, #8]
 80091da:	e7f1      	b.n	80091c0 <_fflush_r+0x1c>
 80091dc:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <_fflush_r+0x50>)
 80091de:	429c      	cmp	r4, r3
 80091e0:	bf08      	it	eq
 80091e2:	68ec      	ldreq	r4, [r5, #12]
 80091e4:	e7ec      	b.n	80091c0 <_fflush_r+0x1c>
 80091e6:	2000      	movs	r0, #0
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	bf00      	nop
 80091ec:	0800ade0 	.word	0x0800ade0
 80091f0:	0800ae00 	.word	0x0800ae00
 80091f4:	0800adc0 	.word	0x0800adc0

080091f8 <std>:
 80091f8:	2300      	movs	r3, #0
 80091fa:	b510      	push	{r4, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009202:	6083      	str	r3, [r0, #8]
 8009204:	8181      	strh	r1, [r0, #12]
 8009206:	6643      	str	r3, [r0, #100]	; 0x64
 8009208:	81c2      	strh	r2, [r0, #14]
 800920a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800920e:	6183      	str	r3, [r0, #24]
 8009210:	4619      	mov	r1, r3
 8009212:	2208      	movs	r2, #8
 8009214:	305c      	adds	r0, #92	; 0x5c
 8009216:	f7fd faa1 	bl	800675c <memset>
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <std+0x38>)
 800921c:	6263      	str	r3, [r4, #36]	; 0x24
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <std+0x3c>)
 8009220:	62a3      	str	r3, [r4, #40]	; 0x28
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <std+0x40>)
 8009224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <std+0x44>)
 8009228:	6224      	str	r4, [r4, #32]
 800922a:	6323      	str	r3, [r4, #48]	; 0x30
 800922c:	bd10      	pop	{r4, pc}
 800922e:	bf00      	nop
 8009230:	0800a9c1 	.word	0x0800a9c1
 8009234:	0800a9e3 	.word	0x0800a9e3
 8009238:	0800aa1b 	.word	0x0800aa1b
 800923c:	0800aa3f 	.word	0x0800aa3f

08009240 <_cleanup_r>:
 8009240:	4901      	ldr	r1, [pc, #4]	; (8009248 <_cleanup_r+0x8>)
 8009242:	f000 b885 	b.w	8009350 <_fwalk_reent>
 8009246:	bf00      	nop
 8009248:	080091a5 	.word	0x080091a5

0800924c <__sfmoreglue>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	1e4a      	subs	r2, r1, #1
 8009250:	2568      	movs	r5, #104	; 0x68
 8009252:	4355      	muls	r5, r2
 8009254:	460e      	mov	r6, r1
 8009256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800925a:	f001 f8b5 	bl	800a3c8 <_malloc_r>
 800925e:	4604      	mov	r4, r0
 8009260:	b140      	cbz	r0, 8009274 <__sfmoreglue+0x28>
 8009262:	2100      	movs	r1, #0
 8009264:	e9c0 1600 	strd	r1, r6, [r0]
 8009268:	300c      	adds	r0, #12
 800926a:	60a0      	str	r0, [r4, #8]
 800926c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009270:	f7fd fa74 	bl	800675c <memset>
 8009274:	4620      	mov	r0, r4
 8009276:	bd70      	pop	{r4, r5, r6, pc}

08009278 <__sinit>:
 8009278:	6983      	ldr	r3, [r0, #24]
 800927a:	b510      	push	{r4, lr}
 800927c:	4604      	mov	r4, r0
 800927e:	bb33      	cbnz	r3, 80092ce <__sinit+0x56>
 8009280:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009284:	6503      	str	r3, [r0, #80]	; 0x50
 8009286:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <__sinit+0x58>)
 8009288:	4a12      	ldr	r2, [pc, #72]	; (80092d4 <__sinit+0x5c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6282      	str	r2, [r0, #40]	; 0x28
 800928e:	4298      	cmp	r0, r3
 8009290:	bf04      	itt	eq
 8009292:	2301      	moveq	r3, #1
 8009294:	6183      	streq	r3, [r0, #24]
 8009296:	f000 f81f 	bl	80092d8 <__sfp>
 800929a:	6060      	str	r0, [r4, #4]
 800929c:	4620      	mov	r0, r4
 800929e:	f000 f81b 	bl	80092d8 <__sfp>
 80092a2:	60a0      	str	r0, [r4, #8]
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 f817 	bl	80092d8 <__sfp>
 80092aa:	2200      	movs	r2, #0
 80092ac:	60e0      	str	r0, [r4, #12]
 80092ae:	2104      	movs	r1, #4
 80092b0:	6860      	ldr	r0, [r4, #4]
 80092b2:	f7ff ffa1 	bl	80091f8 <std>
 80092b6:	2201      	movs	r2, #1
 80092b8:	2109      	movs	r1, #9
 80092ba:	68a0      	ldr	r0, [r4, #8]
 80092bc:	f7ff ff9c 	bl	80091f8 <std>
 80092c0:	2202      	movs	r2, #2
 80092c2:	2112      	movs	r1, #18
 80092c4:	68e0      	ldr	r0, [r4, #12]
 80092c6:	f7ff ff97 	bl	80091f8 <std>
 80092ca:	2301      	movs	r3, #1
 80092cc:	61a3      	str	r3, [r4, #24]
 80092ce:	bd10      	pop	{r4, pc}
 80092d0:	0800ad1c 	.word	0x0800ad1c
 80092d4:	08009241 	.word	0x08009241

080092d8 <__sfp>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <__sfp+0x70>)
 80092dc:	681e      	ldr	r6, [r3, #0]
 80092de:	69b3      	ldr	r3, [r6, #24]
 80092e0:	4607      	mov	r7, r0
 80092e2:	b913      	cbnz	r3, 80092ea <__sfp+0x12>
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff ffc7 	bl	8009278 <__sinit>
 80092ea:	3648      	adds	r6, #72	; 0x48
 80092ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	d503      	bpl.n	80092fc <__sfp+0x24>
 80092f4:	6833      	ldr	r3, [r6, #0]
 80092f6:	b133      	cbz	r3, 8009306 <__sfp+0x2e>
 80092f8:	6836      	ldr	r6, [r6, #0]
 80092fa:	e7f7      	b.n	80092ec <__sfp+0x14>
 80092fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009300:	b16d      	cbz	r5, 800931e <__sfp+0x46>
 8009302:	3468      	adds	r4, #104	; 0x68
 8009304:	e7f4      	b.n	80092f0 <__sfp+0x18>
 8009306:	2104      	movs	r1, #4
 8009308:	4638      	mov	r0, r7
 800930a:	f7ff ff9f 	bl	800924c <__sfmoreglue>
 800930e:	6030      	str	r0, [r6, #0]
 8009310:	2800      	cmp	r0, #0
 8009312:	d1f1      	bne.n	80092f8 <__sfp+0x20>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4604      	mov	r4, r0
 800931a:	4620      	mov	r0, r4
 800931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931e:	4b0b      	ldr	r3, [pc, #44]	; (800934c <__sfp+0x74>)
 8009320:	6665      	str	r5, [r4, #100]	; 0x64
 8009322:	e9c4 5500 	strd	r5, r5, [r4]
 8009326:	60a5      	str	r5, [r4, #8]
 8009328:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800932c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009330:	2208      	movs	r2, #8
 8009332:	4629      	mov	r1, r5
 8009334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009338:	f7fd fa10 	bl	800675c <memset>
 800933c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009344:	e7e9      	b.n	800931a <__sfp+0x42>
 8009346:	bf00      	nop
 8009348:	0800ad1c 	.word	0x0800ad1c
 800934c:	ffff0001 	.word	0xffff0001

08009350 <_fwalk_reent>:
 8009350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009354:	4680      	mov	r8, r0
 8009356:	4689      	mov	r9, r1
 8009358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800935c:	2600      	movs	r6, #0
 800935e:	b914      	cbnz	r4, 8009366 <_fwalk_reent+0x16>
 8009360:	4630      	mov	r0, r6
 8009362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009366:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800936a:	3f01      	subs	r7, #1
 800936c:	d501      	bpl.n	8009372 <_fwalk_reent+0x22>
 800936e:	6824      	ldr	r4, [r4, #0]
 8009370:	e7f5      	b.n	800935e <_fwalk_reent+0xe>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d907      	bls.n	8009388 <_fwalk_reent+0x38>
 8009378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800937c:	3301      	adds	r3, #1
 800937e:	d003      	beq.n	8009388 <_fwalk_reent+0x38>
 8009380:	4629      	mov	r1, r5
 8009382:	4640      	mov	r0, r8
 8009384:	47c8      	blx	r9
 8009386:	4306      	orrs	r6, r0
 8009388:	3568      	adds	r5, #104	; 0x68
 800938a:	e7ee      	b.n	800936a <_fwalk_reent+0x1a>

0800938c <rshift>:
 800938c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938e:	6906      	ldr	r6, [r0, #16]
 8009390:	114b      	asrs	r3, r1, #5
 8009392:	429e      	cmp	r6, r3
 8009394:	f100 0414 	add.w	r4, r0, #20
 8009398:	dd30      	ble.n	80093fc <rshift+0x70>
 800939a:	f011 011f 	ands.w	r1, r1, #31
 800939e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80093a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80093a6:	d108      	bne.n	80093ba <rshift+0x2e>
 80093a8:	4621      	mov	r1, r4
 80093aa:	42b2      	cmp	r2, r6
 80093ac:	460b      	mov	r3, r1
 80093ae:	d211      	bcs.n	80093d4 <rshift+0x48>
 80093b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80093b4:	f841 3b04 	str.w	r3, [r1], #4
 80093b8:	e7f7      	b.n	80093aa <rshift+0x1e>
 80093ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80093be:	f1c1 0c20 	rsb	ip, r1, #32
 80093c2:	40cd      	lsrs	r5, r1
 80093c4:	3204      	adds	r2, #4
 80093c6:	4623      	mov	r3, r4
 80093c8:	42b2      	cmp	r2, r6
 80093ca:	4617      	mov	r7, r2
 80093cc:	d30c      	bcc.n	80093e8 <rshift+0x5c>
 80093ce:	601d      	str	r5, [r3, #0]
 80093d0:	b105      	cbz	r5, 80093d4 <rshift+0x48>
 80093d2:	3304      	adds	r3, #4
 80093d4:	1b1a      	subs	r2, r3, r4
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093dc:	bf08      	it	eq
 80093de:	2300      	moveq	r3, #0
 80093e0:	6102      	str	r2, [r0, #16]
 80093e2:	bf08      	it	eq
 80093e4:	6143      	streq	r3, [r0, #20]
 80093e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e8:	683f      	ldr	r7, [r7, #0]
 80093ea:	fa07 f70c 	lsl.w	r7, r7, ip
 80093ee:	433d      	orrs	r5, r7
 80093f0:	f843 5b04 	str.w	r5, [r3], #4
 80093f4:	f852 5b04 	ldr.w	r5, [r2], #4
 80093f8:	40cd      	lsrs	r5, r1
 80093fa:	e7e5      	b.n	80093c8 <rshift+0x3c>
 80093fc:	4623      	mov	r3, r4
 80093fe:	e7e9      	b.n	80093d4 <rshift+0x48>

08009400 <__hexdig_fun>:
 8009400:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009404:	2b09      	cmp	r3, #9
 8009406:	d802      	bhi.n	800940e <__hexdig_fun+0xe>
 8009408:	3820      	subs	r0, #32
 800940a:	b2c0      	uxtb	r0, r0
 800940c:	4770      	bx	lr
 800940e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009412:	2b05      	cmp	r3, #5
 8009414:	d801      	bhi.n	800941a <__hexdig_fun+0x1a>
 8009416:	3847      	subs	r0, #71	; 0x47
 8009418:	e7f7      	b.n	800940a <__hexdig_fun+0xa>
 800941a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800941e:	2b05      	cmp	r3, #5
 8009420:	d801      	bhi.n	8009426 <__hexdig_fun+0x26>
 8009422:	3827      	subs	r0, #39	; 0x27
 8009424:	e7f1      	b.n	800940a <__hexdig_fun+0xa>
 8009426:	2000      	movs	r0, #0
 8009428:	4770      	bx	lr

0800942a <__gethex>:
 800942a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942e:	b08b      	sub	sp, #44	; 0x2c
 8009430:	468a      	mov	sl, r1
 8009432:	9002      	str	r0, [sp, #8]
 8009434:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009436:	9306      	str	r3, [sp, #24]
 8009438:	4690      	mov	r8, r2
 800943a:	f000 fad0 	bl	80099de <__localeconv_l>
 800943e:	6803      	ldr	r3, [r0, #0]
 8009440:	9303      	str	r3, [sp, #12]
 8009442:	4618      	mov	r0, r3
 8009444:	f7f6 fec4 	bl	80001d0 <strlen>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	9001      	str	r0, [sp, #4]
 800944c:	4403      	add	r3, r0
 800944e:	f04f 0b00 	mov.w	fp, #0
 8009452:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009456:	9307      	str	r3, [sp, #28]
 8009458:	f8da 3000 	ldr.w	r3, [sl]
 800945c:	3302      	adds	r3, #2
 800945e:	461f      	mov	r7, r3
 8009460:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009464:	2830      	cmp	r0, #48	; 0x30
 8009466:	d06c      	beq.n	8009542 <__gethex+0x118>
 8009468:	f7ff ffca 	bl	8009400 <__hexdig_fun>
 800946c:	4604      	mov	r4, r0
 800946e:	2800      	cmp	r0, #0
 8009470:	d16a      	bne.n	8009548 <__gethex+0x11e>
 8009472:	9a01      	ldr	r2, [sp, #4]
 8009474:	9903      	ldr	r1, [sp, #12]
 8009476:	4638      	mov	r0, r7
 8009478:	f001 fae5 	bl	800aa46 <strncmp>
 800947c:	2800      	cmp	r0, #0
 800947e:	d166      	bne.n	800954e <__gethex+0x124>
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	5cf8      	ldrb	r0, [r7, r3]
 8009484:	18fe      	adds	r6, r7, r3
 8009486:	f7ff ffbb 	bl	8009400 <__hexdig_fun>
 800948a:	2800      	cmp	r0, #0
 800948c:	d062      	beq.n	8009554 <__gethex+0x12a>
 800948e:	4633      	mov	r3, r6
 8009490:	7818      	ldrb	r0, [r3, #0]
 8009492:	2830      	cmp	r0, #48	; 0x30
 8009494:	461f      	mov	r7, r3
 8009496:	f103 0301 	add.w	r3, r3, #1
 800949a:	d0f9      	beq.n	8009490 <__gethex+0x66>
 800949c:	f7ff ffb0 	bl	8009400 <__hexdig_fun>
 80094a0:	fab0 f580 	clz	r5, r0
 80094a4:	096d      	lsrs	r5, r5, #5
 80094a6:	4634      	mov	r4, r6
 80094a8:	f04f 0b01 	mov.w	fp, #1
 80094ac:	463a      	mov	r2, r7
 80094ae:	4616      	mov	r6, r2
 80094b0:	3201      	adds	r2, #1
 80094b2:	7830      	ldrb	r0, [r6, #0]
 80094b4:	f7ff ffa4 	bl	8009400 <__hexdig_fun>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1f8      	bne.n	80094ae <__gethex+0x84>
 80094bc:	9a01      	ldr	r2, [sp, #4]
 80094be:	9903      	ldr	r1, [sp, #12]
 80094c0:	4630      	mov	r0, r6
 80094c2:	f001 fac0 	bl	800aa46 <strncmp>
 80094c6:	b950      	cbnz	r0, 80094de <__gethex+0xb4>
 80094c8:	b954      	cbnz	r4, 80094e0 <__gethex+0xb6>
 80094ca:	9b01      	ldr	r3, [sp, #4]
 80094cc:	18f4      	adds	r4, r6, r3
 80094ce:	4622      	mov	r2, r4
 80094d0:	4616      	mov	r6, r2
 80094d2:	3201      	adds	r2, #1
 80094d4:	7830      	ldrb	r0, [r6, #0]
 80094d6:	f7ff ff93 	bl	8009400 <__hexdig_fun>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d1f8      	bne.n	80094d0 <__gethex+0xa6>
 80094de:	b10c      	cbz	r4, 80094e4 <__gethex+0xba>
 80094e0:	1ba4      	subs	r4, r4, r6
 80094e2:	00a4      	lsls	r4, r4, #2
 80094e4:	7833      	ldrb	r3, [r6, #0]
 80094e6:	2b50      	cmp	r3, #80	; 0x50
 80094e8:	d001      	beq.n	80094ee <__gethex+0xc4>
 80094ea:	2b70      	cmp	r3, #112	; 0x70
 80094ec:	d140      	bne.n	8009570 <__gethex+0x146>
 80094ee:	7873      	ldrb	r3, [r6, #1]
 80094f0:	2b2b      	cmp	r3, #43	; 0x2b
 80094f2:	d031      	beq.n	8009558 <__gethex+0x12e>
 80094f4:	2b2d      	cmp	r3, #45	; 0x2d
 80094f6:	d033      	beq.n	8009560 <__gethex+0x136>
 80094f8:	1c71      	adds	r1, r6, #1
 80094fa:	f04f 0900 	mov.w	r9, #0
 80094fe:	7808      	ldrb	r0, [r1, #0]
 8009500:	f7ff ff7e 	bl	8009400 <__hexdig_fun>
 8009504:	1e43      	subs	r3, r0, #1
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b18      	cmp	r3, #24
 800950a:	d831      	bhi.n	8009570 <__gethex+0x146>
 800950c:	f1a0 0210 	sub.w	r2, r0, #16
 8009510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009514:	f7ff ff74 	bl	8009400 <__hexdig_fun>
 8009518:	1e43      	subs	r3, r0, #1
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b18      	cmp	r3, #24
 800951e:	d922      	bls.n	8009566 <__gethex+0x13c>
 8009520:	f1b9 0f00 	cmp.w	r9, #0
 8009524:	d000      	beq.n	8009528 <__gethex+0xfe>
 8009526:	4252      	negs	r2, r2
 8009528:	4414      	add	r4, r2
 800952a:	f8ca 1000 	str.w	r1, [sl]
 800952e:	b30d      	cbz	r5, 8009574 <__gethex+0x14a>
 8009530:	f1bb 0f00 	cmp.w	fp, #0
 8009534:	bf0c      	ite	eq
 8009536:	2706      	moveq	r7, #6
 8009538:	2700      	movne	r7, #0
 800953a:	4638      	mov	r0, r7
 800953c:	b00b      	add	sp, #44	; 0x2c
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009542:	f10b 0b01 	add.w	fp, fp, #1
 8009546:	e78a      	b.n	800945e <__gethex+0x34>
 8009548:	2500      	movs	r5, #0
 800954a:	462c      	mov	r4, r5
 800954c:	e7ae      	b.n	80094ac <__gethex+0x82>
 800954e:	463e      	mov	r6, r7
 8009550:	2501      	movs	r5, #1
 8009552:	e7c7      	b.n	80094e4 <__gethex+0xba>
 8009554:	4604      	mov	r4, r0
 8009556:	e7fb      	b.n	8009550 <__gethex+0x126>
 8009558:	f04f 0900 	mov.w	r9, #0
 800955c:	1cb1      	adds	r1, r6, #2
 800955e:	e7ce      	b.n	80094fe <__gethex+0xd4>
 8009560:	f04f 0901 	mov.w	r9, #1
 8009564:	e7fa      	b.n	800955c <__gethex+0x132>
 8009566:	230a      	movs	r3, #10
 8009568:	fb03 0202 	mla	r2, r3, r2, r0
 800956c:	3a10      	subs	r2, #16
 800956e:	e7cf      	b.n	8009510 <__gethex+0xe6>
 8009570:	4631      	mov	r1, r6
 8009572:	e7da      	b.n	800952a <__gethex+0x100>
 8009574:	1bf3      	subs	r3, r6, r7
 8009576:	3b01      	subs	r3, #1
 8009578:	4629      	mov	r1, r5
 800957a:	2b07      	cmp	r3, #7
 800957c:	dc49      	bgt.n	8009612 <__gethex+0x1e8>
 800957e:	9802      	ldr	r0, [sp, #8]
 8009580:	f000 fac7 	bl	8009b12 <_Balloc>
 8009584:	9b01      	ldr	r3, [sp, #4]
 8009586:	f100 0914 	add.w	r9, r0, #20
 800958a:	f04f 0b00 	mov.w	fp, #0
 800958e:	f1c3 0301 	rsb	r3, r3, #1
 8009592:	4605      	mov	r5, r0
 8009594:	f8cd 9010 	str.w	r9, [sp, #16]
 8009598:	46da      	mov	sl, fp
 800959a:	9308      	str	r3, [sp, #32]
 800959c:	42b7      	cmp	r7, r6
 800959e:	d33b      	bcc.n	8009618 <__gethex+0x1ee>
 80095a0:	9804      	ldr	r0, [sp, #16]
 80095a2:	f840 ab04 	str.w	sl, [r0], #4
 80095a6:	eba0 0009 	sub.w	r0, r0, r9
 80095aa:	1080      	asrs	r0, r0, #2
 80095ac:	6128      	str	r0, [r5, #16]
 80095ae:	0147      	lsls	r7, r0, #5
 80095b0:	4650      	mov	r0, sl
 80095b2:	f000 fb72 	bl	8009c9a <__hi0bits>
 80095b6:	f8d8 6000 	ldr.w	r6, [r8]
 80095ba:	1a3f      	subs	r7, r7, r0
 80095bc:	42b7      	cmp	r7, r6
 80095be:	dd64      	ble.n	800968a <__gethex+0x260>
 80095c0:	1bbf      	subs	r7, r7, r6
 80095c2:	4639      	mov	r1, r7
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 fe81 	bl	800a2cc <__any_on>
 80095ca:	4682      	mov	sl, r0
 80095cc:	b178      	cbz	r0, 80095ee <__gethex+0x1c4>
 80095ce:	1e7b      	subs	r3, r7, #1
 80095d0:	1159      	asrs	r1, r3, #5
 80095d2:	f003 021f 	and.w	r2, r3, #31
 80095d6:	f04f 0a01 	mov.w	sl, #1
 80095da:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80095de:	fa0a f202 	lsl.w	r2, sl, r2
 80095e2:	420a      	tst	r2, r1
 80095e4:	d003      	beq.n	80095ee <__gethex+0x1c4>
 80095e6:	4553      	cmp	r3, sl
 80095e8:	dc46      	bgt.n	8009678 <__gethex+0x24e>
 80095ea:	f04f 0a02 	mov.w	sl, #2
 80095ee:	4639      	mov	r1, r7
 80095f0:	4628      	mov	r0, r5
 80095f2:	f7ff fecb 	bl	800938c <rshift>
 80095f6:	443c      	add	r4, r7
 80095f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	da52      	bge.n	80096a6 <__gethex+0x27c>
 8009600:	4629      	mov	r1, r5
 8009602:	9802      	ldr	r0, [sp, #8]
 8009604:	f000 fab9 	bl	8009b7a <_Bfree>
 8009608:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800960a:	2300      	movs	r3, #0
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	27a3      	movs	r7, #163	; 0xa3
 8009610:	e793      	b.n	800953a <__gethex+0x110>
 8009612:	3101      	adds	r1, #1
 8009614:	105b      	asrs	r3, r3, #1
 8009616:	e7b0      	b.n	800957a <__gethex+0x150>
 8009618:	1e73      	subs	r3, r6, #1
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	9a07      	ldr	r2, [sp, #28]
 800961e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009622:	4293      	cmp	r3, r2
 8009624:	d018      	beq.n	8009658 <__gethex+0x22e>
 8009626:	f1bb 0f20 	cmp.w	fp, #32
 800962a:	d107      	bne.n	800963c <__gethex+0x212>
 800962c:	9b04      	ldr	r3, [sp, #16]
 800962e:	f8c3 a000 	str.w	sl, [r3]
 8009632:	3304      	adds	r3, #4
 8009634:	f04f 0a00 	mov.w	sl, #0
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	46d3      	mov	fp, sl
 800963c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009640:	f7ff fede 	bl	8009400 <__hexdig_fun>
 8009644:	f000 000f 	and.w	r0, r0, #15
 8009648:	fa00 f00b 	lsl.w	r0, r0, fp
 800964c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009650:	f10b 0b04 	add.w	fp, fp, #4
 8009654:	9b05      	ldr	r3, [sp, #20]
 8009656:	e00d      	b.n	8009674 <__gethex+0x24a>
 8009658:	9b05      	ldr	r3, [sp, #20]
 800965a:	9a08      	ldr	r2, [sp, #32]
 800965c:	4413      	add	r3, r2
 800965e:	42bb      	cmp	r3, r7
 8009660:	d3e1      	bcc.n	8009626 <__gethex+0x1fc>
 8009662:	4618      	mov	r0, r3
 8009664:	9a01      	ldr	r2, [sp, #4]
 8009666:	9903      	ldr	r1, [sp, #12]
 8009668:	9309      	str	r3, [sp, #36]	; 0x24
 800966a:	f001 f9ec 	bl	800aa46 <strncmp>
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	2800      	cmp	r0, #0
 8009672:	d1d8      	bne.n	8009626 <__gethex+0x1fc>
 8009674:	461e      	mov	r6, r3
 8009676:	e791      	b.n	800959c <__gethex+0x172>
 8009678:	1eb9      	subs	r1, r7, #2
 800967a:	4628      	mov	r0, r5
 800967c:	f000 fe26 	bl	800a2cc <__any_on>
 8009680:	2800      	cmp	r0, #0
 8009682:	d0b2      	beq.n	80095ea <__gethex+0x1c0>
 8009684:	f04f 0a03 	mov.w	sl, #3
 8009688:	e7b1      	b.n	80095ee <__gethex+0x1c4>
 800968a:	da09      	bge.n	80096a0 <__gethex+0x276>
 800968c:	1bf7      	subs	r7, r6, r7
 800968e:	4629      	mov	r1, r5
 8009690:	463a      	mov	r2, r7
 8009692:	9802      	ldr	r0, [sp, #8]
 8009694:	f000 fc3c 	bl	8009f10 <__lshift>
 8009698:	1be4      	subs	r4, r4, r7
 800969a:	4605      	mov	r5, r0
 800969c:	f100 0914 	add.w	r9, r0, #20
 80096a0:	f04f 0a00 	mov.w	sl, #0
 80096a4:	e7a8      	b.n	80095f8 <__gethex+0x1ce>
 80096a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096aa:	42a0      	cmp	r0, r4
 80096ac:	dd6a      	ble.n	8009784 <__gethex+0x35a>
 80096ae:	1b04      	subs	r4, r0, r4
 80096b0:	42a6      	cmp	r6, r4
 80096b2:	dc2e      	bgt.n	8009712 <__gethex+0x2e8>
 80096b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d022      	beq.n	8009702 <__gethex+0x2d8>
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d024      	beq.n	800970a <__gethex+0x2e0>
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d115      	bne.n	80096f0 <__gethex+0x2c6>
 80096c4:	42a6      	cmp	r6, r4
 80096c6:	d113      	bne.n	80096f0 <__gethex+0x2c6>
 80096c8:	2e01      	cmp	r6, #1
 80096ca:	dc0b      	bgt.n	80096e4 <__gethex+0x2ba>
 80096cc:	9a06      	ldr	r2, [sp, #24]
 80096ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	2301      	movs	r3, #1
 80096d6:	612b      	str	r3, [r5, #16]
 80096d8:	f8c9 3000 	str.w	r3, [r9]
 80096dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096de:	2762      	movs	r7, #98	; 0x62
 80096e0:	601d      	str	r5, [r3, #0]
 80096e2:	e72a      	b.n	800953a <__gethex+0x110>
 80096e4:	1e71      	subs	r1, r6, #1
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 fdf0 	bl	800a2cc <__any_on>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1ed      	bne.n	80096cc <__gethex+0x2a2>
 80096f0:	4629      	mov	r1, r5
 80096f2:	9802      	ldr	r0, [sp, #8]
 80096f4:	f000 fa41 	bl	8009b7a <_Bfree>
 80096f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096fa:	2300      	movs	r3, #0
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	2750      	movs	r7, #80	; 0x50
 8009700:	e71b      	b.n	800953a <__gethex+0x110>
 8009702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0e1      	beq.n	80096cc <__gethex+0x2a2>
 8009708:	e7f2      	b.n	80096f0 <__gethex+0x2c6>
 800970a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1dd      	bne.n	80096cc <__gethex+0x2a2>
 8009710:	e7ee      	b.n	80096f0 <__gethex+0x2c6>
 8009712:	1e67      	subs	r7, r4, #1
 8009714:	f1ba 0f00 	cmp.w	sl, #0
 8009718:	d131      	bne.n	800977e <__gethex+0x354>
 800971a:	b127      	cbz	r7, 8009726 <__gethex+0x2fc>
 800971c:	4639      	mov	r1, r7
 800971e:	4628      	mov	r0, r5
 8009720:	f000 fdd4 	bl	800a2cc <__any_on>
 8009724:	4682      	mov	sl, r0
 8009726:	117a      	asrs	r2, r7, #5
 8009728:	2301      	movs	r3, #1
 800972a:	f007 071f 	and.w	r7, r7, #31
 800972e:	fa03 f707 	lsl.w	r7, r3, r7
 8009732:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009736:	4621      	mov	r1, r4
 8009738:	421f      	tst	r7, r3
 800973a:	4628      	mov	r0, r5
 800973c:	bf18      	it	ne
 800973e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009742:	1b36      	subs	r6, r6, r4
 8009744:	f7ff fe22 	bl	800938c <rshift>
 8009748:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800974c:	2702      	movs	r7, #2
 800974e:	f1ba 0f00 	cmp.w	sl, #0
 8009752:	d048      	beq.n	80097e6 <__gethex+0x3bc>
 8009754:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d015      	beq.n	8009788 <__gethex+0x35e>
 800975c:	2b03      	cmp	r3, #3
 800975e:	d017      	beq.n	8009790 <__gethex+0x366>
 8009760:	2b01      	cmp	r3, #1
 8009762:	d109      	bne.n	8009778 <__gethex+0x34e>
 8009764:	f01a 0f02 	tst.w	sl, #2
 8009768:	d006      	beq.n	8009778 <__gethex+0x34e>
 800976a:	f8d9 3000 	ldr.w	r3, [r9]
 800976e:	ea4a 0a03 	orr.w	sl, sl, r3
 8009772:	f01a 0f01 	tst.w	sl, #1
 8009776:	d10e      	bne.n	8009796 <__gethex+0x36c>
 8009778:	f047 0710 	orr.w	r7, r7, #16
 800977c:	e033      	b.n	80097e6 <__gethex+0x3bc>
 800977e:	f04f 0a01 	mov.w	sl, #1
 8009782:	e7d0      	b.n	8009726 <__gethex+0x2fc>
 8009784:	2701      	movs	r7, #1
 8009786:	e7e2      	b.n	800974e <__gethex+0x324>
 8009788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800978a:	f1c3 0301 	rsb	r3, r3, #1
 800978e:	9315      	str	r3, [sp, #84]	; 0x54
 8009790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0f0      	beq.n	8009778 <__gethex+0x34e>
 8009796:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800979a:	f105 0314 	add.w	r3, r5, #20
 800979e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80097a2:	eb03 010a 	add.w	r1, r3, sl
 80097a6:	f04f 0c00 	mov.w	ip, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097b4:	d01c      	beq.n	80097f0 <__gethex+0x3c6>
 80097b6:	3201      	adds	r2, #1
 80097b8:	6002      	str	r2, [r0, #0]
 80097ba:	2f02      	cmp	r7, #2
 80097bc:	f105 0314 	add.w	r3, r5, #20
 80097c0:	d138      	bne.n	8009834 <__gethex+0x40a>
 80097c2:	f8d8 2000 	ldr.w	r2, [r8]
 80097c6:	3a01      	subs	r2, #1
 80097c8:	42b2      	cmp	r2, r6
 80097ca:	d10a      	bne.n	80097e2 <__gethex+0x3b8>
 80097cc:	1171      	asrs	r1, r6, #5
 80097ce:	2201      	movs	r2, #1
 80097d0:	f006 061f 	and.w	r6, r6, #31
 80097d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097d8:	fa02 f606 	lsl.w	r6, r2, r6
 80097dc:	421e      	tst	r6, r3
 80097de:	bf18      	it	ne
 80097e0:	4617      	movne	r7, r2
 80097e2:	f047 0720 	orr.w	r7, r7, #32
 80097e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097e8:	601d      	str	r5, [r3, #0]
 80097ea:	9b06      	ldr	r3, [sp, #24]
 80097ec:	601c      	str	r4, [r3, #0]
 80097ee:	e6a4      	b.n	800953a <__gethex+0x110>
 80097f0:	4299      	cmp	r1, r3
 80097f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80097f6:	d8d8      	bhi.n	80097aa <__gethex+0x380>
 80097f8:	68ab      	ldr	r3, [r5, #8]
 80097fa:	4599      	cmp	r9, r3
 80097fc:	db12      	blt.n	8009824 <__gethex+0x3fa>
 80097fe:	6869      	ldr	r1, [r5, #4]
 8009800:	9802      	ldr	r0, [sp, #8]
 8009802:	3101      	adds	r1, #1
 8009804:	f000 f985 	bl	8009b12 <_Balloc>
 8009808:	692a      	ldr	r2, [r5, #16]
 800980a:	3202      	adds	r2, #2
 800980c:	f105 010c 	add.w	r1, r5, #12
 8009810:	4683      	mov	fp, r0
 8009812:	0092      	lsls	r2, r2, #2
 8009814:	300c      	adds	r0, #12
 8009816:	f000 f971 	bl	8009afc <memcpy>
 800981a:	4629      	mov	r1, r5
 800981c:	9802      	ldr	r0, [sp, #8]
 800981e:	f000 f9ac 	bl	8009b7a <_Bfree>
 8009822:	465d      	mov	r5, fp
 8009824:	692b      	ldr	r3, [r5, #16]
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800982c:	612a      	str	r2, [r5, #16]
 800982e:	2201      	movs	r2, #1
 8009830:	615a      	str	r2, [r3, #20]
 8009832:	e7c2      	b.n	80097ba <__gethex+0x390>
 8009834:	692a      	ldr	r2, [r5, #16]
 8009836:	454a      	cmp	r2, r9
 8009838:	dd0b      	ble.n	8009852 <__gethex+0x428>
 800983a:	2101      	movs	r1, #1
 800983c:	4628      	mov	r0, r5
 800983e:	f7ff fda5 	bl	800938c <rshift>
 8009842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009846:	3401      	adds	r4, #1
 8009848:	42a3      	cmp	r3, r4
 800984a:	f6ff aed9 	blt.w	8009600 <__gethex+0x1d6>
 800984e:	2701      	movs	r7, #1
 8009850:	e7c7      	b.n	80097e2 <__gethex+0x3b8>
 8009852:	f016 061f 	ands.w	r6, r6, #31
 8009856:	d0fa      	beq.n	800984e <__gethex+0x424>
 8009858:	449a      	add	sl, r3
 800985a:	f1c6 0620 	rsb	r6, r6, #32
 800985e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009862:	f000 fa1a 	bl	8009c9a <__hi0bits>
 8009866:	42b0      	cmp	r0, r6
 8009868:	dbe7      	blt.n	800983a <__gethex+0x410>
 800986a:	e7f0      	b.n	800984e <__gethex+0x424>

0800986c <L_shift>:
 800986c:	f1c2 0208 	rsb	r2, r2, #8
 8009870:	0092      	lsls	r2, r2, #2
 8009872:	b570      	push	{r4, r5, r6, lr}
 8009874:	f1c2 0620 	rsb	r6, r2, #32
 8009878:	6843      	ldr	r3, [r0, #4]
 800987a:	6804      	ldr	r4, [r0, #0]
 800987c:	fa03 f506 	lsl.w	r5, r3, r6
 8009880:	432c      	orrs	r4, r5
 8009882:	40d3      	lsrs	r3, r2
 8009884:	6004      	str	r4, [r0, #0]
 8009886:	f840 3f04 	str.w	r3, [r0, #4]!
 800988a:	4288      	cmp	r0, r1
 800988c:	d3f4      	bcc.n	8009878 <L_shift+0xc>
 800988e:	bd70      	pop	{r4, r5, r6, pc}

08009890 <__match>:
 8009890:	b530      	push	{r4, r5, lr}
 8009892:	6803      	ldr	r3, [r0, #0]
 8009894:	3301      	adds	r3, #1
 8009896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989a:	b914      	cbnz	r4, 80098a2 <__match+0x12>
 800989c:	6003      	str	r3, [r0, #0]
 800989e:	2001      	movs	r0, #1
 80098a0:	bd30      	pop	{r4, r5, pc}
 80098a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098aa:	2d19      	cmp	r5, #25
 80098ac:	bf98      	it	ls
 80098ae:	3220      	addls	r2, #32
 80098b0:	42a2      	cmp	r2, r4
 80098b2:	d0f0      	beq.n	8009896 <__match+0x6>
 80098b4:	2000      	movs	r0, #0
 80098b6:	e7f3      	b.n	80098a0 <__match+0x10>

080098b8 <__hexnan>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	680b      	ldr	r3, [r1, #0]
 80098be:	6801      	ldr	r1, [r0, #0]
 80098c0:	115f      	asrs	r7, r3, #5
 80098c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80098c6:	f013 031f 	ands.w	r3, r3, #31
 80098ca:	b087      	sub	sp, #28
 80098cc:	bf18      	it	ne
 80098ce:	3704      	addne	r7, #4
 80098d0:	2500      	movs	r5, #0
 80098d2:	1f3e      	subs	r6, r7, #4
 80098d4:	4682      	mov	sl, r0
 80098d6:	4690      	mov	r8, r2
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	f847 5c04 	str.w	r5, [r7, #-4]
 80098de:	46b1      	mov	r9, r6
 80098e0:	4634      	mov	r4, r6
 80098e2:	9502      	str	r5, [sp, #8]
 80098e4:	46ab      	mov	fp, r5
 80098e6:	784a      	ldrb	r2, [r1, #1]
 80098e8:	1c4b      	adds	r3, r1, #1
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	b342      	cbz	r2, 8009940 <__hexnan+0x88>
 80098ee:	4610      	mov	r0, r2
 80098f0:	9105      	str	r1, [sp, #20]
 80098f2:	9204      	str	r2, [sp, #16]
 80098f4:	f7ff fd84 	bl	8009400 <__hexdig_fun>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d143      	bne.n	8009984 <__hexnan+0xcc>
 80098fc:	9a04      	ldr	r2, [sp, #16]
 80098fe:	9905      	ldr	r1, [sp, #20]
 8009900:	2a20      	cmp	r2, #32
 8009902:	d818      	bhi.n	8009936 <__hexnan+0x7e>
 8009904:	9b02      	ldr	r3, [sp, #8]
 8009906:	459b      	cmp	fp, r3
 8009908:	dd13      	ble.n	8009932 <__hexnan+0x7a>
 800990a:	454c      	cmp	r4, r9
 800990c:	d206      	bcs.n	800991c <__hexnan+0x64>
 800990e:	2d07      	cmp	r5, #7
 8009910:	dc04      	bgt.n	800991c <__hexnan+0x64>
 8009912:	462a      	mov	r2, r5
 8009914:	4649      	mov	r1, r9
 8009916:	4620      	mov	r0, r4
 8009918:	f7ff ffa8 	bl	800986c <L_shift>
 800991c:	4544      	cmp	r4, r8
 800991e:	d944      	bls.n	80099aa <__hexnan+0xf2>
 8009920:	2300      	movs	r3, #0
 8009922:	f1a4 0904 	sub.w	r9, r4, #4
 8009926:	f844 3c04 	str.w	r3, [r4, #-4]
 800992a:	f8cd b008 	str.w	fp, [sp, #8]
 800992e:	464c      	mov	r4, r9
 8009930:	461d      	mov	r5, r3
 8009932:	9903      	ldr	r1, [sp, #12]
 8009934:	e7d7      	b.n	80098e6 <__hexnan+0x2e>
 8009936:	2a29      	cmp	r2, #41	; 0x29
 8009938:	d14a      	bne.n	80099d0 <__hexnan+0x118>
 800993a:	3102      	adds	r1, #2
 800993c:	f8ca 1000 	str.w	r1, [sl]
 8009940:	f1bb 0f00 	cmp.w	fp, #0
 8009944:	d044      	beq.n	80099d0 <__hexnan+0x118>
 8009946:	454c      	cmp	r4, r9
 8009948:	d206      	bcs.n	8009958 <__hexnan+0xa0>
 800994a:	2d07      	cmp	r5, #7
 800994c:	dc04      	bgt.n	8009958 <__hexnan+0xa0>
 800994e:	462a      	mov	r2, r5
 8009950:	4649      	mov	r1, r9
 8009952:	4620      	mov	r0, r4
 8009954:	f7ff ff8a 	bl	800986c <L_shift>
 8009958:	4544      	cmp	r4, r8
 800995a:	d928      	bls.n	80099ae <__hexnan+0xf6>
 800995c:	4643      	mov	r3, r8
 800995e:	f854 2b04 	ldr.w	r2, [r4], #4
 8009962:	f843 2b04 	str.w	r2, [r3], #4
 8009966:	42a6      	cmp	r6, r4
 8009968:	d2f9      	bcs.n	800995e <__hexnan+0xa6>
 800996a:	2200      	movs	r2, #0
 800996c:	f843 2b04 	str.w	r2, [r3], #4
 8009970:	429e      	cmp	r6, r3
 8009972:	d2fb      	bcs.n	800996c <__hexnan+0xb4>
 8009974:	6833      	ldr	r3, [r6, #0]
 8009976:	b91b      	cbnz	r3, 8009980 <__hexnan+0xc8>
 8009978:	4546      	cmp	r6, r8
 800997a:	d127      	bne.n	80099cc <__hexnan+0x114>
 800997c:	2301      	movs	r3, #1
 800997e:	6033      	str	r3, [r6, #0]
 8009980:	2005      	movs	r0, #5
 8009982:	e026      	b.n	80099d2 <__hexnan+0x11a>
 8009984:	3501      	adds	r5, #1
 8009986:	2d08      	cmp	r5, #8
 8009988:	f10b 0b01 	add.w	fp, fp, #1
 800998c:	dd06      	ble.n	800999c <__hexnan+0xe4>
 800998e:	4544      	cmp	r4, r8
 8009990:	d9cf      	bls.n	8009932 <__hexnan+0x7a>
 8009992:	2300      	movs	r3, #0
 8009994:	f844 3c04 	str.w	r3, [r4, #-4]
 8009998:	2501      	movs	r5, #1
 800999a:	3c04      	subs	r4, #4
 800999c:	6822      	ldr	r2, [r4, #0]
 800999e:	f000 000f 	and.w	r0, r0, #15
 80099a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099a6:	6020      	str	r0, [r4, #0]
 80099a8:	e7c3      	b.n	8009932 <__hexnan+0x7a>
 80099aa:	2508      	movs	r5, #8
 80099ac:	e7c1      	b.n	8009932 <__hexnan+0x7a>
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d0df      	beq.n	8009974 <__hexnan+0xbc>
 80099b4:	f04f 32ff 	mov.w	r2, #4294967295
 80099b8:	f1c3 0320 	rsb	r3, r3, #32
 80099bc:	fa22 f303 	lsr.w	r3, r2, r3
 80099c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80099c4:	401a      	ands	r2, r3
 80099c6:	f847 2c04 	str.w	r2, [r7, #-4]
 80099ca:	e7d3      	b.n	8009974 <__hexnan+0xbc>
 80099cc:	3e04      	subs	r6, #4
 80099ce:	e7d1      	b.n	8009974 <__hexnan+0xbc>
 80099d0:	2004      	movs	r0, #4
 80099d2:	b007      	add	sp, #28
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099d8 <__locale_ctype_ptr_l>:
 80099d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80099dc:	4770      	bx	lr

080099de <__localeconv_l>:
 80099de:	30f0      	adds	r0, #240	; 0xf0
 80099e0:	4770      	bx	lr
	...

080099e4 <_localeconv_r>:
 80099e4:	4b04      	ldr	r3, [pc, #16]	; (80099f8 <_localeconv_r+0x14>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6a18      	ldr	r0, [r3, #32]
 80099ea:	4b04      	ldr	r3, [pc, #16]	; (80099fc <_localeconv_r+0x18>)
 80099ec:	2800      	cmp	r0, #0
 80099ee:	bf08      	it	eq
 80099f0:	4618      	moveq	r0, r3
 80099f2:	30f0      	adds	r0, #240	; 0xf0
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	20000010 	.word	0x20000010
 80099fc:	20000074 	.word	0x20000074

08009a00 <__swhatbuf_r>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	460e      	mov	r6, r1
 8009a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	b096      	sub	sp, #88	; 0x58
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	461d      	mov	r5, r3
 8009a10:	da07      	bge.n	8009a22 <__swhatbuf_r+0x22>
 8009a12:	2300      	movs	r3, #0
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	89b3      	ldrh	r3, [r6, #12]
 8009a18:	061a      	lsls	r2, r3, #24
 8009a1a:	d410      	bmi.n	8009a3e <__swhatbuf_r+0x3e>
 8009a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a20:	e00e      	b.n	8009a40 <__swhatbuf_r+0x40>
 8009a22:	466a      	mov	r2, sp
 8009a24:	f001 f850 	bl	800aac8 <_fstat_r>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	dbf2      	blt.n	8009a12 <__swhatbuf_r+0x12>
 8009a2c:	9a01      	ldr	r2, [sp, #4]
 8009a2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a36:	425a      	negs	r2, r3
 8009a38:	415a      	adcs	r2, r3
 8009a3a:	602a      	str	r2, [r5, #0]
 8009a3c:	e7ee      	b.n	8009a1c <__swhatbuf_r+0x1c>
 8009a3e:	2340      	movs	r3, #64	; 0x40
 8009a40:	2000      	movs	r0, #0
 8009a42:	6023      	str	r3, [r4, #0]
 8009a44:	b016      	add	sp, #88	; 0x58
 8009a46:	bd70      	pop	{r4, r5, r6, pc}

08009a48 <__smakebuf_r>:
 8009a48:	898b      	ldrh	r3, [r1, #12]
 8009a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a4c:	079d      	lsls	r5, r3, #30
 8009a4e:	4606      	mov	r6, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	d507      	bpl.n	8009a64 <__smakebuf_r+0x1c>
 8009a54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	6163      	str	r3, [r4, #20]
 8009a60:	b002      	add	sp, #8
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	ab01      	add	r3, sp, #4
 8009a66:	466a      	mov	r2, sp
 8009a68:	f7ff ffca 	bl	8009a00 <__swhatbuf_r>
 8009a6c:	9900      	ldr	r1, [sp, #0]
 8009a6e:	4605      	mov	r5, r0
 8009a70:	4630      	mov	r0, r6
 8009a72:	f000 fca9 	bl	800a3c8 <_malloc_r>
 8009a76:	b948      	cbnz	r0, 8009a8c <__smakebuf_r+0x44>
 8009a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7c:	059a      	lsls	r2, r3, #22
 8009a7e:	d4ef      	bmi.n	8009a60 <__smakebuf_r+0x18>
 8009a80:	f023 0303 	bic.w	r3, r3, #3
 8009a84:	f043 0302 	orr.w	r3, r3, #2
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	e7e3      	b.n	8009a54 <__smakebuf_r+0xc>
 8009a8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ac4 <__smakebuf_r+0x7c>)
 8009a8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	6020      	str	r0, [r4, #0]
 8009a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a98:	81a3      	strh	r3, [r4, #12]
 8009a9a:	9b00      	ldr	r3, [sp, #0]
 8009a9c:	6163      	str	r3, [r4, #20]
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	6120      	str	r0, [r4, #16]
 8009aa2:	b15b      	cbz	r3, 8009abc <__smakebuf_r+0x74>
 8009aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f001 f81f 	bl	800aaec <_isatty_r>
 8009aae:	b128      	cbz	r0, 8009abc <__smakebuf_r+0x74>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f023 0303 	bic.w	r3, r3, #3
 8009ab6:	f043 0301 	orr.w	r3, r3, #1
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	431d      	orrs	r5, r3
 8009ac0:	81a5      	strh	r5, [r4, #12]
 8009ac2:	e7cd      	b.n	8009a60 <__smakebuf_r+0x18>
 8009ac4:	08009241 	.word	0x08009241

08009ac8 <malloc>:
 8009ac8:	4b02      	ldr	r3, [pc, #8]	; (8009ad4 <malloc+0xc>)
 8009aca:	4601      	mov	r1, r0
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	f000 bc7b 	b.w	800a3c8 <_malloc_r>
 8009ad2:	bf00      	nop
 8009ad4:	20000010 	.word	0x20000010

08009ad8 <__ascii_mbtowc>:
 8009ad8:	b082      	sub	sp, #8
 8009ada:	b901      	cbnz	r1, 8009ade <__ascii_mbtowc+0x6>
 8009adc:	a901      	add	r1, sp, #4
 8009ade:	b142      	cbz	r2, 8009af2 <__ascii_mbtowc+0x1a>
 8009ae0:	b14b      	cbz	r3, 8009af6 <__ascii_mbtowc+0x1e>
 8009ae2:	7813      	ldrb	r3, [r2, #0]
 8009ae4:	600b      	str	r3, [r1, #0]
 8009ae6:	7812      	ldrb	r2, [r2, #0]
 8009ae8:	1c10      	adds	r0, r2, #0
 8009aea:	bf18      	it	ne
 8009aec:	2001      	movne	r0, #1
 8009aee:	b002      	add	sp, #8
 8009af0:	4770      	bx	lr
 8009af2:	4610      	mov	r0, r2
 8009af4:	e7fb      	b.n	8009aee <__ascii_mbtowc+0x16>
 8009af6:	f06f 0001 	mvn.w	r0, #1
 8009afa:	e7f8      	b.n	8009aee <__ascii_mbtowc+0x16>

08009afc <memcpy>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	1e43      	subs	r3, r0, #1
 8009b00:	440a      	add	r2, r1
 8009b02:	4291      	cmp	r1, r2
 8009b04:	d100      	bne.n	8009b08 <memcpy+0xc>
 8009b06:	bd10      	pop	{r4, pc}
 8009b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b10:	e7f7      	b.n	8009b02 <memcpy+0x6>

08009b12 <_Balloc>:
 8009b12:	b570      	push	{r4, r5, r6, lr}
 8009b14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b16:	4604      	mov	r4, r0
 8009b18:	460e      	mov	r6, r1
 8009b1a:	b93d      	cbnz	r5, 8009b2c <_Balloc+0x1a>
 8009b1c:	2010      	movs	r0, #16
 8009b1e:	f7ff ffd3 	bl	8009ac8 <malloc>
 8009b22:	6260      	str	r0, [r4, #36]	; 0x24
 8009b24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b28:	6005      	str	r5, [r0, #0]
 8009b2a:	60c5      	str	r5, [r0, #12]
 8009b2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009b2e:	68eb      	ldr	r3, [r5, #12]
 8009b30:	b183      	cbz	r3, 8009b54 <_Balloc+0x42>
 8009b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009b3a:	b9b8      	cbnz	r0, 8009b6c <_Balloc+0x5a>
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	fa01 f506 	lsl.w	r5, r1, r6
 8009b42:	1d6a      	adds	r2, r5, #5
 8009b44:	0092      	lsls	r2, r2, #2
 8009b46:	4620      	mov	r0, r4
 8009b48:	f000 fbe1 	bl	800a30e <_calloc_r>
 8009b4c:	b160      	cbz	r0, 8009b68 <_Balloc+0x56>
 8009b4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009b52:	e00e      	b.n	8009b72 <_Balloc+0x60>
 8009b54:	2221      	movs	r2, #33	; 0x21
 8009b56:	2104      	movs	r1, #4
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fbd8 	bl	800a30e <_calloc_r>
 8009b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b60:	60e8      	str	r0, [r5, #12]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e4      	bne.n	8009b32 <_Balloc+0x20>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	6802      	ldr	r2, [r0, #0]
 8009b6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009b72:	2300      	movs	r3, #0
 8009b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b78:	e7f7      	b.n	8009b6a <_Balloc+0x58>

08009b7a <_Bfree>:
 8009b7a:	b570      	push	{r4, r5, r6, lr}
 8009b7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460d      	mov	r5, r1
 8009b82:	b93c      	cbnz	r4, 8009b94 <_Bfree+0x1a>
 8009b84:	2010      	movs	r0, #16
 8009b86:	f7ff ff9f 	bl	8009ac8 <malloc>
 8009b8a:	6270      	str	r0, [r6, #36]	; 0x24
 8009b8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b90:	6004      	str	r4, [r0, #0]
 8009b92:	60c4      	str	r4, [r0, #12]
 8009b94:	b13d      	cbz	r5, 8009ba6 <_Bfree+0x2c>
 8009b96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b98:	686a      	ldr	r2, [r5, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba0:	6029      	str	r1, [r5, #0]
 8009ba2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}

08009ba8 <__multadd>:
 8009ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bac:	690d      	ldr	r5, [r1, #16]
 8009bae:	461f      	mov	r7, r3
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	f101 0c14 	add.w	ip, r1, #20
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f8dc 0000 	ldr.w	r0, [ip]
 8009bbe:	b281      	uxth	r1, r0
 8009bc0:	fb02 7101 	mla	r1, r2, r1, r7
 8009bc4:	0c0f      	lsrs	r7, r1, #16
 8009bc6:	0c00      	lsrs	r0, r0, #16
 8009bc8:	fb02 7000 	mla	r0, r2, r0, r7
 8009bcc:	b289      	uxth	r1, r1
 8009bce:	3301      	adds	r3, #1
 8009bd0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009bd4:	429d      	cmp	r5, r3
 8009bd6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009bda:	f84c 1b04 	str.w	r1, [ip], #4
 8009bde:	dcec      	bgt.n	8009bba <__multadd+0x12>
 8009be0:	b1d7      	cbz	r7, 8009c18 <__multadd+0x70>
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	dc12      	bgt.n	8009c0e <__multadd+0x66>
 8009be8:	6861      	ldr	r1, [r4, #4]
 8009bea:	4630      	mov	r0, r6
 8009bec:	3101      	adds	r1, #1
 8009bee:	f7ff ff90 	bl	8009b12 <_Balloc>
 8009bf2:	6922      	ldr	r2, [r4, #16]
 8009bf4:	3202      	adds	r2, #2
 8009bf6:	f104 010c 	add.w	r1, r4, #12
 8009bfa:	4680      	mov	r8, r0
 8009bfc:	0092      	lsls	r2, r2, #2
 8009bfe:	300c      	adds	r0, #12
 8009c00:	f7ff ff7c 	bl	8009afc <memcpy>
 8009c04:	4621      	mov	r1, r4
 8009c06:	4630      	mov	r0, r6
 8009c08:	f7ff ffb7 	bl	8009b7a <_Bfree>
 8009c0c:	4644      	mov	r4, r8
 8009c0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c12:	3501      	adds	r5, #1
 8009c14:	615f      	str	r7, [r3, #20]
 8009c16:	6125      	str	r5, [r4, #16]
 8009c18:	4620      	mov	r0, r4
 8009c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c1e <__s2b>:
 8009c1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c22:	460c      	mov	r4, r1
 8009c24:	4615      	mov	r5, r2
 8009c26:	461f      	mov	r7, r3
 8009c28:	2209      	movs	r2, #9
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c32:	2100      	movs	r1, #0
 8009c34:	2201      	movs	r2, #1
 8009c36:	429a      	cmp	r2, r3
 8009c38:	db20      	blt.n	8009c7c <__s2b+0x5e>
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f7ff ff69 	bl	8009b12 <_Balloc>
 8009c40:	9b08      	ldr	r3, [sp, #32]
 8009c42:	6143      	str	r3, [r0, #20]
 8009c44:	2d09      	cmp	r5, #9
 8009c46:	f04f 0301 	mov.w	r3, #1
 8009c4a:	6103      	str	r3, [r0, #16]
 8009c4c:	dd19      	ble.n	8009c82 <__s2b+0x64>
 8009c4e:	f104 0809 	add.w	r8, r4, #9
 8009c52:	46c1      	mov	r9, r8
 8009c54:	442c      	add	r4, r5
 8009c56:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	3b30      	subs	r3, #48	; 0x30
 8009c5e:	220a      	movs	r2, #10
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff ffa1 	bl	8009ba8 <__multadd>
 8009c66:	45a1      	cmp	r9, r4
 8009c68:	d1f5      	bne.n	8009c56 <__s2b+0x38>
 8009c6a:	eb08 0405 	add.w	r4, r8, r5
 8009c6e:	3c08      	subs	r4, #8
 8009c70:	1b2d      	subs	r5, r5, r4
 8009c72:	1963      	adds	r3, r4, r5
 8009c74:	42bb      	cmp	r3, r7
 8009c76:	db07      	blt.n	8009c88 <__s2b+0x6a>
 8009c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7c:	0052      	lsls	r2, r2, #1
 8009c7e:	3101      	adds	r1, #1
 8009c80:	e7d9      	b.n	8009c36 <__s2b+0x18>
 8009c82:	340a      	adds	r4, #10
 8009c84:	2509      	movs	r5, #9
 8009c86:	e7f3      	b.n	8009c70 <__s2b+0x52>
 8009c88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	3b30      	subs	r3, #48	; 0x30
 8009c90:	220a      	movs	r2, #10
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff ff88 	bl	8009ba8 <__multadd>
 8009c98:	e7eb      	b.n	8009c72 <__s2b+0x54>

08009c9a <__hi0bits>:
 8009c9a:	0c02      	lsrs	r2, r0, #16
 8009c9c:	0412      	lsls	r2, r2, #16
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	b9b2      	cbnz	r2, 8009cd0 <__hi0bits+0x36>
 8009ca2:	0403      	lsls	r3, r0, #16
 8009ca4:	2010      	movs	r0, #16
 8009ca6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009caa:	bf04      	itt	eq
 8009cac:	021b      	lsleq	r3, r3, #8
 8009cae:	3008      	addeq	r0, #8
 8009cb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009cb4:	bf04      	itt	eq
 8009cb6:	011b      	lsleq	r3, r3, #4
 8009cb8:	3004      	addeq	r0, #4
 8009cba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009cbe:	bf04      	itt	eq
 8009cc0:	009b      	lsleq	r3, r3, #2
 8009cc2:	3002      	addeq	r0, #2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	db06      	blt.n	8009cd6 <__hi0bits+0x3c>
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	d503      	bpl.n	8009cd4 <__hi0bits+0x3a>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	4770      	bx	lr
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e7e8      	b.n	8009ca6 <__hi0bits+0xc>
 8009cd4:	2020      	movs	r0, #32
 8009cd6:	4770      	bx	lr

08009cd8 <__lo0bits>:
 8009cd8:	6803      	ldr	r3, [r0, #0]
 8009cda:	f013 0207 	ands.w	r2, r3, #7
 8009cde:	4601      	mov	r1, r0
 8009ce0:	d00b      	beq.n	8009cfa <__lo0bits+0x22>
 8009ce2:	07da      	lsls	r2, r3, #31
 8009ce4:	d423      	bmi.n	8009d2e <__lo0bits+0x56>
 8009ce6:	0798      	lsls	r0, r3, #30
 8009ce8:	bf49      	itett	mi
 8009cea:	085b      	lsrmi	r3, r3, #1
 8009cec:	089b      	lsrpl	r3, r3, #2
 8009cee:	2001      	movmi	r0, #1
 8009cf0:	600b      	strmi	r3, [r1, #0]
 8009cf2:	bf5c      	itt	pl
 8009cf4:	600b      	strpl	r3, [r1, #0]
 8009cf6:	2002      	movpl	r0, #2
 8009cf8:	4770      	bx	lr
 8009cfa:	b298      	uxth	r0, r3
 8009cfc:	b9a8      	cbnz	r0, 8009d2a <__lo0bits+0x52>
 8009cfe:	0c1b      	lsrs	r3, r3, #16
 8009d00:	2010      	movs	r0, #16
 8009d02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d06:	bf04      	itt	eq
 8009d08:	0a1b      	lsreq	r3, r3, #8
 8009d0a:	3008      	addeq	r0, #8
 8009d0c:	071a      	lsls	r2, r3, #28
 8009d0e:	bf04      	itt	eq
 8009d10:	091b      	lsreq	r3, r3, #4
 8009d12:	3004      	addeq	r0, #4
 8009d14:	079a      	lsls	r2, r3, #30
 8009d16:	bf04      	itt	eq
 8009d18:	089b      	lsreq	r3, r3, #2
 8009d1a:	3002      	addeq	r0, #2
 8009d1c:	07da      	lsls	r2, r3, #31
 8009d1e:	d402      	bmi.n	8009d26 <__lo0bits+0x4e>
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	d006      	beq.n	8009d32 <__lo0bits+0x5a>
 8009d24:	3001      	adds	r0, #1
 8009d26:	600b      	str	r3, [r1, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	e7e9      	b.n	8009d02 <__lo0bits+0x2a>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	4770      	bx	lr
 8009d32:	2020      	movs	r0, #32
 8009d34:	4770      	bx	lr

08009d36 <__i2b>:
 8009d36:	b510      	push	{r4, lr}
 8009d38:	460c      	mov	r4, r1
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	f7ff fee9 	bl	8009b12 <_Balloc>
 8009d40:	2201      	movs	r2, #1
 8009d42:	6144      	str	r4, [r0, #20]
 8009d44:	6102      	str	r2, [r0, #16]
 8009d46:	bd10      	pop	{r4, pc}

08009d48 <__multiply>:
 8009d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	690a      	ldr	r2, [r1, #16]
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	bfb8      	it	lt
 8009d56:	460b      	movlt	r3, r1
 8009d58:	4688      	mov	r8, r1
 8009d5a:	bfbc      	itt	lt
 8009d5c:	46a0      	movlt	r8, r4
 8009d5e:	461c      	movlt	r4, r3
 8009d60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d70:	eb07 0609 	add.w	r6, r7, r9
 8009d74:	42b3      	cmp	r3, r6
 8009d76:	bfb8      	it	lt
 8009d78:	3101      	addlt	r1, #1
 8009d7a:	f7ff feca 	bl	8009b12 <_Balloc>
 8009d7e:	f100 0514 	add.w	r5, r0, #20
 8009d82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009d86:	462b      	mov	r3, r5
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4573      	cmp	r3, lr
 8009d8c:	d316      	bcc.n	8009dbc <__multiply+0x74>
 8009d8e:	f104 0214 	add.w	r2, r4, #20
 8009d92:	f108 0114 	add.w	r1, r8, #20
 8009d96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009d9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	9b00      	ldr	r3, [sp, #0]
 8009da2:	9201      	str	r2, [sp, #4]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d80c      	bhi.n	8009dc2 <__multiply+0x7a>
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	dd03      	ble.n	8009db4 <__multiply+0x6c>
 8009dac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d05d      	beq.n	8009e70 <__multiply+0x128>
 8009db4:	6106      	str	r6, [r0, #16]
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	f843 2b04 	str.w	r2, [r3], #4
 8009dc0:	e7e3      	b.n	8009d8a <__multiply+0x42>
 8009dc2:	f8b2 b000 	ldrh.w	fp, [r2]
 8009dc6:	f1bb 0f00 	cmp.w	fp, #0
 8009dca:	d023      	beq.n	8009e14 <__multiply+0xcc>
 8009dcc:	4689      	mov	r9, r1
 8009dce:	46ac      	mov	ip, r5
 8009dd0:	f04f 0800 	mov.w	r8, #0
 8009dd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8009dd8:	f8dc a000 	ldr.w	sl, [ip]
 8009ddc:	b2a3      	uxth	r3, r4
 8009dde:	fa1f fa8a 	uxth.w	sl, sl
 8009de2:	fb0b a303 	mla	r3, fp, r3, sl
 8009de6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009dea:	f8dc 4000 	ldr.w	r4, [ip]
 8009dee:	4443      	add	r3, r8
 8009df0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009df4:	fb0b 840a 	mla	r4, fp, sl, r8
 8009df8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009dfc:	46e2      	mov	sl, ip
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e04:	454f      	cmp	r7, r9
 8009e06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e0a:	f84a 3b04 	str.w	r3, [sl], #4
 8009e0e:	d82b      	bhi.n	8009e68 <__multiply+0x120>
 8009e10:	f8cc 8004 	str.w	r8, [ip, #4]
 8009e14:	9b01      	ldr	r3, [sp, #4]
 8009e16:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009e1a:	3204      	adds	r2, #4
 8009e1c:	f1ba 0f00 	cmp.w	sl, #0
 8009e20:	d020      	beq.n	8009e64 <__multiply+0x11c>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	4689      	mov	r9, r1
 8009e26:	46a8      	mov	r8, r5
 8009e28:	f04f 0b00 	mov.w	fp, #0
 8009e2c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009e30:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009e34:	fb0a 440c 	mla	r4, sl, ip, r4
 8009e38:	445c      	add	r4, fp
 8009e3a:	46c4      	mov	ip, r8
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e42:	f84c 3b04 	str.w	r3, [ip], #4
 8009e46:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e4a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009e4e:	0c1b      	lsrs	r3, r3, #16
 8009e50:	fb0a b303 	mla	r3, sl, r3, fp
 8009e54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e58:	454f      	cmp	r7, r9
 8009e5a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009e5e:	d805      	bhi.n	8009e6c <__multiply+0x124>
 8009e60:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e64:	3504      	adds	r5, #4
 8009e66:	e79b      	b.n	8009da0 <__multiply+0x58>
 8009e68:	46d4      	mov	ip, sl
 8009e6a:	e7b3      	b.n	8009dd4 <__multiply+0x8c>
 8009e6c:	46e0      	mov	r8, ip
 8009e6e:	e7dd      	b.n	8009e2c <__multiply+0xe4>
 8009e70:	3e01      	subs	r6, #1
 8009e72:	e799      	b.n	8009da8 <__multiply+0x60>

08009e74 <__pow5mult>:
 8009e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e78:	4615      	mov	r5, r2
 8009e7a:	f012 0203 	ands.w	r2, r2, #3
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460f      	mov	r7, r1
 8009e82:	d007      	beq.n	8009e94 <__pow5mult+0x20>
 8009e84:	3a01      	subs	r2, #1
 8009e86:	4c21      	ldr	r4, [pc, #132]	; (8009f0c <__pow5mult+0x98>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e8e:	f7ff fe8b 	bl	8009ba8 <__multadd>
 8009e92:	4607      	mov	r7, r0
 8009e94:	10ad      	asrs	r5, r5, #2
 8009e96:	d035      	beq.n	8009f04 <__pow5mult+0x90>
 8009e98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e9a:	b93c      	cbnz	r4, 8009eac <__pow5mult+0x38>
 8009e9c:	2010      	movs	r0, #16
 8009e9e:	f7ff fe13 	bl	8009ac8 <malloc>
 8009ea2:	6270      	str	r0, [r6, #36]	; 0x24
 8009ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ea8:	6004      	str	r4, [r0, #0]
 8009eaa:	60c4      	str	r4, [r0, #12]
 8009eac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009eb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009eb4:	b94c      	cbnz	r4, 8009eca <__pow5mult+0x56>
 8009eb6:	f240 2171 	movw	r1, #625	; 0x271
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff3b 	bl	8009d36 <__i2b>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	f04f 0800 	mov.w	r8, #0
 8009ece:	07eb      	lsls	r3, r5, #31
 8009ed0:	d50a      	bpl.n	8009ee8 <__pow5mult+0x74>
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff ff36 	bl	8009d48 <__multiply>
 8009edc:	4639      	mov	r1, r7
 8009ede:	4681      	mov	r9, r0
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff fe4a 	bl	8009b7a <_Bfree>
 8009ee6:	464f      	mov	r7, r9
 8009ee8:	106d      	asrs	r5, r5, #1
 8009eea:	d00b      	beq.n	8009f04 <__pow5mult+0x90>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	b938      	cbnz	r0, 8009f00 <__pow5mult+0x8c>
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f7ff ff27 	bl	8009d48 <__multiply>
 8009efa:	6020      	str	r0, [r4, #0]
 8009efc:	f8c0 8000 	str.w	r8, [r0]
 8009f00:	4604      	mov	r4, r0
 8009f02:	e7e4      	b.n	8009ece <__pow5mult+0x5a>
 8009f04:	4638      	mov	r0, r7
 8009f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f0a:	bf00      	nop
 8009f0c:	0800af20 	.word	0x0800af20

08009f10 <__lshift>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	460c      	mov	r4, r1
 8009f16:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	6849      	ldr	r1, [r1, #4]
 8009f1e:	eb0a 0903 	add.w	r9, sl, r3
 8009f22:	68a3      	ldr	r3, [r4, #8]
 8009f24:	4607      	mov	r7, r0
 8009f26:	4616      	mov	r6, r2
 8009f28:	f109 0501 	add.w	r5, r9, #1
 8009f2c:	42ab      	cmp	r3, r5
 8009f2e:	db32      	blt.n	8009f96 <__lshift+0x86>
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff fdee 	bl	8009b12 <_Balloc>
 8009f36:	2300      	movs	r3, #0
 8009f38:	4680      	mov	r8, r0
 8009f3a:	f100 0114 	add.w	r1, r0, #20
 8009f3e:	461a      	mov	r2, r3
 8009f40:	4553      	cmp	r3, sl
 8009f42:	db2b      	blt.n	8009f9c <__lshift+0x8c>
 8009f44:	6920      	ldr	r0, [r4, #16]
 8009f46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f4a:	f104 0314 	add.w	r3, r4, #20
 8009f4e:	f016 021f 	ands.w	r2, r6, #31
 8009f52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f5a:	d025      	beq.n	8009fa8 <__lshift+0x98>
 8009f5c:	f1c2 0e20 	rsb	lr, r2, #32
 8009f60:	2000      	movs	r0, #0
 8009f62:	681e      	ldr	r6, [r3, #0]
 8009f64:	468a      	mov	sl, r1
 8009f66:	4096      	lsls	r6, r2
 8009f68:	4330      	orrs	r0, r6
 8009f6a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f72:	459c      	cmp	ip, r3
 8009f74:	fa20 f00e 	lsr.w	r0, r0, lr
 8009f78:	d814      	bhi.n	8009fa4 <__lshift+0x94>
 8009f7a:	6048      	str	r0, [r1, #4]
 8009f7c:	b108      	cbz	r0, 8009f82 <__lshift+0x72>
 8009f7e:	f109 0502 	add.w	r5, r9, #2
 8009f82:	3d01      	subs	r5, #1
 8009f84:	4638      	mov	r0, r7
 8009f86:	f8c8 5010 	str.w	r5, [r8, #16]
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f7ff fdf5 	bl	8009b7a <_Bfree>
 8009f90:	4640      	mov	r0, r8
 8009f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f96:	3101      	adds	r1, #1
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	e7c7      	b.n	8009f2c <__lshift+0x1c>
 8009f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	e7cd      	b.n	8009f40 <__lshift+0x30>
 8009fa4:	4651      	mov	r1, sl
 8009fa6:	e7dc      	b.n	8009f62 <__lshift+0x52>
 8009fa8:	3904      	subs	r1, #4
 8009faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fae:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fb2:	459c      	cmp	ip, r3
 8009fb4:	d8f9      	bhi.n	8009faa <__lshift+0x9a>
 8009fb6:	e7e4      	b.n	8009f82 <__lshift+0x72>

08009fb8 <__mcmp>:
 8009fb8:	6903      	ldr	r3, [r0, #16]
 8009fba:	690a      	ldr	r2, [r1, #16]
 8009fbc:	1a9b      	subs	r3, r3, r2
 8009fbe:	b530      	push	{r4, r5, lr}
 8009fc0:	d10c      	bne.n	8009fdc <__mcmp+0x24>
 8009fc2:	0092      	lsls	r2, r2, #2
 8009fc4:	3014      	adds	r0, #20
 8009fc6:	3114      	adds	r1, #20
 8009fc8:	1884      	adds	r4, r0, r2
 8009fca:	4411      	add	r1, r2
 8009fcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fd4:	4295      	cmp	r5, r2
 8009fd6:	d003      	beq.n	8009fe0 <__mcmp+0x28>
 8009fd8:	d305      	bcc.n	8009fe6 <__mcmp+0x2e>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4618      	mov	r0, r3
 8009fde:	bd30      	pop	{r4, r5, pc}
 8009fe0:	42a0      	cmp	r0, r4
 8009fe2:	d3f3      	bcc.n	8009fcc <__mcmp+0x14>
 8009fe4:	e7fa      	b.n	8009fdc <__mcmp+0x24>
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fea:	e7f7      	b.n	8009fdc <__mcmp+0x24>

08009fec <__mdiff>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	460d      	mov	r5, r1
 8009ff2:	4607      	mov	r7, r0
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	f7ff ffdd 	bl	8009fb8 <__mcmp>
 8009ffe:	1e06      	subs	r6, r0, #0
 800a000:	d108      	bne.n	800a014 <__mdiff+0x28>
 800a002:	4631      	mov	r1, r6
 800a004:	4638      	mov	r0, r7
 800a006:	f7ff fd84 	bl	8009b12 <_Balloc>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a014:	bfa4      	itt	ge
 800a016:	4623      	movge	r3, r4
 800a018:	462c      	movge	r4, r5
 800a01a:	4638      	mov	r0, r7
 800a01c:	6861      	ldr	r1, [r4, #4]
 800a01e:	bfa6      	itte	ge
 800a020:	461d      	movge	r5, r3
 800a022:	2600      	movge	r6, #0
 800a024:	2601      	movlt	r6, #1
 800a026:	f7ff fd74 	bl	8009b12 <_Balloc>
 800a02a:	692b      	ldr	r3, [r5, #16]
 800a02c:	60c6      	str	r6, [r0, #12]
 800a02e:	6926      	ldr	r6, [r4, #16]
 800a030:	f105 0914 	add.w	r9, r5, #20
 800a034:	f104 0214 	add.w	r2, r4, #20
 800a038:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a03c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a040:	f100 0514 	add.w	r5, r0, #20
 800a044:	f04f 0e00 	mov.w	lr, #0
 800a048:	f852 ab04 	ldr.w	sl, [r2], #4
 800a04c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a050:	fa1e f18a 	uxtah	r1, lr, sl
 800a054:	b2a3      	uxth	r3, r4
 800a056:	1ac9      	subs	r1, r1, r3
 800a058:	0c23      	lsrs	r3, r4, #16
 800a05a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a05e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a062:	b289      	uxth	r1, r1
 800a064:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a068:	45c8      	cmp	r8, r9
 800a06a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a06e:	4694      	mov	ip, r2
 800a070:	f845 3b04 	str.w	r3, [r5], #4
 800a074:	d8e8      	bhi.n	800a048 <__mdiff+0x5c>
 800a076:	45bc      	cmp	ip, r7
 800a078:	d304      	bcc.n	800a084 <__mdiff+0x98>
 800a07a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a07e:	b183      	cbz	r3, 800a0a2 <__mdiff+0xb6>
 800a080:	6106      	str	r6, [r0, #16]
 800a082:	e7c5      	b.n	800a010 <__mdiff+0x24>
 800a084:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a088:	fa1e f381 	uxtah	r3, lr, r1
 800a08c:	141a      	asrs	r2, r3, #16
 800a08e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a092:	b29b      	uxth	r3, r3
 800a094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a098:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a09c:	f845 3b04 	str.w	r3, [r5], #4
 800a0a0:	e7e9      	b.n	800a076 <__mdiff+0x8a>
 800a0a2:	3e01      	subs	r6, #1
 800a0a4:	e7e9      	b.n	800a07a <__mdiff+0x8e>
	...

0800a0a8 <__ulp>:
 800a0a8:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <__ulp+0x4c>)
 800a0aa:	ee10 2a90 	vmov	r2, s1
 800a0ae:	401a      	ands	r2, r3
 800a0b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dd04      	ble.n	800a0c2 <__ulp+0x1a>
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	ec41 0b10 	vmov	d0, r0, r1
 800a0c0:	4770      	bx	lr
 800a0c2:	425b      	negs	r3, r3
 800a0c4:	151b      	asrs	r3, r3, #20
 800a0c6:	2b13      	cmp	r3, #19
 800a0c8:	f04f 0000 	mov.w	r0, #0
 800a0cc:	f04f 0100 	mov.w	r1, #0
 800a0d0:	dc04      	bgt.n	800a0dc <__ulp+0x34>
 800a0d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a0d6:	fa42 f103 	asr.w	r1, r2, r3
 800a0da:	e7ef      	b.n	800a0bc <__ulp+0x14>
 800a0dc:	3b14      	subs	r3, #20
 800a0de:	2b1e      	cmp	r3, #30
 800a0e0:	f04f 0201 	mov.w	r2, #1
 800a0e4:	bfda      	itte	le
 800a0e6:	f1c3 031f 	rsble	r3, r3, #31
 800a0ea:	fa02 f303 	lslle.w	r3, r2, r3
 800a0ee:	4613      	movgt	r3, r2
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	e7e3      	b.n	800a0bc <__ulp+0x14>
 800a0f4:	7ff00000 	.word	0x7ff00000

0800a0f8 <__b2d>:
 800a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fa:	6905      	ldr	r5, [r0, #16]
 800a0fc:	f100 0714 	add.w	r7, r0, #20
 800a100:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a104:	1f2e      	subs	r6, r5, #4
 800a106:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a10a:	4620      	mov	r0, r4
 800a10c:	f7ff fdc5 	bl	8009c9a <__hi0bits>
 800a110:	f1c0 0320 	rsb	r3, r0, #32
 800a114:	280a      	cmp	r0, #10
 800a116:	600b      	str	r3, [r1, #0]
 800a118:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a190 <__b2d+0x98>
 800a11c:	dc14      	bgt.n	800a148 <__b2d+0x50>
 800a11e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a122:	fa24 f10e 	lsr.w	r1, r4, lr
 800a126:	42b7      	cmp	r7, r6
 800a128:	ea41 030c 	orr.w	r3, r1, ip
 800a12c:	bf34      	ite	cc
 800a12e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a132:	2100      	movcs	r1, #0
 800a134:	3015      	adds	r0, #21
 800a136:	fa04 f000 	lsl.w	r0, r4, r0
 800a13a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a13e:	ea40 0201 	orr.w	r2, r0, r1
 800a142:	ec43 2b10 	vmov	d0, r2, r3
 800a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a148:	42b7      	cmp	r7, r6
 800a14a:	bf3a      	itte	cc
 800a14c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a150:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a154:	2100      	movcs	r1, #0
 800a156:	380b      	subs	r0, #11
 800a158:	d015      	beq.n	800a186 <__b2d+0x8e>
 800a15a:	4084      	lsls	r4, r0
 800a15c:	f1c0 0520 	rsb	r5, r0, #32
 800a160:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a164:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a168:	42be      	cmp	r6, r7
 800a16a:	fa21 fc05 	lsr.w	ip, r1, r5
 800a16e:	ea44 030c 	orr.w	r3, r4, ip
 800a172:	bf8c      	ite	hi
 800a174:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a178:	2400      	movls	r4, #0
 800a17a:	fa01 f000 	lsl.w	r0, r1, r0
 800a17e:	40ec      	lsrs	r4, r5
 800a180:	ea40 0204 	orr.w	r2, r0, r4
 800a184:	e7dd      	b.n	800a142 <__b2d+0x4a>
 800a186:	ea44 030c 	orr.w	r3, r4, ip
 800a18a:	460a      	mov	r2, r1
 800a18c:	e7d9      	b.n	800a142 <__b2d+0x4a>
 800a18e:	bf00      	nop
 800a190:	3ff00000 	.word	0x3ff00000

0800a194 <__d2b>:
 800a194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a198:	460e      	mov	r6, r1
 800a19a:	2101      	movs	r1, #1
 800a19c:	ec59 8b10 	vmov	r8, r9, d0
 800a1a0:	4615      	mov	r5, r2
 800a1a2:	f7ff fcb6 	bl	8009b12 <_Balloc>
 800a1a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a1aa:	4607      	mov	r7, r0
 800a1ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1b0:	bb34      	cbnz	r4, 800a200 <__d2b+0x6c>
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	f1b8 0300 	subs.w	r3, r8, #0
 800a1b8:	d027      	beq.n	800a20a <__d2b+0x76>
 800a1ba:	a802      	add	r0, sp, #8
 800a1bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a1c0:	f7ff fd8a 	bl	8009cd8 <__lo0bits>
 800a1c4:	9900      	ldr	r1, [sp, #0]
 800a1c6:	b1f0      	cbz	r0, 800a206 <__d2b+0x72>
 800a1c8:	9a01      	ldr	r2, [sp, #4]
 800a1ca:	f1c0 0320 	rsb	r3, r0, #32
 800a1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d2:	430b      	orrs	r3, r1
 800a1d4:	40c2      	lsrs	r2, r0
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	9201      	str	r2, [sp, #4]
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	61bb      	str	r3, [r7, #24]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	bf14      	ite	ne
 800a1e2:	2102      	movne	r1, #2
 800a1e4:	2101      	moveq	r1, #1
 800a1e6:	6139      	str	r1, [r7, #16]
 800a1e8:	b1c4      	cbz	r4, 800a21c <__d2b+0x88>
 800a1ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a1ee:	4404      	add	r4, r0
 800a1f0:	6034      	str	r4, [r6, #0]
 800a1f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1f6:	6028      	str	r0, [r5, #0]
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	b003      	add	sp, #12
 800a1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a204:	e7d5      	b.n	800a1b2 <__d2b+0x1e>
 800a206:	6179      	str	r1, [r7, #20]
 800a208:	e7e7      	b.n	800a1da <__d2b+0x46>
 800a20a:	a801      	add	r0, sp, #4
 800a20c:	f7ff fd64 	bl	8009cd8 <__lo0bits>
 800a210:	9b01      	ldr	r3, [sp, #4]
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	2101      	movs	r1, #1
 800a216:	6139      	str	r1, [r7, #16]
 800a218:	3020      	adds	r0, #32
 800a21a:	e7e5      	b.n	800a1e8 <__d2b+0x54>
 800a21c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a220:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a224:	6030      	str	r0, [r6, #0]
 800a226:	6918      	ldr	r0, [r3, #16]
 800a228:	f7ff fd37 	bl	8009c9a <__hi0bits>
 800a22c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a230:	e7e1      	b.n	800a1f6 <__d2b+0x62>

0800a232 <__ratio>:
 800a232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a236:	4688      	mov	r8, r1
 800a238:	4669      	mov	r1, sp
 800a23a:	4681      	mov	r9, r0
 800a23c:	f7ff ff5c 	bl	800a0f8 <__b2d>
 800a240:	a901      	add	r1, sp, #4
 800a242:	4640      	mov	r0, r8
 800a244:	ec57 6b10 	vmov	r6, r7, d0
 800a248:	f7ff ff56 	bl	800a0f8 <__b2d>
 800a24c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a250:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a254:	eba3 0c02 	sub.w	ip, r3, r2
 800a258:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a262:	ec5b ab10 	vmov	sl, fp, d0
 800a266:	2b00      	cmp	r3, #0
 800a268:	bfce      	itee	gt
 800a26a:	463a      	movgt	r2, r7
 800a26c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a270:	465a      	movle	r2, fp
 800a272:	4659      	mov	r1, fp
 800a274:	463d      	mov	r5, r7
 800a276:	bfd4      	ite	le
 800a278:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a27c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a280:	4630      	mov	r0, r6
 800a282:	ee10 2a10 	vmov	r2, s0
 800a286:	460b      	mov	r3, r1
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f6 fadf 	bl	800084c <__aeabi_ddiv>
 800a28e:	ec41 0b10 	vmov	d0, r0, r1
 800a292:	b003      	add	sp, #12
 800a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a298 <__copybits>:
 800a298:	3901      	subs	r1, #1
 800a29a:	b510      	push	{r4, lr}
 800a29c:	1149      	asrs	r1, r1, #5
 800a29e:	6914      	ldr	r4, [r2, #16]
 800a2a0:	3101      	adds	r1, #1
 800a2a2:	f102 0314 	add.w	r3, r2, #20
 800a2a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a2aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2ae:	42a3      	cmp	r3, r4
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	d303      	bcc.n	800a2bc <__copybits+0x24>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	428a      	cmp	r2, r1
 800a2b8:	d305      	bcc.n	800a2c6 <__copybits+0x2e>
 800a2ba:	bd10      	pop	{r4, pc}
 800a2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c0:	f840 2b04 	str.w	r2, [r0], #4
 800a2c4:	e7f3      	b.n	800a2ae <__copybits+0x16>
 800a2c6:	f842 3b04 	str.w	r3, [r2], #4
 800a2ca:	e7f4      	b.n	800a2b6 <__copybits+0x1e>

0800a2cc <__any_on>:
 800a2cc:	f100 0214 	add.w	r2, r0, #20
 800a2d0:	6900      	ldr	r0, [r0, #16]
 800a2d2:	114b      	asrs	r3, r1, #5
 800a2d4:	4298      	cmp	r0, r3
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	db11      	blt.n	800a2fe <__any_on+0x32>
 800a2da:	dd0a      	ble.n	800a2f2 <__any_on+0x26>
 800a2dc:	f011 011f 	ands.w	r1, r1, #31
 800a2e0:	d007      	beq.n	800a2f2 <__any_on+0x26>
 800a2e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2e6:	fa24 f001 	lsr.w	r0, r4, r1
 800a2ea:	fa00 f101 	lsl.w	r1, r0, r1
 800a2ee:	428c      	cmp	r4, r1
 800a2f0:	d10b      	bne.n	800a30a <__any_on+0x3e>
 800a2f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d803      	bhi.n	800a302 <__any_on+0x36>
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	bd10      	pop	{r4, pc}
 800a2fe:	4603      	mov	r3, r0
 800a300:	e7f7      	b.n	800a2f2 <__any_on+0x26>
 800a302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a306:	2900      	cmp	r1, #0
 800a308:	d0f5      	beq.n	800a2f6 <__any_on+0x2a>
 800a30a:	2001      	movs	r0, #1
 800a30c:	e7f6      	b.n	800a2fc <__any_on+0x30>

0800a30e <_calloc_r>:
 800a30e:	b538      	push	{r3, r4, r5, lr}
 800a310:	fb02 f401 	mul.w	r4, r2, r1
 800a314:	4621      	mov	r1, r4
 800a316:	f000 f857 	bl	800a3c8 <_malloc_r>
 800a31a:	4605      	mov	r5, r0
 800a31c:	b118      	cbz	r0, 800a326 <_calloc_r+0x18>
 800a31e:	4622      	mov	r2, r4
 800a320:	2100      	movs	r1, #0
 800a322:	f7fc fa1b 	bl	800675c <memset>
 800a326:	4628      	mov	r0, r5
 800a328:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a32c <_free_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4605      	mov	r5, r0
 800a330:	2900      	cmp	r1, #0
 800a332:	d045      	beq.n	800a3c0 <_free_r+0x94>
 800a334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a338:	1f0c      	subs	r4, r1, #4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	bfb8      	it	lt
 800a33e:	18e4      	addlt	r4, r4, r3
 800a340:	f000 fc0f 	bl	800ab62 <__malloc_lock>
 800a344:	4a1f      	ldr	r2, [pc, #124]	; (800a3c4 <_free_r+0x98>)
 800a346:	6813      	ldr	r3, [r2, #0]
 800a348:	4610      	mov	r0, r2
 800a34a:	b933      	cbnz	r3, 800a35a <_free_r+0x2e>
 800a34c:	6063      	str	r3, [r4, #4]
 800a34e:	6014      	str	r4, [r2, #0]
 800a350:	4628      	mov	r0, r5
 800a352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a356:	f000 bc05 	b.w	800ab64 <__malloc_unlock>
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	d90c      	bls.n	800a378 <_free_r+0x4c>
 800a35e:	6821      	ldr	r1, [r4, #0]
 800a360:	1862      	adds	r2, r4, r1
 800a362:	4293      	cmp	r3, r2
 800a364:	bf04      	itt	eq
 800a366:	681a      	ldreq	r2, [r3, #0]
 800a368:	685b      	ldreq	r3, [r3, #4]
 800a36a:	6063      	str	r3, [r4, #4]
 800a36c:	bf04      	itt	eq
 800a36e:	1852      	addeq	r2, r2, r1
 800a370:	6022      	streq	r2, [r4, #0]
 800a372:	6004      	str	r4, [r0, #0]
 800a374:	e7ec      	b.n	800a350 <_free_r+0x24>
 800a376:	4613      	mov	r3, r2
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	b10a      	cbz	r2, 800a380 <_free_r+0x54>
 800a37c:	42a2      	cmp	r2, r4
 800a37e:	d9fa      	bls.n	800a376 <_free_r+0x4a>
 800a380:	6819      	ldr	r1, [r3, #0]
 800a382:	1858      	adds	r0, r3, r1
 800a384:	42a0      	cmp	r0, r4
 800a386:	d10b      	bne.n	800a3a0 <_free_r+0x74>
 800a388:	6820      	ldr	r0, [r4, #0]
 800a38a:	4401      	add	r1, r0
 800a38c:	1858      	adds	r0, r3, r1
 800a38e:	4282      	cmp	r2, r0
 800a390:	6019      	str	r1, [r3, #0]
 800a392:	d1dd      	bne.n	800a350 <_free_r+0x24>
 800a394:	6810      	ldr	r0, [r2, #0]
 800a396:	6852      	ldr	r2, [r2, #4]
 800a398:	605a      	str	r2, [r3, #4]
 800a39a:	4401      	add	r1, r0
 800a39c:	6019      	str	r1, [r3, #0]
 800a39e:	e7d7      	b.n	800a350 <_free_r+0x24>
 800a3a0:	d902      	bls.n	800a3a8 <_free_r+0x7c>
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	e7d3      	b.n	800a350 <_free_r+0x24>
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	1821      	adds	r1, r4, r0
 800a3ac:	428a      	cmp	r2, r1
 800a3ae:	bf04      	itt	eq
 800a3b0:	6811      	ldreq	r1, [r2, #0]
 800a3b2:	6852      	ldreq	r2, [r2, #4]
 800a3b4:	6062      	str	r2, [r4, #4]
 800a3b6:	bf04      	itt	eq
 800a3b8:	1809      	addeq	r1, r1, r0
 800a3ba:	6021      	streq	r1, [r4, #0]
 800a3bc:	605c      	str	r4, [r3, #4]
 800a3be:	e7c7      	b.n	800a350 <_free_r+0x24>
 800a3c0:	bd38      	pop	{r3, r4, r5, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000220 	.word	0x20000220

0800a3c8 <_malloc_r>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	1ccd      	adds	r5, r1, #3
 800a3cc:	f025 0503 	bic.w	r5, r5, #3
 800a3d0:	3508      	adds	r5, #8
 800a3d2:	2d0c      	cmp	r5, #12
 800a3d4:	bf38      	it	cc
 800a3d6:	250c      	movcc	r5, #12
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	4606      	mov	r6, r0
 800a3dc:	db01      	blt.n	800a3e2 <_malloc_r+0x1a>
 800a3de:	42a9      	cmp	r1, r5
 800a3e0:	d903      	bls.n	800a3ea <_malloc_r+0x22>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	6033      	str	r3, [r6, #0]
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	f000 fbba 	bl	800ab62 <__malloc_lock>
 800a3ee:	4a21      	ldr	r2, [pc, #132]	; (800a474 <_malloc_r+0xac>)
 800a3f0:	6814      	ldr	r4, [r2, #0]
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	b991      	cbnz	r1, 800a41c <_malloc_r+0x54>
 800a3f6:	4c20      	ldr	r4, [pc, #128]	; (800a478 <_malloc_r+0xb0>)
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	b91b      	cbnz	r3, 800a404 <_malloc_r+0x3c>
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f000 facf 	bl	800a9a0 <_sbrk_r>
 800a402:	6020      	str	r0, [r4, #0]
 800a404:	4629      	mov	r1, r5
 800a406:	4630      	mov	r0, r6
 800a408:	f000 faca 	bl	800a9a0 <_sbrk_r>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d124      	bne.n	800a45a <_malloc_r+0x92>
 800a410:	230c      	movs	r3, #12
 800a412:	6033      	str	r3, [r6, #0]
 800a414:	4630      	mov	r0, r6
 800a416:	f000 fba5 	bl	800ab64 <__malloc_unlock>
 800a41a:	e7e4      	b.n	800a3e6 <_malloc_r+0x1e>
 800a41c:	680b      	ldr	r3, [r1, #0]
 800a41e:	1b5b      	subs	r3, r3, r5
 800a420:	d418      	bmi.n	800a454 <_malloc_r+0x8c>
 800a422:	2b0b      	cmp	r3, #11
 800a424:	d90f      	bls.n	800a446 <_malloc_r+0x7e>
 800a426:	600b      	str	r3, [r1, #0]
 800a428:	50cd      	str	r5, [r1, r3]
 800a42a:	18cc      	adds	r4, r1, r3
 800a42c:	4630      	mov	r0, r6
 800a42e:	f000 fb99 	bl	800ab64 <__malloc_unlock>
 800a432:	f104 000b 	add.w	r0, r4, #11
 800a436:	1d23      	adds	r3, r4, #4
 800a438:	f020 0007 	bic.w	r0, r0, #7
 800a43c:	1ac3      	subs	r3, r0, r3
 800a43e:	d0d3      	beq.n	800a3e8 <_malloc_r+0x20>
 800a440:	425a      	negs	r2, r3
 800a442:	50e2      	str	r2, [r4, r3]
 800a444:	e7d0      	b.n	800a3e8 <_malloc_r+0x20>
 800a446:	428c      	cmp	r4, r1
 800a448:	684b      	ldr	r3, [r1, #4]
 800a44a:	bf16      	itet	ne
 800a44c:	6063      	strne	r3, [r4, #4]
 800a44e:	6013      	streq	r3, [r2, #0]
 800a450:	460c      	movne	r4, r1
 800a452:	e7eb      	b.n	800a42c <_malloc_r+0x64>
 800a454:	460c      	mov	r4, r1
 800a456:	6849      	ldr	r1, [r1, #4]
 800a458:	e7cc      	b.n	800a3f4 <_malloc_r+0x2c>
 800a45a:	1cc4      	adds	r4, r0, #3
 800a45c:	f024 0403 	bic.w	r4, r4, #3
 800a460:	42a0      	cmp	r0, r4
 800a462:	d005      	beq.n	800a470 <_malloc_r+0xa8>
 800a464:	1a21      	subs	r1, r4, r0
 800a466:	4630      	mov	r0, r6
 800a468:	f000 fa9a 	bl	800a9a0 <_sbrk_r>
 800a46c:	3001      	adds	r0, #1
 800a46e:	d0cf      	beq.n	800a410 <_malloc_r+0x48>
 800a470:	6025      	str	r5, [r4, #0]
 800a472:	e7db      	b.n	800a42c <_malloc_r+0x64>
 800a474:	20000220 	.word	0x20000220
 800a478:	20000224 	.word	0x20000224

0800a47c <__ssputs_r>:
 800a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	688e      	ldr	r6, [r1, #8]
 800a482:	429e      	cmp	r6, r3
 800a484:	4682      	mov	sl, r0
 800a486:	460c      	mov	r4, r1
 800a488:	4690      	mov	r8, r2
 800a48a:	4699      	mov	r9, r3
 800a48c:	d837      	bhi.n	800a4fe <__ssputs_r+0x82>
 800a48e:	898a      	ldrh	r2, [r1, #12]
 800a490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a494:	d031      	beq.n	800a4fa <__ssputs_r+0x7e>
 800a496:	6825      	ldr	r5, [r4, #0]
 800a498:	6909      	ldr	r1, [r1, #16]
 800a49a:	1a6f      	subs	r7, r5, r1
 800a49c:	6965      	ldr	r5, [r4, #20]
 800a49e:	2302      	movs	r3, #2
 800a4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a4a8:	f109 0301 	add.w	r3, r9, #1
 800a4ac:	443b      	add	r3, r7
 800a4ae:	429d      	cmp	r5, r3
 800a4b0:	bf38      	it	cc
 800a4b2:	461d      	movcc	r5, r3
 800a4b4:	0553      	lsls	r3, r2, #21
 800a4b6:	d530      	bpl.n	800a51a <__ssputs_r+0x9e>
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7ff ff85 	bl	800a3c8 <_malloc_r>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	b950      	cbnz	r0, 800a4d8 <__ssputs_r+0x5c>
 800a4c2:	230c      	movs	r3, #12
 800a4c4:	f8ca 3000 	str.w	r3, [sl]
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d8:	463a      	mov	r2, r7
 800a4da:	6921      	ldr	r1, [r4, #16]
 800a4dc:	f7ff fb0e 	bl	8009afc <memcpy>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	6126      	str	r6, [r4, #16]
 800a4ee:	6165      	str	r5, [r4, #20]
 800a4f0:	443e      	add	r6, r7
 800a4f2:	1bed      	subs	r5, r5, r7
 800a4f4:	6026      	str	r6, [r4, #0]
 800a4f6:	60a5      	str	r5, [r4, #8]
 800a4f8:	464e      	mov	r6, r9
 800a4fa:	454e      	cmp	r6, r9
 800a4fc:	d900      	bls.n	800a500 <__ssputs_r+0x84>
 800a4fe:	464e      	mov	r6, r9
 800a500:	4632      	mov	r2, r6
 800a502:	4641      	mov	r1, r8
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	f000 fb13 	bl	800ab30 <memmove>
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	1b9b      	subs	r3, r3, r6
 800a50e:	60a3      	str	r3, [r4, #8]
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	441e      	add	r6, r3
 800a514:	6026      	str	r6, [r4, #0]
 800a516:	2000      	movs	r0, #0
 800a518:	e7dc      	b.n	800a4d4 <__ssputs_r+0x58>
 800a51a:	462a      	mov	r2, r5
 800a51c:	f000 fb23 	bl	800ab66 <_realloc_r>
 800a520:	4606      	mov	r6, r0
 800a522:	2800      	cmp	r0, #0
 800a524:	d1e2      	bne.n	800a4ec <__ssputs_r+0x70>
 800a526:	6921      	ldr	r1, [r4, #16]
 800a528:	4650      	mov	r0, sl
 800a52a:	f7ff feff 	bl	800a32c <_free_r>
 800a52e:	e7c8      	b.n	800a4c2 <__ssputs_r+0x46>

0800a530 <_svfiprintf_r>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	461d      	mov	r5, r3
 800a536:	898b      	ldrh	r3, [r1, #12]
 800a538:	061f      	lsls	r7, r3, #24
 800a53a:	b09d      	sub	sp, #116	; 0x74
 800a53c:	4680      	mov	r8, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	4616      	mov	r6, r2
 800a542:	d50f      	bpl.n	800a564 <_svfiprintf_r+0x34>
 800a544:	690b      	ldr	r3, [r1, #16]
 800a546:	b96b      	cbnz	r3, 800a564 <_svfiprintf_r+0x34>
 800a548:	2140      	movs	r1, #64	; 0x40
 800a54a:	f7ff ff3d 	bl	800a3c8 <_malloc_r>
 800a54e:	6020      	str	r0, [r4, #0]
 800a550:	6120      	str	r0, [r4, #16]
 800a552:	b928      	cbnz	r0, 800a560 <_svfiprintf_r+0x30>
 800a554:	230c      	movs	r3, #12
 800a556:	f8c8 3000 	str.w	r3, [r8]
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	e0c8      	b.n	800a6f2 <_svfiprintf_r+0x1c2>
 800a560:	2340      	movs	r3, #64	; 0x40
 800a562:	6163      	str	r3, [r4, #20]
 800a564:	2300      	movs	r3, #0
 800a566:	9309      	str	r3, [sp, #36]	; 0x24
 800a568:	2320      	movs	r3, #32
 800a56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a56e:	2330      	movs	r3, #48	; 0x30
 800a570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a574:	9503      	str	r5, [sp, #12]
 800a576:	f04f 0b01 	mov.w	fp, #1
 800a57a:	4637      	mov	r7, r6
 800a57c:	463d      	mov	r5, r7
 800a57e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a582:	b10b      	cbz	r3, 800a588 <_svfiprintf_r+0x58>
 800a584:	2b25      	cmp	r3, #37	; 0x25
 800a586:	d13e      	bne.n	800a606 <_svfiprintf_r+0xd6>
 800a588:	ebb7 0a06 	subs.w	sl, r7, r6
 800a58c:	d00b      	beq.n	800a5a6 <_svfiprintf_r+0x76>
 800a58e:	4653      	mov	r3, sl
 800a590:	4632      	mov	r2, r6
 800a592:	4621      	mov	r1, r4
 800a594:	4640      	mov	r0, r8
 800a596:	f7ff ff71 	bl	800a47c <__ssputs_r>
 800a59a:	3001      	adds	r0, #1
 800a59c:	f000 80a4 	beq.w	800a6e8 <_svfiprintf_r+0x1b8>
 800a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a2:	4453      	add	r3, sl
 800a5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a6:	783b      	ldrb	r3, [r7, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 809d 	beq.w	800a6e8 <_svfiprintf_r+0x1b8>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a5c2:	462f      	mov	r7, r5
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a5ca:	4850      	ldr	r0, [pc, #320]	; (800a70c <_svfiprintf_r+0x1dc>)
 800a5cc:	f7f5 fe08 	bl	80001e0 <memchr>
 800a5d0:	9b04      	ldr	r3, [sp, #16]
 800a5d2:	b9d0      	cbnz	r0, 800a60a <_svfiprintf_r+0xda>
 800a5d4:	06d9      	lsls	r1, r3, #27
 800a5d6:	bf44      	itt	mi
 800a5d8:	2220      	movmi	r2, #32
 800a5da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5de:	071a      	lsls	r2, r3, #28
 800a5e0:	bf44      	itt	mi
 800a5e2:	222b      	movmi	r2, #43	; 0x2b
 800a5e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5e8:	782a      	ldrb	r2, [r5, #0]
 800a5ea:	2a2a      	cmp	r2, #42	; 0x2a
 800a5ec:	d015      	beq.n	800a61a <_svfiprintf_r+0xea>
 800a5ee:	9a07      	ldr	r2, [sp, #28]
 800a5f0:	462f      	mov	r7, r5
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	250a      	movs	r5, #10
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5fc:	3b30      	subs	r3, #48	; 0x30
 800a5fe:	2b09      	cmp	r3, #9
 800a600:	d94d      	bls.n	800a69e <_svfiprintf_r+0x16e>
 800a602:	b1b8      	cbz	r0, 800a634 <_svfiprintf_r+0x104>
 800a604:	e00f      	b.n	800a626 <_svfiprintf_r+0xf6>
 800a606:	462f      	mov	r7, r5
 800a608:	e7b8      	b.n	800a57c <_svfiprintf_r+0x4c>
 800a60a:	4a40      	ldr	r2, [pc, #256]	; (800a70c <_svfiprintf_r+0x1dc>)
 800a60c:	1a80      	subs	r0, r0, r2
 800a60e:	fa0b f000 	lsl.w	r0, fp, r0
 800a612:	4318      	orrs	r0, r3
 800a614:	9004      	str	r0, [sp, #16]
 800a616:	463d      	mov	r5, r7
 800a618:	e7d3      	b.n	800a5c2 <_svfiprintf_r+0x92>
 800a61a:	9a03      	ldr	r2, [sp, #12]
 800a61c:	1d11      	adds	r1, r2, #4
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	9103      	str	r1, [sp, #12]
 800a622:	2a00      	cmp	r2, #0
 800a624:	db01      	blt.n	800a62a <_svfiprintf_r+0xfa>
 800a626:	9207      	str	r2, [sp, #28]
 800a628:	e004      	b.n	800a634 <_svfiprintf_r+0x104>
 800a62a:	4252      	negs	r2, r2
 800a62c:	f043 0302 	orr.w	r3, r3, #2
 800a630:	9207      	str	r2, [sp, #28]
 800a632:	9304      	str	r3, [sp, #16]
 800a634:	783b      	ldrb	r3, [r7, #0]
 800a636:	2b2e      	cmp	r3, #46	; 0x2e
 800a638:	d10c      	bne.n	800a654 <_svfiprintf_r+0x124>
 800a63a:	787b      	ldrb	r3, [r7, #1]
 800a63c:	2b2a      	cmp	r3, #42	; 0x2a
 800a63e:	d133      	bne.n	800a6a8 <_svfiprintf_r+0x178>
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	1d1a      	adds	r2, r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	9203      	str	r2, [sp, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bfb8      	it	lt
 800a64c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a650:	3702      	adds	r7, #2
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	4d2e      	ldr	r5, [pc, #184]	; (800a710 <_svfiprintf_r+0x1e0>)
 800a656:	7839      	ldrb	r1, [r7, #0]
 800a658:	2203      	movs	r2, #3
 800a65a:	4628      	mov	r0, r5
 800a65c:	f7f5 fdc0 	bl	80001e0 <memchr>
 800a660:	b138      	cbz	r0, 800a672 <_svfiprintf_r+0x142>
 800a662:	2340      	movs	r3, #64	; 0x40
 800a664:	1b40      	subs	r0, r0, r5
 800a666:	fa03 f000 	lsl.w	r0, r3, r0
 800a66a:	9b04      	ldr	r3, [sp, #16]
 800a66c:	4303      	orrs	r3, r0
 800a66e:	3701      	adds	r7, #1
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	7839      	ldrb	r1, [r7, #0]
 800a674:	4827      	ldr	r0, [pc, #156]	; (800a714 <_svfiprintf_r+0x1e4>)
 800a676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a67a:	2206      	movs	r2, #6
 800a67c:	1c7e      	adds	r6, r7, #1
 800a67e:	f7f5 fdaf 	bl	80001e0 <memchr>
 800a682:	2800      	cmp	r0, #0
 800a684:	d038      	beq.n	800a6f8 <_svfiprintf_r+0x1c8>
 800a686:	4b24      	ldr	r3, [pc, #144]	; (800a718 <_svfiprintf_r+0x1e8>)
 800a688:	bb13      	cbnz	r3, 800a6d0 <_svfiprintf_r+0x1a0>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	3307      	adds	r3, #7
 800a68e:	f023 0307 	bic.w	r3, r3, #7
 800a692:	3308      	adds	r3, #8
 800a694:	9303      	str	r3, [sp, #12]
 800a696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a698:	444b      	add	r3, r9
 800a69a:	9309      	str	r3, [sp, #36]	; 0x24
 800a69c:	e76d      	b.n	800a57a <_svfiprintf_r+0x4a>
 800a69e:	fb05 3202 	mla	r2, r5, r2, r3
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	e7a6      	b.n	800a5f6 <_svfiprintf_r+0xc6>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	3701      	adds	r7, #1
 800a6ac:	9305      	str	r3, [sp, #20]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	250a      	movs	r5, #10
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b8:	3a30      	subs	r2, #48	; 0x30
 800a6ba:	2a09      	cmp	r2, #9
 800a6bc:	d903      	bls.n	800a6c6 <_svfiprintf_r+0x196>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0c8      	beq.n	800a654 <_svfiprintf_r+0x124>
 800a6c2:	9105      	str	r1, [sp, #20]
 800a6c4:	e7c6      	b.n	800a654 <_svfiprintf_r+0x124>
 800a6c6:	fb05 2101 	mla	r1, r5, r1, r2
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	e7f0      	b.n	800a6b2 <_svfiprintf_r+0x182>
 800a6d0:	ab03      	add	r3, sp, #12
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	4b11      	ldr	r3, [pc, #68]	; (800a71c <_svfiprintf_r+0x1ec>)
 800a6d8:	a904      	add	r1, sp, #16
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f7fc f8da 	bl	8006894 <_printf_float>
 800a6e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a6e4:	4681      	mov	r9, r0
 800a6e6:	d1d6      	bne.n	800a696 <_svfiprintf_r+0x166>
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	065b      	lsls	r3, r3, #25
 800a6ec:	f53f af35 	bmi.w	800a55a <_svfiprintf_r+0x2a>
 800a6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6f2:	b01d      	add	sp, #116	; 0x74
 800a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	ab03      	add	r3, sp, #12
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4b07      	ldr	r3, [pc, #28]	; (800a71c <_svfiprintf_r+0x1ec>)
 800a700:	a904      	add	r1, sp, #16
 800a702:	4640      	mov	r0, r8
 800a704:	f7fc fb7c 	bl	8006e00 <_printf_i>
 800a708:	e7ea      	b.n	800a6e0 <_svfiprintf_r+0x1b0>
 800a70a:	bf00      	nop
 800a70c:	0800af2c 	.word	0x0800af2c
 800a710:	0800af32 	.word	0x0800af32
 800a714:	0800af36 	.word	0x0800af36
 800a718:	08006895 	.word	0x08006895
 800a71c:	0800a47d 	.word	0x0800a47d

0800a720 <__sfputc_r>:
 800a720:	6893      	ldr	r3, [r2, #8]
 800a722:	3b01      	subs	r3, #1
 800a724:	2b00      	cmp	r3, #0
 800a726:	b410      	push	{r4}
 800a728:	6093      	str	r3, [r2, #8]
 800a72a:	da08      	bge.n	800a73e <__sfputc_r+0x1e>
 800a72c:	6994      	ldr	r4, [r2, #24]
 800a72e:	42a3      	cmp	r3, r4
 800a730:	db01      	blt.n	800a736 <__sfputc_r+0x16>
 800a732:	290a      	cmp	r1, #10
 800a734:	d103      	bne.n	800a73e <__sfputc_r+0x1e>
 800a736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a73a:	f7fd bda7 	b.w	800828c <__swbuf_r>
 800a73e:	6813      	ldr	r3, [r2, #0]
 800a740:	1c58      	adds	r0, r3, #1
 800a742:	6010      	str	r0, [r2, #0]
 800a744:	7019      	strb	r1, [r3, #0]
 800a746:	4608      	mov	r0, r1
 800a748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <__sfputs_r>:
 800a74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a750:	4606      	mov	r6, r0
 800a752:	460f      	mov	r7, r1
 800a754:	4614      	mov	r4, r2
 800a756:	18d5      	adds	r5, r2, r3
 800a758:	42ac      	cmp	r4, r5
 800a75a:	d101      	bne.n	800a760 <__sfputs_r+0x12>
 800a75c:	2000      	movs	r0, #0
 800a75e:	e007      	b.n	800a770 <__sfputs_r+0x22>
 800a760:	463a      	mov	r2, r7
 800a762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ffda 	bl	800a720 <__sfputc_r>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d1f3      	bne.n	800a758 <__sfputs_r+0xa>
 800a770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a774 <_vfiprintf_r>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	460c      	mov	r4, r1
 800a77a:	b09d      	sub	sp, #116	; 0x74
 800a77c:	4617      	mov	r7, r2
 800a77e:	461d      	mov	r5, r3
 800a780:	4606      	mov	r6, r0
 800a782:	b118      	cbz	r0, 800a78c <_vfiprintf_r+0x18>
 800a784:	6983      	ldr	r3, [r0, #24]
 800a786:	b90b      	cbnz	r3, 800a78c <_vfiprintf_r+0x18>
 800a788:	f7fe fd76 	bl	8009278 <__sinit>
 800a78c:	4b7c      	ldr	r3, [pc, #496]	; (800a980 <_vfiprintf_r+0x20c>)
 800a78e:	429c      	cmp	r4, r3
 800a790:	d158      	bne.n	800a844 <_vfiprintf_r+0xd0>
 800a792:	6874      	ldr	r4, [r6, #4]
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	0718      	lsls	r0, r3, #28
 800a798:	d55e      	bpl.n	800a858 <_vfiprintf_r+0xe4>
 800a79a:	6923      	ldr	r3, [r4, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d05b      	beq.n	800a858 <_vfiprintf_r+0xe4>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7aa:	2330      	movs	r3, #48	; 0x30
 800a7ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7b0:	9503      	str	r5, [sp, #12]
 800a7b2:	f04f 0b01 	mov.w	fp, #1
 800a7b6:	46b8      	mov	r8, r7
 800a7b8:	4645      	mov	r5, r8
 800a7ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a7be:	b10b      	cbz	r3, 800a7c4 <_vfiprintf_r+0x50>
 800a7c0:	2b25      	cmp	r3, #37	; 0x25
 800a7c2:	d154      	bne.n	800a86e <_vfiprintf_r+0xfa>
 800a7c4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a7c8:	d00b      	beq.n	800a7e2 <_vfiprintf_r+0x6e>
 800a7ca:	4653      	mov	r3, sl
 800a7cc:	463a      	mov	r2, r7
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f7ff ffbc 	bl	800a74e <__sfputs_r>
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	f000 80c2 	beq.w	800a960 <_vfiprintf_r+0x1ec>
 800a7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7de:	4453      	add	r3, sl
 800a7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e2:	f898 3000 	ldrb.w	r3, [r8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 80ba 	beq.w	800a960 <_vfiprintf_r+0x1ec>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7fe:	931a      	str	r3, [sp, #104]	; 0x68
 800a800:	46a8      	mov	r8, r5
 800a802:	2205      	movs	r2, #5
 800a804:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a808:	485e      	ldr	r0, [pc, #376]	; (800a984 <_vfiprintf_r+0x210>)
 800a80a:	f7f5 fce9 	bl	80001e0 <memchr>
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	bb78      	cbnz	r0, 800a872 <_vfiprintf_r+0xfe>
 800a812:	06d9      	lsls	r1, r3, #27
 800a814:	bf44      	itt	mi
 800a816:	2220      	movmi	r2, #32
 800a818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a81c:	071a      	lsls	r2, r3, #28
 800a81e:	bf44      	itt	mi
 800a820:	222b      	movmi	r2, #43	; 0x2b
 800a822:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a826:	782a      	ldrb	r2, [r5, #0]
 800a828:	2a2a      	cmp	r2, #42	; 0x2a
 800a82a:	d02a      	beq.n	800a882 <_vfiprintf_r+0x10e>
 800a82c:	9a07      	ldr	r2, [sp, #28]
 800a82e:	46a8      	mov	r8, r5
 800a830:	2000      	movs	r0, #0
 800a832:	250a      	movs	r5, #10
 800a834:	4641      	mov	r1, r8
 800a836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a83a:	3b30      	subs	r3, #48	; 0x30
 800a83c:	2b09      	cmp	r3, #9
 800a83e:	d969      	bls.n	800a914 <_vfiprintf_r+0x1a0>
 800a840:	b360      	cbz	r0, 800a89c <_vfiprintf_r+0x128>
 800a842:	e024      	b.n	800a88e <_vfiprintf_r+0x11a>
 800a844:	4b50      	ldr	r3, [pc, #320]	; (800a988 <_vfiprintf_r+0x214>)
 800a846:	429c      	cmp	r4, r3
 800a848:	d101      	bne.n	800a84e <_vfiprintf_r+0xda>
 800a84a:	68b4      	ldr	r4, [r6, #8]
 800a84c:	e7a2      	b.n	800a794 <_vfiprintf_r+0x20>
 800a84e:	4b4f      	ldr	r3, [pc, #316]	; (800a98c <_vfiprintf_r+0x218>)
 800a850:	429c      	cmp	r4, r3
 800a852:	bf08      	it	eq
 800a854:	68f4      	ldreq	r4, [r6, #12]
 800a856:	e79d      	b.n	800a794 <_vfiprintf_r+0x20>
 800a858:	4621      	mov	r1, r4
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7fd fd68 	bl	8008330 <__swsetup_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	d09d      	beq.n	800a7a0 <_vfiprintf_r+0x2c>
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	b01d      	add	sp, #116	; 0x74
 800a86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	46a8      	mov	r8, r5
 800a870:	e7a2      	b.n	800a7b8 <_vfiprintf_r+0x44>
 800a872:	4a44      	ldr	r2, [pc, #272]	; (800a984 <_vfiprintf_r+0x210>)
 800a874:	1a80      	subs	r0, r0, r2
 800a876:	fa0b f000 	lsl.w	r0, fp, r0
 800a87a:	4318      	orrs	r0, r3
 800a87c:	9004      	str	r0, [sp, #16]
 800a87e:	4645      	mov	r5, r8
 800a880:	e7be      	b.n	800a800 <_vfiprintf_r+0x8c>
 800a882:	9a03      	ldr	r2, [sp, #12]
 800a884:	1d11      	adds	r1, r2, #4
 800a886:	6812      	ldr	r2, [r2, #0]
 800a888:	9103      	str	r1, [sp, #12]
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	db01      	blt.n	800a892 <_vfiprintf_r+0x11e>
 800a88e:	9207      	str	r2, [sp, #28]
 800a890:	e004      	b.n	800a89c <_vfiprintf_r+0x128>
 800a892:	4252      	negs	r2, r2
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	9207      	str	r2, [sp, #28]
 800a89a:	9304      	str	r3, [sp, #16]
 800a89c:	f898 3000 	ldrb.w	r3, [r8]
 800a8a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a8a2:	d10e      	bne.n	800a8c2 <_vfiprintf_r+0x14e>
 800a8a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8aa:	d138      	bne.n	800a91e <_vfiprintf_r+0x1aa>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1d1a      	adds	r2, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9203      	str	r2, [sp, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfb8      	it	lt
 800a8b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8bc:	f108 0802 	add.w	r8, r8, #2
 800a8c0:	9305      	str	r3, [sp, #20]
 800a8c2:	4d33      	ldr	r5, [pc, #204]	; (800a990 <_vfiprintf_r+0x21c>)
 800a8c4:	f898 1000 	ldrb.w	r1, [r8]
 800a8c8:	2203      	movs	r2, #3
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f7f5 fc88 	bl	80001e0 <memchr>
 800a8d0:	b140      	cbz	r0, 800a8e4 <_vfiprintf_r+0x170>
 800a8d2:	2340      	movs	r3, #64	; 0x40
 800a8d4:	1b40      	subs	r0, r0, r5
 800a8d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8da:	9b04      	ldr	r3, [sp, #16]
 800a8dc:	4303      	orrs	r3, r0
 800a8de:	f108 0801 	add.w	r8, r8, #1
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	f898 1000 	ldrb.w	r1, [r8]
 800a8e8:	482a      	ldr	r0, [pc, #168]	; (800a994 <_vfiprintf_r+0x220>)
 800a8ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ee:	2206      	movs	r2, #6
 800a8f0:	f108 0701 	add.w	r7, r8, #1
 800a8f4:	f7f5 fc74 	bl	80001e0 <memchr>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d037      	beq.n	800a96c <_vfiprintf_r+0x1f8>
 800a8fc:	4b26      	ldr	r3, [pc, #152]	; (800a998 <_vfiprintf_r+0x224>)
 800a8fe:	bb1b      	cbnz	r3, 800a948 <_vfiprintf_r+0x1d4>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	3307      	adds	r3, #7
 800a904:	f023 0307 	bic.w	r3, r3, #7
 800a908:	3308      	adds	r3, #8
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90e:	444b      	add	r3, r9
 800a910:	9309      	str	r3, [sp, #36]	; 0x24
 800a912:	e750      	b.n	800a7b6 <_vfiprintf_r+0x42>
 800a914:	fb05 3202 	mla	r2, r5, r2, r3
 800a918:	2001      	movs	r0, #1
 800a91a:	4688      	mov	r8, r1
 800a91c:	e78a      	b.n	800a834 <_vfiprintf_r+0xc0>
 800a91e:	2300      	movs	r3, #0
 800a920:	f108 0801 	add.w	r8, r8, #1
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	4619      	mov	r1, r3
 800a928:	250a      	movs	r5, #10
 800a92a:	4640      	mov	r0, r8
 800a92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a930:	3a30      	subs	r2, #48	; 0x30
 800a932:	2a09      	cmp	r2, #9
 800a934:	d903      	bls.n	800a93e <_vfiprintf_r+0x1ca>
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0c3      	beq.n	800a8c2 <_vfiprintf_r+0x14e>
 800a93a:	9105      	str	r1, [sp, #20]
 800a93c:	e7c1      	b.n	800a8c2 <_vfiprintf_r+0x14e>
 800a93e:	fb05 2101 	mla	r1, r5, r1, r2
 800a942:	2301      	movs	r3, #1
 800a944:	4680      	mov	r8, r0
 800a946:	e7f0      	b.n	800a92a <_vfiprintf_r+0x1b6>
 800a948:	ab03      	add	r3, sp, #12
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4622      	mov	r2, r4
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <_vfiprintf_r+0x228>)
 800a950:	a904      	add	r1, sp, #16
 800a952:	4630      	mov	r0, r6
 800a954:	f7fb ff9e 	bl	8006894 <_printf_float>
 800a958:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a95c:	4681      	mov	r9, r0
 800a95e:	d1d5      	bne.n	800a90c <_vfiprintf_r+0x198>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	065b      	lsls	r3, r3, #25
 800a964:	f53f af7e 	bmi.w	800a864 <_vfiprintf_r+0xf0>
 800a968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a96a:	e77d      	b.n	800a868 <_vfiprintf_r+0xf4>
 800a96c:	ab03      	add	r3, sp, #12
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	4622      	mov	r2, r4
 800a972:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <_vfiprintf_r+0x228>)
 800a974:	a904      	add	r1, sp, #16
 800a976:	4630      	mov	r0, r6
 800a978:	f7fc fa42 	bl	8006e00 <_printf_i>
 800a97c:	e7ec      	b.n	800a958 <_vfiprintf_r+0x1e4>
 800a97e:	bf00      	nop
 800a980:	0800ade0 	.word	0x0800ade0
 800a984:	0800af2c 	.word	0x0800af2c
 800a988:	0800ae00 	.word	0x0800ae00
 800a98c:	0800adc0 	.word	0x0800adc0
 800a990:	0800af32 	.word	0x0800af32
 800a994:	0800af36 	.word	0x0800af36
 800a998:	08006895 	.word	0x08006895
 800a99c:	0800a74f 	.word	0x0800a74f

0800a9a0 <_sbrk_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4c06      	ldr	r4, [pc, #24]	; (800a9bc <_sbrk_r+0x1c>)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	6023      	str	r3, [r4, #0]
 800a9ac:	f7f7 fb76 	bl	800209c <_sbrk>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_sbrk_r+0x1a>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_sbrk_r+0x1a>
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	20000390 	.word	0x20000390

0800a9c0 <__sread>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c8:	f000 f8f4 	bl	800abb4 <_read_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	bfab      	itete	ge
 800a9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9d4:	181b      	addge	r3, r3, r0
 800a9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9da:	bfac      	ite	ge
 800a9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9de:	81a3      	strhlt	r3, [r4, #12]
 800a9e0:	bd10      	pop	{r4, pc}

0800a9e2 <__swrite>:
 800a9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	461f      	mov	r7, r3
 800a9e8:	898b      	ldrh	r3, [r1, #12]
 800a9ea:	05db      	lsls	r3, r3, #23
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	4616      	mov	r6, r2
 800a9f2:	d505      	bpl.n	800aa00 <__swrite+0x1e>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fc:	f000 f886 	bl	800ab0c <_lseek_r>
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	463b      	mov	r3, r7
 800aa10:	4628      	mov	r0, r5
 800aa12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	f000 b835 	b.w	800aa84 <_write_r>

0800aa1a <__sseek>:
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa22:	f000 f873 	bl	800ab0c <_lseek_r>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	bf15      	itete	ne
 800aa2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa36:	81a3      	strheq	r3, [r4, #12]
 800aa38:	bf18      	it	ne
 800aa3a:	81a3      	strhne	r3, [r4, #12]
 800aa3c:	bd10      	pop	{r4, pc}

0800aa3e <__sclose>:
 800aa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa42:	f000 b831 	b.w	800aaa8 <_close_r>

0800aa46 <strncmp>:
 800aa46:	b510      	push	{r4, lr}
 800aa48:	b16a      	cbz	r2, 800aa66 <strncmp+0x20>
 800aa4a:	3901      	subs	r1, #1
 800aa4c:	1884      	adds	r4, r0, r2
 800aa4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d103      	bne.n	800aa62 <strncmp+0x1c>
 800aa5a:	42a0      	cmp	r0, r4
 800aa5c:	d001      	beq.n	800aa62 <strncmp+0x1c>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f5      	bne.n	800aa4e <strncmp+0x8>
 800aa62:	1a98      	subs	r0, r3, r2
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	4610      	mov	r0, r2
 800aa68:	e7fc      	b.n	800aa64 <strncmp+0x1e>

0800aa6a <__ascii_wctomb>:
 800aa6a:	b149      	cbz	r1, 800aa80 <__ascii_wctomb+0x16>
 800aa6c:	2aff      	cmp	r2, #255	; 0xff
 800aa6e:	bf85      	ittet	hi
 800aa70:	238a      	movhi	r3, #138	; 0x8a
 800aa72:	6003      	strhi	r3, [r0, #0]
 800aa74:	700a      	strbls	r2, [r1, #0]
 800aa76:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa7a:	bf98      	it	ls
 800aa7c:	2001      	movls	r0, #1
 800aa7e:	4770      	bx	lr
 800aa80:	4608      	mov	r0, r1
 800aa82:	4770      	bx	lr

0800aa84 <_write_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4c07      	ldr	r4, [pc, #28]	; (800aaa4 <_write_r+0x20>)
 800aa88:	4605      	mov	r5, r0
 800aa8a:	4608      	mov	r0, r1
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f7f7 faac 	bl	8001ff0 <_write>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_write_r+0x1e>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_write_r+0x1e>
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20000390 	.word	0x20000390

0800aaa8 <_close_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4c06      	ldr	r4, [pc, #24]	; (800aac4 <_close_r+0x1c>)
 800aaac:	2300      	movs	r3, #0
 800aaae:	4605      	mov	r5, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	f7f7 fabe 	bl	8002034 <_close>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_close_r+0x1a>
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_close_r+0x1a>
 800aac0:	602b      	str	r3, [r5, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	20000390 	.word	0x20000390

0800aac8 <_fstat_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4c07      	ldr	r4, [pc, #28]	; (800aae8 <_fstat_r+0x20>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4605      	mov	r5, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	f7f7 fab9 	bl	800204c <_fstat>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d102      	bne.n	800aae4 <_fstat_r+0x1c>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	b103      	cbz	r3, 800aae4 <_fstat_r+0x1c>
 800aae2:	602b      	str	r3, [r5, #0]
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	20000390 	.word	0x20000390

0800aaec <_isatty_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4c06      	ldr	r4, [pc, #24]	; (800ab08 <_isatty_r+0x1c>)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	f7f7 fab8 	bl	800206c <_isatty>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_isatty_r+0x1a>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_isatty_r+0x1a>
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	20000390 	.word	0x20000390

0800ab0c <_lseek_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4c07      	ldr	r4, [pc, #28]	; (800ab2c <_lseek_r+0x20>)
 800ab10:	4605      	mov	r5, r0
 800ab12:	4608      	mov	r0, r1
 800ab14:	4611      	mov	r1, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	6022      	str	r2, [r4, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7f7 fab1 	bl	8002082 <_lseek>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_lseek_r+0x1e>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_lseek_r+0x1e>
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	20000390 	.word	0x20000390

0800ab30 <memmove>:
 800ab30:	4288      	cmp	r0, r1
 800ab32:	b510      	push	{r4, lr}
 800ab34:	eb01 0302 	add.w	r3, r1, r2
 800ab38:	d807      	bhi.n	800ab4a <memmove+0x1a>
 800ab3a:	1e42      	subs	r2, r0, #1
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	d00a      	beq.n	800ab56 <memmove+0x26>
 800ab40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab44:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ab48:	e7f8      	b.n	800ab3c <memmove+0xc>
 800ab4a:	4283      	cmp	r3, r0
 800ab4c:	d9f5      	bls.n	800ab3a <memmove+0xa>
 800ab4e:	1881      	adds	r1, r0, r2
 800ab50:	1ad2      	subs	r2, r2, r3
 800ab52:	42d3      	cmn	r3, r2
 800ab54:	d100      	bne.n	800ab58 <memmove+0x28>
 800ab56:	bd10      	pop	{r4, pc}
 800ab58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab60:	e7f7      	b.n	800ab52 <memmove+0x22>

0800ab62 <__malloc_lock>:
 800ab62:	4770      	bx	lr

0800ab64 <__malloc_unlock>:
 800ab64:	4770      	bx	lr

0800ab66 <_realloc_r>:
 800ab66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab68:	4607      	mov	r7, r0
 800ab6a:	4614      	mov	r4, r2
 800ab6c:	460e      	mov	r6, r1
 800ab6e:	b921      	cbnz	r1, 800ab7a <_realloc_r+0x14>
 800ab70:	4611      	mov	r1, r2
 800ab72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab76:	f7ff bc27 	b.w	800a3c8 <_malloc_r>
 800ab7a:	b922      	cbnz	r2, 800ab86 <_realloc_r+0x20>
 800ab7c:	f7ff fbd6 	bl	800a32c <_free_r>
 800ab80:	4625      	mov	r5, r4
 800ab82:	4628      	mov	r0, r5
 800ab84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab86:	f000 f827 	bl	800abd8 <_malloc_usable_size_r>
 800ab8a:	42a0      	cmp	r0, r4
 800ab8c:	d20f      	bcs.n	800abae <_realloc_r+0x48>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff fc19 	bl	800a3c8 <_malloc_r>
 800ab96:	4605      	mov	r5, r0
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d0f2      	beq.n	800ab82 <_realloc_r+0x1c>
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4622      	mov	r2, r4
 800aba0:	f7fe ffac 	bl	8009afc <memcpy>
 800aba4:	4631      	mov	r1, r6
 800aba6:	4638      	mov	r0, r7
 800aba8:	f7ff fbc0 	bl	800a32c <_free_r>
 800abac:	e7e9      	b.n	800ab82 <_realloc_r+0x1c>
 800abae:	4635      	mov	r5, r6
 800abb0:	e7e7      	b.n	800ab82 <_realloc_r+0x1c>
	...

0800abb4 <_read_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4c07      	ldr	r4, [pc, #28]	; (800abd4 <_read_r+0x20>)
 800abb8:	4605      	mov	r5, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f7 f9f6 	bl	8001fb4 <_read>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_read_r+0x1e>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_read_r+0x1e>
 800abd0:	602b      	str	r3, [r5, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20000390 	.word	0x20000390

0800abd8 <_malloc_usable_size_r>:
 800abd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abdc:	1f18      	subs	r0, r3, #4
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfbc      	itt	lt
 800abe2:	580b      	ldrlt	r3, [r1, r0]
 800abe4:	18c0      	addlt	r0, r0, r3
 800abe6:	4770      	bx	lr

0800abe8 <_init>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr

0800abf4 <_fini>:
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	bf00      	nop
 800abf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfa:	bc08      	pop	{r3}
 800abfc:	469e      	mov	lr, r3
 800abfe:	4770      	bx	lr
